# coding: utf-8

"""
    Crunchbase Enterprise API

    Crunchbase Enterprise API, 2021-07-16  # noqa: E501

    OpenAPI spec version: 1.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SearchApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def searches_acquisitions_post(self, body, **kwargs):  # noqa: E501
        """Search Acquisition Entities. Can perform more complex filtering based on the query defined in the request body.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches_acquisitions_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EntitySearch body: Search Query Parameters (required)
        :return: AcquisitionSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.searches_acquisitions_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.searches_acquisitions_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def searches_acquisitions_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Search Acquisition Entities. Can perform more complex filtering based on the query defined in the request body.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches_acquisitions_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EntitySearch body: Search Query Parameters (required)
        :return: AcquisitionSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method searches_acquisitions_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `searches_acquisitions_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthHeader']  # noqa: E501

        return self.api_client.call_api(
            '/searches/acquisitions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AcquisitionSearchResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def searches_addresses_post(self, body, **kwargs):  # noqa: E501
        """Search Address Entities. Can perform more complex filtering based on the query defined in the request body.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches_addresses_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EntitySearch body: Search Query Parameters (required)
        :return: AddressSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.searches_addresses_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.searches_addresses_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def searches_addresses_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Search Address Entities. Can perform more complex filtering based on the query defined in the request body.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches_addresses_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EntitySearch body: Search Query Parameters (required)
        :return: AddressSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method searches_addresses_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `searches_addresses_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthHeader']  # noqa: E501

        return self.api_client.call_api(
            '/searches/addresses', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddressSearchResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def searches_categories_post(self, body, **kwargs):  # noqa: E501
        """Search Category Entities. Can perform more complex filtering based on the query defined in the request body.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches_categories_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EntitySearch body: Search Query Parameters (required)
        :return: CategorySearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.searches_categories_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.searches_categories_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def searches_categories_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Search Category Entities. Can perform more complex filtering based on the query defined in the request body.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches_categories_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EntitySearch body: Search Query Parameters (required)
        :return: CategorySearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method searches_categories_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `searches_categories_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthHeader']  # noqa: E501

        return self.api_client.call_api(
            '/searches/categories', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CategorySearchResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def searches_category_groups_post(self, body, **kwargs):  # noqa: E501
        """Search Category Group Entities. Can perform more complex filtering based on the query defined in the request body.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches_category_groups_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EntitySearch body: Search Query Parameters (required)
        :return: CategoryGroupSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.searches_category_groups_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.searches_category_groups_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def searches_category_groups_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Search Category Group Entities. Can perform more complex filtering based on the query defined in the request body.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches_category_groups_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EntitySearch body: Search Query Parameters (required)
        :return: CategoryGroupSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method searches_category_groups_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `searches_category_groups_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthHeader']  # noqa: E501

        return self.api_client.call_api(
            '/searches/category_groups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CategoryGroupSearchResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def searches_degrees_post(self, body, **kwargs):  # noqa: E501
        """Search Degree Entities. Can perform more complex filtering based on the query defined in the request body.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches_degrees_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EntitySearch body: Search Query Parameters (required)
        :return: DegreeSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.searches_degrees_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.searches_degrees_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def searches_degrees_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Search Degree Entities. Can perform more complex filtering based on the query defined in the request body.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches_degrees_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EntitySearch body: Search Query Parameters (required)
        :return: DegreeSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method searches_degrees_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `searches_degrees_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthHeader']  # noqa: E501

        return self.api_client.call_api(
            '/searches/degrees', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DegreeSearchResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def searches_event_appearances_post(self, body, **kwargs):  # noqa: E501
        """Search Event Appearance Entities. Can perform more complex filtering based on the query defined in the request body.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches_event_appearances_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EntitySearch body: Search Query Parameters (required)
        :return: EventAppearanceSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.searches_event_appearances_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.searches_event_appearances_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def searches_event_appearances_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Search Event Appearance Entities. Can perform more complex filtering based on the query defined in the request body.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches_event_appearances_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EntitySearch body: Search Query Parameters (required)
        :return: EventAppearanceSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method searches_event_appearances_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `searches_event_appearances_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthHeader']  # noqa: E501

        return self.api_client.call_api(
            '/searches/event_appearances', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EventAppearanceSearchResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def searches_events_post(self, body, **kwargs):  # noqa: E501
        """Search Event Entities. Can perform more complex filtering based on the query defined in the request body.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches_events_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EntitySearch body: Search Query Parameters (required)
        :return: EventSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.searches_events_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.searches_events_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def searches_events_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Search Event Entities. Can perform more complex filtering based on the query defined in the request body.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches_events_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EntitySearch body: Search Query Parameters (required)
        :return: EventSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method searches_events_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `searches_events_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthHeader']  # noqa: E501

        return self.api_client.call_api(
            '/searches/events', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EventSearchResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def searches_funding_rounds_post(self, body, **kwargs):  # noqa: E501
        """Search Funding Round Entities. Can perform more complex filtering based on the query defined in the request body.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches_funding_rounds_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EntitySearch body: Search Query Parameters (required)
        :return: FundingRoundSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.searches_funding_rounds_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.searches_funding_rounds_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def searches_funding_rounds_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Search Funding Round Entities. Can perform more complex filtering based on the query defined in the request body.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches_funding_rounds_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EntitySearch body: Search Query Parameters (required)
        :return: FundingRoundSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method searches_funding_rounds_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `searches_funding_rounds_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthHeader']  # noqa: E501

        return self.api_client.call_api(
            '/searches/funding_rounds', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FundingRoundSearchResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def searches_funds_post(self, body, **kwargs):  # noqa: E501
        """Search Fund Entities. Can perform more complex filtering based on the query defined in the request body.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches_funds_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EntitySearch body: Search Query Parameters (required)
        :return: FundSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.searches_funds_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.searches_funds_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def searches_funds_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Search Fund Entities. Can perform more complex filtering based on the query defined in the request body.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches_funds_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EntitySearch body: Search Query Parameters (required)
        :return: FundSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method searches_funds_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `searches_funds_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthHeader']  # noqa: E501

        return self.api_client.call_api(
            '/searches/funds', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FundSearchResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def searches_investments_post(self, body, **kwargs):  # noqa: E501
        """Search Investment Entities. Can perform more complex filtering based on the query defined in the request body.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches_investments_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EntitySearch body: Search Query Parameters (required)
        :return: InvestmentSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.searches_investments_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.searches_investments_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def searches_investments_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Search Investment Entities. Can perform more complex filtering based on the query defined in the request body.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches_investments_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EntitySearch body: Search Query Parameters (required)
        :return: InvestmentSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method searches_investments_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `searches_investments_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthHeader']  # noqa: E501

        return self.api_client.call_api(
            '/searches/investments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InvestmentSearchResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def searches_ipos_post(self, body, **kwargs):  # noqa: E501
        """Search Ipo Entities. Can perform more complex filtering based on the query defined in the request body.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches_ipos_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EntitySearch body: Search Query Parameters (required)
        :return: IpoSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.searches_ipos_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.searches_ipos_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def searches_ipos_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Search Ipo Entities. Can perform more complex filtering based on the query defined in the request body.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches_ipos_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EntitySearch body: Search Query Parameters (required)
        :return: IpoSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method searches_ipos_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `searches_ipos_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthHeader']  # noqa: E501

        return self.api_client.call_api(
            '/searches/ipos', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IpoSearchResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def searches_jobs_post(self, body, **kwargs):  # noqa: E501
        """Search Job Entities. Can perform more complex filtering based on the query defined in the request body.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches_jobs_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EntitySearch body: Search Query Parameters (required)
        :return: JobSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.searches_jobs_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.searches_jobs_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def searches_jobs_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Search Job Entities. Can perform more complex filtering based on the query defined in the request body.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches_jobs_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EntitySearch body: Search Query Parameters (required)
        :return: JobSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method searches_jobs_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `searches_jobs_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthHeader']  # noqa: E501

        return self.api_client.call_api(
            '/searches/jobs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JobSearchResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def searches_key_employee_changes_post(self, body, **kwargs):  # noqa: E501
        """Search Key Employee Change Entities. Can perform more complex filtering based on the query defined in the request body.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches_key_employee_changes_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EntitySearch body: Search Query Parameters (required)
        :return: KeyEmployeeChangeSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.searches_key_employee_changes_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.searches_key_employee_changes_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def searches_key_employee_changes_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Search Key Employee Change Entities. Can perform more complex filtering based on the query defined in the request body.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches_key_employee_changes_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EntitySearch body: Search Query Parameters (required)
        :return: KeyEmployeeChangeSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method searches_key_employee_changes_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `searches_key_employee_changes_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthHeader']  # noqa: E501

        return self.api_client.call_api(
            '/searches/key_employee_changes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KeyEmployeeChangeSearchResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def searches_layoffs_post(self, body, **kwargs):  # noqa: E501
        """Search Layoff Entities. Can perform more complex filtering based on the query defined in the request body.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches_layoffs_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EntitySearch body: Search Query Parameters (required)
        :return: LayoffSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.searches_layoffs_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.searches_layoffs_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def searches_layoffs_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Search Layoff Entities. Can perform more complex filtering based on the query defined in the request body.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches_layoffs_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EntitySearch body: Search Query Parameters (required)
        :return: LayoffSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method searches_layoffs_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `searches_layoffs_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthHeader']  # noqa: E501

        return self.api_client.call_api(
            '/searches/layoffs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LayoffSearchResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def searches_locations_post(self, body, **kwargs):  # noqa: E501
        """Search Location Entities. Can perform more complex filtering based on the query defined in the request body.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches_locations_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EntitySearch body: Search Query Parameters (required)
        :return: LocationSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.searches_locations_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.searches_locations_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def searches_locations_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Search Location Entities. Can perform more complex filtering based on the query defined in the request body.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches_locations_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EntitySearch body: Search Query Parameters (required)
        :return: LocationSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method searches_locations_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `searches_locations_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthHeader']  # noqa: E501

        return self.api_client.call_api(
            '/searches/locations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LocationSearchResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def searches_organizations_post(self, body, **kwargs):  # noqa: E501
        """Search Organization Entities. Can perform more complex filtering based on the query defined in the request body.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches_organizations_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EntitySearch body: Search Query Parameters (required)
        :return: OrganizationSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.searches_organizations_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.searches_organizations_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def searches_organizations_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Search Organization Entities. Can perform more complex filtering based on the query defined in the request body.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches_organizations_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EntitySearch body: Search Query Parameters (required)
        :return: OrganizationSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method searches_organizations_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `searches_organizations_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthHeader']  # noqa: E501

        return self.api_client.call_api(
            '/searches/organizations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrganizationSearchResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def searches_ownerships_post(self, body, **kwargs):  # noqa: E501
        """Search Ownership Entities. Can perform more complex filtering based on the query defined in the request body.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches_ownerships_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EntitySearch body: Search Query Parameters (required)
        :return: OwnershipSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.searches_ownerships_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.searches_ownerships_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def searches_ownerships_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Search Ownership Entities. Can perform more complex filtering based on the query defined in the request body.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches_ownerships_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EntitySearch body: Search Query Parameters (required)
        :return: OwnershipSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method searches_ownerships_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `searches_ownerships_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthHeader']  # noqa: E501

        return self.api_client.call_api(
            '/searches/ownerships', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OwnershipSearchResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def searches_people_post(self, body, **kwargs):  # noqa: E501
        """Search Person Entities. Can perform more complex filtering based on the query defined in the request body.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches_people_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EntitySearch body: Search Query Parameters (required)
        :return: PersonSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.searches_people_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.searches_people_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def searches_people_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Search Person Entities. Can perform more complex filtering based on the query defined in the request body.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches_people_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EntitySearch body: Search Query Parameters (required)
        :return: PersonSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method searches_people_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `searches_people_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthHeader']  # noqa: E501

        return self.api_client.call_api(
            '/searches/people', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PersonSearchResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def searches_press_references_post(self, body, **kwargs):  # noqa: E501
        """Search Press Reference Entities. Can perform more complex filtering based on the query defined in the request body.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches_press_references_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EntitySearch body: Search Query Parameters (required)
        :return: PressReferenceSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.searches_press_references_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.searches_press_references_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def searches_press_references_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Search Press Reference Entities. Can perform more complex filtering based on the query defined in the request body.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches_press_references_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EntitySearch body: Search Query Parameters (required)
        :return: PressReferenceSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method searches_press_references_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `searches_press_references_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthHeader']  # noqa: E501

        return self.api_client.call_api(
            '/searches/press_references', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PressReferenceSearchResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def searches_principals_post(self, body, **kwargs):  # noqa: E501
        """Search Principal Entities. Can perform more complex filtering based on the query defined in the request body.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches_principals_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EntitySearch body: Search Query Parameters (required)
        :return: PrincipalSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.searches_principals_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.searches_principals_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def searches_principals_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Search Principal Entities. Can perform more complex filtering based on the query defined in the request body.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches_principals_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EntitySearch body: Search Query Parameters (required)
        :return: PrincipalSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method searches_principals_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `searches_principals_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthHeader']  # noqa: E501

        return self.api_client.call_api(
            '/searches/principals', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrincipalSearchResults',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
