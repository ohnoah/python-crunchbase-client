# coding: utf-8

"""
    Crunchbase Enterprise API

    Crunchbase Enterprise API, 2021-07-16  # noqa: E501

    OpenAPI spec version: 1.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DeletedEntitiesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def deleted_entities_collection_id_get(self, collection_id, **kwargs):  # noqa: E501
        """Retrieve deleted entities for a collection id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deleted_entities_collection_id_get(collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_id: Filter by collection id. E.g. organizations, people, funding_rounds, acquisitions, investments, events, press_references, funds, event_appearances, ipos, ownerships, categories, category_groups, locations, jobs  (required)
        :param str before_id: Used to paginate search results to the previous page. before_id should be the uuid of the first item in the current page. May not be provided simultaneously with after_id. 
        :param str after_id: Used to paginate search results to the next page. after_id should be the uuid of the last item in the current page. May not be provided simultaneously with before_id. 
        :param int limit: Number of rows to return. Default is 100, min is 1, max is 2000.
        :param str deleted_at_order: Direction of sorting by deleted_at property
        :return: DeletedEntitiesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.deleted_entities_collection_id_get_with_http_info(collection_id, **kwargs)  # noqa: E501
        else:
            (data) = self.deleted_entities_collection_id_get_with_http_info(collection_id, **kwargs)  # noqa: E501
            return data

    def deleted_entities_collection_id_get_with_http_info(self, collection_id, **kwargs):  # noqa: E501
        """Retrieve deleted entities for a collection id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deleted_entities_collection_id_get_with_http_info(collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_id: Filter by collection id. E.g. organizations, people, funding_rounds, acquisitions, investments, events, press_references, funds, event_appearances, ipos, ownerships, categories, category_groups, locations, jobs  (required)
        :param str before_id: Used to paginate search results to the previous page. before_id should be the uuid of the first item in the current page. May not be provided simultaneously with after_id. 
        :param str after_id: Used to paginate search results to the next page. after_id should be the uuid of the last item in the current page. May not be provided simultaneously with before_id. 
        :param int limit: Number of rows to return. Default is 100, min is 1, max is 2000.
        :param str deleted_at_order: Direction of sorting by deleted_at property
        :return: DeletedEntitiesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id', 'before_id', 'after_id', 'limit', 'deleted_at_order']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deleted_entities_collection_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in params or
                params['collection_id'] is None):
            raise ValueError("Missing the required parameter `collection_id` when calling `deleted_entities_collection_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collection_id'] = params['collection_id']  # noqa: E501

        query_params = []
        if 'before_id' in params:
            query_params.append(('before_id', params['before_id']))  # noqa: E501
        if 'after_id' in params:
            query_params.append(('after_id', params['after_id']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'deleted_at_order' in params:
            query_params.append(('deleted_at_order', params['deleted_at_order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthHeader']  # noqa: E501

        return self.api_client.call_api(
            '/deleted_entities/{collection_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeletedEntitiesResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def deleted_entities_get(self, **kwargs):  # noqa: E501
        """Retrieve deleted entities  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deleted_entities_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_ids: Filter by collection id(s). Comma separated list of collection ids.\\ E.g. organizations, people, funding_rounds, acquisitions, investments, events, press_references, funds, event_appearances, ipos, ownerships, categories, category_groups, locations, jobs 
        :param str before_id: Used to paginate search results to the previous page. before_id should be the uuid of the first item in the current page. May not be provided simultaneously with after_id. 
        :param str after_id: Used to paginate search results to the next page. after_id should be the uuid of the last item in the current page. May not be provided simultaneously with before_id. 
        :param int limit: Number of rows to return. Default is 100, min is 1, max is 2000.
        :param str deleted_at_order: Direction of sorting by deleted_at property
        :return: DeletedEntitiesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.deleted_entities_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.deleted_entities_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def deleted_entities_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve deleted entities  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deleted_entities_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_ids: Filter by collection id(s). Comma separated list of collection ids.\\ E.g. organizations, people, funding_rounds, acquisitions, investments, events, press_references, funds, event_appearances, ipos, ownerships, categories, category_groups, locations, jobs 
        :param str before_id: Used to paginate search results to the previous page. before_id should be the uuid of the first item in the current page. May not be provided simultaneously with after_id. 
        :param str after_id: Used to paginate search results to the next page. after_id should be the uuid of the last item in the current page. May not be provided simultaneously with before_id. 
        :param int limit: Number of rows to return. Default is 100, min is 1, max is 2000.
        :param str deleted_at_order: Direction of sorting by deleted_at property
        :return: DeletedEntitiesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_ids', 'before_id', 'after_id', 'limit', 'deleted_at_order']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deleted_entities_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'collection_ids' in params:
            query_params.append(('collection_ids', params['collection_ids']))  # noqa: E501
        if 'before_id' in params:
            query_params.append(('before_id', params['before_id']))  # noqa: E501
        if 'after_id' in params:
            query_params.append(('after_id', params['after_id']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'deleted_at_order' in params:
            query_params.append(('deleted_at_order', params['deleted_at_order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuthHeader']  # noqa: E501

        return self.api_client.call_api(
            '/deleted_entities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeletedEntitiesResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
