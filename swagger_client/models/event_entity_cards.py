# coding: utf-8

"""
    Crunchbase Enterprise API

    Crunchbase Enterprise API, 2021-07-16  # noqa: E501

    OpenAPI spec version: 1.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EventEntityCards(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'list[Address]',
        'appearances': 'list[EventAppearance]',
        'contestants': 'list[Principal]',
        'exhibitors': 'list[Principal]',
        'fields': 'Event',
        'organizers': 'list[Principal]',
        'press_references': 'list[PressReference]',
        'speakers': 'list[Principal]',
        'sponsors': 'list[Principal]'
    }

    attribute_map = {
        'address': 'address',
        'appearances': 'appearances',
        'contestants': 'contestants',
        'exhibitors': 'exhibitors',
        'fields': 'fields',
        'organizers': 'organizers',
        'press_references': 'press_references',
        'speakers': 'speakers',
        'sponsors': 'sponsors'
    }

    def __init__(self, address=None, appearances=None, contestants=None, exhibitors=None, fields=None, organizers=None, press_references=None, speakers=None, sponsors=None):  # noqa: E501
        """EventEntityCards - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._appearances = None
        self._contestants = None
        self._exhibitors = None
        self._fields = None
        self._organizers = None
        self._press_references = None
        self._speakers = None
        self._sponsors = None
        self.discriminator = None
        if address is not None:
            self.address = address
        if appearances is not None:
            self.appearances = appearances
        if contestants is not None:
            self.contestants = contestants
        if exhibitors is not None:
            self.exhibitors = exhibitors
        if fields is not None:
            self.fields = fields
        if organizers is not None:
            self.organizers = organizers
        if press_references is not None:
            self.press_references = press_references
        if speakers is not None:
            self.speakers = speakers
        if sponsors is not None:
            self.sponsors = sponsors

    @property
    def address(self):
        """Gets the address of this EventEntityCards.  # noqa: E501


        :return: The address of this EventEntityCards.  # noqa: E501
        :rtype: list[Address]
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this EventEntityCards.


        :param address: The address of this EventEntityCards.  # noqa: E501
        :type: list[Address]
        """

        self._address = address

    @property
    def appearances(self):
        """Gets the appearances of this EventEntityCards.  # noqa: E501


        :return: The appearances of this EventEntityCards.  # noqa: E501
        :rtype: list[EventAppearance]
        """
        return self._appearances

    @appearances.setter
    def appearances(self, appearances):
        """Sets the appearances of this EventEntityCards.


        :param appearances: The appearances of this EventEntityCards.  # noqa: E501
        :type: list[EventAppearance]
        """

        self._appearances = appearances

    @property
    def contestants(self):
        """Gets the contestants of this EventEntityCards.  # noqa: E501


        :return: The contestants of this EventEntityCards.  # noqa: E501
        :rtype: list[Principal]
        """
        return self._contestants

    @contestants.setter
    def contestants(self, contestants):
        """Sets the contestants of this EventEntityCards.


        :param contestants: The contestants of this EventEntityCards.  # noqa: E501
        :type: list[Principal]
        """

        self._contestants = contestants

    @property
    def exhibitors(self):
        """Gets the exhibitors of this EventEntityCards.  # noqa: E501


        :return: The exhibitors of this EventEntityCards.  # noqa: E501
        :rtype: list[Principal]
        """
        return self._exhibitors

    @exhibitors.setter
    def exhibitors(self, exhibitors):
        """Sets the exhibitors of this EventEntityCards.


        :param exhibitors: The exhibitors of this EventEntityCards.  # noqa: E501
        :type: list[Principal]
        """

        self._exhibitors = exhibitors

    @property
    def fields(self):
        """Gets the fields of this EventEntityCards.  # noqa: E501


        :return: The fields of this EventEntityCards.  # noqa: E501
        :rtype: Event
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this EventEntityCards.


        :param fields: The fields of this EventEntityCards.  # noqa: E501
        :type: Event
        """

        self._fields = fields

    @property
    def organizers(self):
        """Gets the organizers of this EventEntityCards.  # noqa: E501


        :return: The organizers of this EventEntityCards.  # noqa: E501
        :rtype: list[Principal]
        """
        return self._organizers

    @organizers.setter
    def organizers(self, organizers):
        """Sets the organizers of this EventEntityCards.


        :param organizers: The organizers of this EventEntityCards.  # noqa: E501
        :type: list[Principal]
        """

        self._organizers = organizers

    @property
    def press_references(self):
        """Gets the press_references of this EventEntityCards.  # noqa: E501


        :return: The press_references of this EventEntityCards.  # noqa: E501
        :rtype: list[PressReference]
        """
        return self._press_references

    @press_references.setter
    def press_references(self, press_references):
        """Sets the press_references of this EventEntityCards.


        :param press_references: The press_references of this EventEntityCards.  # noqa: E501
        :type: list[PressReference]
        """

        self._press_references = press_references

    @property
    def speakers(self):
        """Gets the speakers of this EventEntityCards.  # noqa: E501


        :return: The speakers of this EventEntityCards.  # noqa: E501
        :rtype: list[Principal]
        """
        return self._speakers

    @speakers.setter
    def speakers(self, speakers):
        """Sets the speakers of this EventEntityCards.


        :param speakers: The speakers of this EventEntityCards.  # noqa: E501
        :type: list[Principal]
        """

        self._speakers = speakers

    @property
    def sponsors(self):
        """Gets the sponsors of this EventEntityCards.  # noqa: E501


        :return: The sponsors of this EventEntityCards.  # noqa: E501
        :rtype: list[Principal]
        """
        return self._sponsors

    @sponsors.setter
    def sponsors(self, sponsors):
        """Sets the sponsors of this EventEntityCards.


        :param sponsors: The sponsors of this EventEntityCards.  # noqa: E501
        :type: list[Principal]
        """

        self._sponsors = sponsors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventEntityCards, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventEntityCards):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
