# coding: utf-8

"""
    Crunchbase Enterprise API

    Crunchbase Enterprise API, 2021-07-16  # noqa: E501

    OpenAPI spec version: 1.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Event(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'categories': 'list[EntityIdentifier]',
        'category_groups': 'list[EntityIdentifier]',
        'created_at': 'datetime',
        'description': 'str',
        'ends_on': 'date',
        'entity_def_id': 'str',
        'event_type': 'list[str]',
        'event_url': 'AllOfEventEventUrl',
        'identifier': 'AllOfEventIdentifier',
        'image_id': 'str',
        'image_url': 'str',
        'location_group_identifiers': 'list[EntityIdentifier]',
        'location_identifiers': 'list[LocationIdentifier]',
        'name': 'str',
        'num_contestants': 'float',
        'num_exhibitors': 'float',
        'num_organizers': 'float',
        'num_speakers': 'float',
        'num_sponsors': 'float',
        'organizer_identifiers': 'list[EntityIdentifier]',
        'permalink': 'str',
        'permalink_aliases': 'list[str]',
        'rank_event': 'float',
        'registration_url': 'AllOfEventRegistrationUrl',
        'short_description': 'str',
        'starts_on': 'date',
        'updated_at': 'datetime',
        'uuid': 'str',
        'venue_name': 'str'
    }

    attribute_map = {
        'categories': 'categories',
        'category_groups': 'category_groups',
        'created_at': 'created_at',
        'description': 'description',
        'ends_on': 'ends_on',
        'entity_def_id': 'entity_def_id',
        'event_type': 'event_type',
        'event_url': 'event_url',
        'identifier': 'identifier',
        'image_id': 'image_id',
        'image_url': 'image_url',
        'location_group_identifiers': 'location_group_identifiers',
        'location_identifiers': 'location_identifiers',
        'name': 'name',
        'num_contestants': 'num_contestants',
        'num_exhibitors': 'num_exhibitors',
        'num_organizers': 'num_organizers',
        'num_speakers': 'num_speakers',
        'num_sponsors': 'num_sponsors',
        'organizer_identifiers': 'organizer_identifiers',
        'permalink': 'permalink',
        'permalink_aliases': 'permalink_aliases',
        'rank_event': 'rank_event',
        'registration_url': 'registration_url',
        'short_description': 'short_description',
        'starts_on': 'starts_on',
        'updated_at': 'updated_at',
        'uuid': 'uuid',
        'venue_name': 'venue_name'
    }

    def __init__(self, categories=None, category_groups=None, created_at=None, description=None, ends_on=None, entity_def_id=None, event_type=None, event_url=None, identifier=None, image_id=None, image_url=None, location_group_identifiers=None, location_identifiers=None, name=None, num_contestants=None, num_exhibitors=None, num_organizers=None, num_speakers=None, num_sponsors=None, organizer_identifiers=None, permalink=None, permalink_aliases=None, rank_event=None, registration_url=None, short_description=None, starts_on=None, updated_at=None, uuid=None, venue_name=None):  # noqa: E501
        """Event - a model defined in Swagger"""  # noqa: E501
        self._categories = None
        self._category_groups = None
        self._created_at = None
        self._description = None
        self._ends_on = None
        self._entity_def_id = None
        self._event_type = None
        self._event_url = None
        self._identifier = None
        self._image_id = None
        self._image_url = None
        self._location_group_identifiers = None
        self._location_identifiers = None
        self._name = None
        self._num_contestants = None
        self._num_exhibitors = None
        self._num_organizers = None
        self._num_speakers = None
        self._num_sponsors = None
        self._organizer_identifiers = None
        self._permalink = None
        self._permalink_aliases = None
        self._rank_event = None
        self._registration_url = None
        self._short_description = None
        self._starts_on = None
        self._updated_at = None
        self._uuid = None
        self._venue_name = None
        self.discriminator = None
        if categories is not None:
            self.categories = categories
        if category_groups is not None:
            self.category_groups = category_groups
        if created_at is not None:
            self.created_at = created_at
        if description is not None:
            self.description = description
        if ends_on is not None:
            self.ends_on = ends_on
        if entity_def_id is not None:
            self.entity_def_id = entity_def_id
        if event_type is not None:
            self.event_type = event_type
        if event_url is not None:
            self.event_url = event_url
        self.identifier = identifier
        if image_id is not None:
            self.image_id = image_id
        if image_url is not None:
            self.image_url = image_url
        if location_group_identifiers is not None:
            self.location_group_identifiers = location_group_identifiers
        if location_identifiers is not None:
            self.location_identifiers = location_identifiers
        if name is not None:
            self.name = name
        if num_contestants is not None:
            self.num_contestants = num_contestants
        if num_exhibitors is not None:
            self.num_exhibitors = num_exhibitors
        if num_organizers is not None:
            self.num_organizers = num_organizers
        if num_speakers is not None:
            self.num_speakers = num_speakers
        if num_sponsors is not None:
            self.num_sponsors = num_sponsors
        if organizer_identifiers is not None:
            self.organizer_identifiers = organizer_identifiers
        if permalink is not None:
            self.permalink = permalink
        if permalink_aliases is not None:
            self.permalink_aliases = permalink_aliases
        if rank_event is not None:
            self.rank_event = rank_event
        if registration_url is not None:
            self.registration_url = registration_url
        if short_description is not None:
            self.short_description = short_description
        if starts_on is not None:
            self.starts_on = starts_on
        if updated_at is not None:
            self.updated_at = updated_at
        if uuid is not None:
            self.uuid = uuid
        if venue_name is not None:
            self.venue_name = venue_name

    @property
    def categories(self):
        """Gets the categories of this Event.  # noqa: E501

        Descriptive keyword for a Company (e.g. SaaS, Android, Cloud Computing, Medical Device)\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :return: The categories of this Event.  # noqa: E501
        :rtype: list[EntityIdentifier]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this Event.

        Descriptive keyword for a Company (e.g. SaaS, Android, Cloud Computing, Medical Device)\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :param categories: The categories of this Event.  # noqa: E501
        :type: list[EntityIdentifier]
        """

        self._categories = categories

    @property
    def category_groups(self):
        """Gets the category_groups of this Event.  # noqa: E501

        Superset of Industries (e.g. Software, Mobile, Health Care)\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :return: The category_groups of this Event.  # noqa: E501
        :rtype: list[EntityIdentifier]
        """
        return self._category_groups

    @category_groups.setter
    def category_groups(self, category_groups):
        """Sets the category_groups of this Event.

        Superset of Industries (e.g. Software, Mobile, Health Care)\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :param category_groups: The category_groups of this Event.  # noqa: E501
        :type: list[EntityIdentifier]
        """

        self._category_groups = category_groups

    @property
    def created_at(self):
        """Gets the created_at of this Event.  # noqa: E501

        Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The created_at of this Event.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Event.

        Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param created_at: The created_at of this Event.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this Event.  # noqa: E501

        Text from Event's description\\ Field Type: text_long\\ Searchable: Yes\\ Search Operators: blank, contains, not_contains   # noqa: E501

        :return: The description of this Event.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Event.

        Text from Event's description\\ Field Type: text_long\\ Searchable: Yes\\ Search Operators: blank, contains, not_contains   # noqa: E501

        :param description: The description of this Event.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def ends_on(self):
        """Gets the ends_on of this Event.  # noqa: E501

        End date of the Event\\ Field Type: date\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The ends_on of this Event.  # noqa: E501
        :rtype: date
        """
        return self._ends_on

    @ends_on.setter
    def ends_on(self, ends_on):
        """Sets the ends_on of this Event.

        End date of the Event\\ Field Type: date\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param ends_on: The ends_on of this Event.  # noqa: E501
        :type: date
        """

        self._ends_on = ends_on

    @property
    def entity_def_id(self):
        """Gets the entity_def_id of this Event.  # noqa: E501

        Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * event - Event   # noqa: E501

        :return: The entity_def_id of this Event.  # noqa: E501
        :rtype: str
        """
        return self._entity_def_id

    @entity_def_id.setter
    def entity_def_id(self, entity_def_id):
        """Sets the entity_def_id of this Event.

        Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * event - Event   # noqa: E501

        :param entity_def_id: The entity_def_id of this Event.  # noqa: E501
        :type: str
        """

        self._entity_def_id = entity_def_id

    @property
    def event_type(self):
        """Gets the event_type of this Event.  # noqa: E501

        Type of Event (e.g. hackathon, meetup, conference)\\ Field Type: enum_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :return: The event_type of this Event.  # noqa: E501
        :rtype: list[str]
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this Event.

        Type of Event (e.g. hackathon, meetup, conference)\\ Field Type: enum_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :param event_type: The event_type of this Event.  # noqa: E501
        :type: list[str]
        """

        self._event_type = event_type

    @property
    def event_url(self):
        """Gets the event_url of this Event.  # noqa: E501

        Link to main Event page\\ Field Type: link\\ Searchable: No   # noqa: E501

        :return: The event_url of this Event.  # noqa: E501
        :rtype: AllOfEventEventUrl
        """
        return self._event_url

    @event_url.setter
    def event_url(self, event_url):
        """Sets the event_url of this Event.

        Link to main Event page\\ Field Type: link\\ Searchable: No   # noqa: E501

        :param event_url: The event_url of this Event.  # noqa: E501
        :type: AllOfEventEventUrl
        """

        self._event_url = event_url

    @property
    def identifier(self):
        """Gets the identifier of this Event.  # noqa: E501

        Name of the Event\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :return: The identifier of this Event.  # noqa: E501
        :rtype: AllOfEventIdentifier
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this Event.

        Name of the Event\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :param identifier: The identifier of this Event.  # noqa: E501
        :type: AllOfEventIdentifier
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")  # noqa: E501

        self._identifier = identifier

    @property
    def image_id(self):
        """Gets the image_id of this Event.  # noqa: E501

        The profile image of the event on Crunchbase\\ Field Type: image_id\\ Searchable: No   # noqa: E501

        :return: The image_id of this Event.  # noqa: E501
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this Event.

        The profile image of the event on Crunchbase\\ Field Type: image_id\\ Searchable: No   # noqa: E501

        :param image_id: The image_id of this Event.  # noqa: E501
        :type: str
        """

        self._image_id = image_id

    @property
    def image_url(self):
        """Gets the image_url of this Event.  # noqa: E501

        The cloudinary url of the profile image\\ Field Type: text_blob\\ Searchable: No   # noqa: E501

        :return: The image_url of this Event.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this Event.

        The cloudinary url of the profile image\\ Field Type: text_blob\\ Searchable: No   # noqa: E501

        :param image_url: The image_url of this Event.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def location_group_identifiers(self):
        """Gets the location_group_identifiers of this Event.  # noqa: E501

        Regions of the Event (e.g. San Francisco Bay Area, Silicon Valley)\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :return: The location_group_identifiers of this Event.  # noqa: E501
        :rtype: list[EntityIdentifier]
        """
        return self._location_group_identifiers

    @location_group_identifiers.setter
    def location_group_identifiers(self, location_group_identifiers):
        """Sets the location_group_identifiers of this Event.

        Regions of the Event (e.g. San Francisco Bay Area, Silicon Valley)\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :param location_group_identifiers: The location_group_identifiers of this Event.  # noqa: E501
        :type: list[EntityIdentifier]
        """

        self._location_group_identifiers = location_group_identifiers

    @property
    def location_identifiers(self):
        """Gets the location_identifiers of this Event.  # noqa: E501

        Location of the Event (e.g. Japan, San Francisco, Europe, Asia)\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :return: The location_identifiers of this Event.  # noqa: E501
        :rtype: list[LocationIdentifier]
        """
        return self._location_identifiers

    @location_identifiers.setter
    def location_identifiers(self, location_identifiers):
        """Sets the location_identifiers of this Event.

        Location of the Event (e.g. Japan, San Francisco, Europe, Asia)\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :param location_identifiers: The location_identifiers of this Event.  # noqa: E501
        :type: list[LocationIdentifier]
        """

        self._location_identifiers = location_identifiers

    @property
    def name(self):
        """Gets the name of this Event.  # noqa: E501

        Event Name\\ Field Type: text_blob\\ Searchable: No   # noqa: E501

        :return: The name of this Event.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Event.

        Event Name\\ Field Type: text_blob\\ Searchable: No   # noqa: E501

        :param name: The name of this Event.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def num_contestants(self):
        """Gets the num_contestants of this Event.  # noqa: E501

        Total number of Contestants at the Event\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The num_contestants of this Event.  # noqa: E501
        :rtype: float
        """
        return self._num_contestants

    @num_contestants.setter
    def num_contestants(self, num_contestants):
        """Sets the num_contestants of this Event.

        Total number of Contestants at the Event\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param num_contestants: The num_contestants of this Event.  # noqa: E501
        :type: float
        """

        self._num_contestants = num_contestants

    @property
    def num_exhibitors(self):
        """Gets the num_exhibitors of this Event.  # noqa: E501

        Total number of Exhibitors at the Event\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The num_exhibitors of this Event.  # noqa: E501
        :rtype: float
        """
        return self._num_exhibitors

    @num_exhibitors.setter
    def num_exhibitors(self, num_exhibitors):
        """Sets the num_exhibitors of this Event.

        Total number of Exhibitors at the Event\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param num_exhibitors: The num_exhibitors of this Event.  # noqa: E501
        :type: float
        """

        self._num_exhibitors = num_exhibitors

    @property
    def num_organizers(self):
        """Gets the num_organizers of this Event.  # noqa: E501

        Total number of Organizers at the Event\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The num_organizers of this Event.  # noqa: E501
        :rtype: float
        """
        return self._num_organizers

    @num_organizers.setter
    def num_organizers(self, num_organizers):
        """Sets the num_organizers of this Event.

        Total number of Organizers at the Event\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param num_organizers: The num_organizers of this Event.  # noqa: E501
        :type: float
        """

        self._num_organizers = num_organizers

    @property
    def num_speakers(self):
        """Gets the num_speakers of this Event.  # noqa: E501

        Total number of Speakers at the Event\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The num_speakers of this Event.  # noqa: E501
        :rtype: float
        """
        return self._num_speakers

    @num_speakers.setter
    def num_speakers(self, num_speakers):
        """Sets the num_speakers of this Event.

        Total number of Speakers at the Event\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param num_speakers: The num_speakers of this Event.  # noqa: E501
        :type: float
        """

        self._num_speakers = num_speakers

    @property
    def num_sponsors(self):
        """Gets the num_sponsors of this Event.  # noqa: E501

        Total number of Sponsors for the Event\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The num_sponsors of this Event.  # noqa: E501
        :rtype: float
        """
        return self._num_sponsors

    @num_sponsors.setter
    def num_sponsors(self, num_sponsors):
        """Sets the num_sponsors of this Event.

        Total number of Sponsors for the Event\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param num_sponsors: The num_sponsors of this Event.  # noqa: E501
        :type: float
        """

        self._num_sponsors = num_sponsors

    @property
    def organizer_identifiers(self):
        """Gets the organizer_identifiers of this Event.  # noqa: E501

        The organizer of the Event\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :return: The organizer_identifiers of this Event.  # noqa: E501
        :rtype: list[EntityIdentifier]
        """
        return self._organizer_identifiers

    @organizer_identifiers.setter
    def organizer_identifiers(self, organizer_identifiers):
        """Sets the organizer_identifiers of this Event.

        The organizer of the Event\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :param organizer_identifiers: The organizer_identifiers of this Event.  # noqa: E501
        :type: list[EntityIdentifier]
        """

        self._organizer_identifiers = organizer_identifiers

    @property
    def permalink(self):
        """Gets the permalink of this Event.  # noqa: E501

        Field Type: permalink\\ Searchable: No   # noqa: E501

        :return: The permalink of this Event.  # noqa: E501
        :rtype: str
        """
        return self._permalink

    @permalink.setter
    def permalink(self, permalink):
        """Sets the permalink of this Event.

        Field Type: permalink\\ Searchable: No   # noqa: E501

        :param permalink: The permalink of this Event.  # noqa: E501
        :type: str
        """

        self._permalink = permalink

    @property
    def permalink_aliases(self):
        """Gets the permalink_aliases of this Event.  # noqa: E501

        These are the alternative aliases to the primary permalink of the Organization\\ Field Type: text_exact_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :return: The permalink_aliases of this Event.  # noqa: E501
        :rtype: list[str]
        """
        return self._permalink_aliases

    @permalink_aliases.setter
    def permalink_aliases(self, permalink_aliases):
        """Sets the permalink_aliases of this Event.

        These are the alternative aliases to the primary permalink of the Organization\\ Field Type: text_exact_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :param permalink_aliases: The permalink_aliases of this Event.  # noqa: E501
        :type: list[str]
        """

        self._permalink_aliases = permalink_aliases

    @property
    def rank_event(self):
        """Gets the rank_event of this Event.  # noqa: E501

        Algorithmic rank assigned to the top 100,000 most active Events\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The rank_event of this Event.  # noqa: E501
        :rtype: float
        """
        return self._rank_event

    @rank_event.setter
    def rank_event(self, rank_event):
        """Sets the rank_event of this Event.

        Algorithmic rank assigned to the top 100,000 most active Events\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param rank_event: The rank_event of this Event.  # noqa: E501
        :type: float
        """

        self._rank_event = rank_event

    @property
    def registration_url(self):
        """Gets the registration_url of this Event.  # noqa: E501

        Link to the Event registration page\\ Field Type: link\\ Searchable: No   # noqa: E501

        :return: The registration_url of this Event.  # noqa: E501
        :rtype: AllOfEventRegistrationUrl
        """
        return self._registration_url

    @registration_url.setter
    def registration_url(self, registration_url):
        """Sets the registration_url of this Event.

        Link to the Event registration page\\ Field Type: link\\ Searchable: No   # noqa: E501

        :param registration_url: The registration_url of this Event.  # noqa: E501
        :type: AllOfEventRegistrationUrl
        """

        self._registration_url = registration_url

    @property
    def short_description(self):
        """Gets the short_description of this Event.  # noqa: E501

        A short description of the Event\\ Field Type: text_long\\ Searchable: Yes\\ Search Operators: blank, contains, not_contains   # noqa: E501

        :return: The short_description of this Event.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this Event.

        A short description of the Event\\ Field Type: text_long\\ Searchable: Yes\\ Search Operators: blank, contains, not_contains   # noqa: E501

        :param short_description: The short_description of this Event.  # noqa: E501
        :type: str
        """

        self._short_description = short_description

    @property
    def starts_on(self):
        """Gets the starts_on of this Event.  # noqa: E501

        Start date of the Event\\ Field Type: date\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The starts_on of this Event.  # noqa: E501
        :rtype: date
        """
        return self._starts_on

    @starts_on.setter
    def starts_on(self, starts_on):
        """Sets the starts_on of this Event.

        Start date of the Event\\ Field Type: date\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param starts_on: The starts_on of this Event.  # noqa: E501
        :type: date
        """

        self._starts_on = starts_on

    @property
    def updated_at(self):
        """Gets the updated_at of this Event.  # noqa: E501

        Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The updated_at of this Event.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Event.

        Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param updated_at: The updated_at of this Event.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def uuid(self):
        """Gets the uuid of this Event.  # noqa: E501

        Field Type: uuid\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes   # noqa: E501

        :return: The uuid of this Event.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Event.

        Field Type: uuid\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes   # noqa: E501

        :param uuid: The uuid of this Event.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def venue_name(self):
        """Gets the venue_name of this Event.  # noqa: E501

        Name of the Event venue\\ Field Type: text_short\\ Searchable: Yes\\ Search Operators: blank, contains, eq, not_contains, not_eq, starts   # noqa: E501

        :return: The venue_name of this Event.  # noqa: E501
        :rtype: str
        """
        return self._venue_name

    @venue_name.setter
    def venue_name(self, venue_name):
        """Sets the venue_name of this Event.

        Name of the Event venue\\ Field Type: text_short\\ Searchable: Yes\\ Search Operators: blank, contains, eq, not_contains, not_eq, starts   # noqa: E501

        :param venue_name: The venue_name of this Event.  # noqa: E501
        :type: str
        """

        self._venue_name = venue_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Event, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Event):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
