# coding: utf-8

"""
    Crunchbase Enterprise API

    Crunchbase Enterprise API, 2021-07-16  # noqa: E501

    OpenAPI spec version: 1.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Acquisition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'acquiree_categories': 'list[EntityIdentifier]',
        'acquiree_funding_total': 'AllOfAcquisitionAcquireeFundingTotal',
        'acquiree_identifier': 'AllOfAcquisitionAcquireeIdentifier',
        'acquiree_last_funding_type': 'str',
        'acquiree_locations': 'list[LocationIdentifier]',
        'acquiree_num_funding_rounds': 'float',
        'acquiree_revenue_range': 'str',
        'acquiree_short_description': 'str',
        'acquirer_categories': 'list[EntityIdentifier]',
        'acquirer_funding_stage': 'str',
        'acquirer_funding_total': 'AllOfAcquisitionAcquirerFundingTotal',
        'acquirer_identifier': 'AllOfAcquisitionAcquirerIdentifier',
        'acquirer_locations': 'list[LocationIdentifier]',
        'acquirer_num_funding_rounds': 'float',
        'acquirer_revenue_range': 'str',
        'acquirer_short_description': 'str',
        'acquisition_type': 'str',
        'announced_on': 'AllOfAcquisitionAnnouncedOn',
        'completed_on': 'AllOfAcquisitionCompletedOn',
        'created_at': 'datetime',
        'disposition_of_acquired': 'str',
        'entity_def_id': 'str',
        'identifier': 'AllOfAcquisitionIdentifier',
        'permalink': 'str',
        'price': 'AllOfAcquisitionPrice',
        'rank_acquisition': 'float',
        'short_description': 'str',
        'status': 'str',
        'terms': 'str',
        'updated_at': 'datetime',
        'uuid': 'str'
    }

    attribute_map = {
        'acquiree_categories': 'acquiree_categories',
        'acquiree_funding_total': 'acquiree_funding_total',
        'acquiree_identifier': 'acquiree_identifier',
        'acquiree_last_funding_type': 'acquiree_last_funding_type',
        'acquiree_locations': 'acquiree_locations',
        'acquiree_num_funding_rounds': 'acquiree_num_funding_rounds',
        'acquiree_revenue_range': 'acquiree_revenue_range',
        'acquiree_short_description': 'acquiree_short_description',
        'acquirer_categories': 'acquirer_categories',
        'acquirer_funding_stage': 'acquirer_funding_stage',
        'acquirer_funding_total': 'acquirer_funding_total',
        'acquirer_identifier': 'acquirer_identifier',
        'acquirer_locations': 'acquirer_locations',
        'acquirer_num_funding_rounds': 'acquirer_num_funding_rounds',
        'acquirer_revenue_range': 'acquirer_revenue_range',
        'acquirer_short_description': 'acquirer_short_description',
        'acquisition_type': 'acquisition_type',
        'announced_on': 'announced_on',
        'completed_on': 'completed_on',
        'created_at': 'created_at',
        'disposition_of_acquired': 'disposition_of_acquired',
        'entity_def_id': 'entity_def_id',
        'identifier': 'identifier',
        'permalink': 'permalink',
        'price': 'price',
        'rank_acquisition': 'rank_acquisition',
        'short_description': 'short_description',
        'status': 'status',
        'terms': 'terms',
        'updated_at': 'updated_at',
        'uuid': 'uuid'
    }

    def __init__(self, acquiree_categories=None, acquiree_funding_total=None, acquiree_identifier=None, acquiree_last_funding_type=None, acquiree_locations=None, acquiree_num_funding_rounds=None, acquiree_revenue_range=None, acquiree_short_description=None, acquirer_categories=None, acquirer_funding_stage=None, acquirer_funding_total=None, acquirer_identifier=None, acquirer_locations=None, acquirer_num_funding_rounds=None, acquirer_revenue_range=None, acquirer_short_description=None, acquisition_type=None, announced_on=None, completed_on=None, created_at=None, disposition_of_acquired=None, entity_def_id=None, identifier=None, permalink=None, price=None, rank_acquisition=None, short_description=None, status=None, terms=None, updated_at=None, uuid=None):  # noqa: E501
        """Acquisition - a model defined in Swagger"""  # noqa: E501
        self._acquiree_categories = None
        self._acquiree_funding_total = None
        self._acquiree_identifier = None
        self._acquiree_last_funding_type = None
        self._acquiree_locations = None
        self._acquiree_num_funding_rounds = None
        self._acquiree_revenue_range = None
        self._acquiree_short_description = None
        self._acquirer_categories = None
        self._acquirer_funding_stage = None
        self._acquirer_funding_total = None
        self._acquirer_identifier = None
        self._acquirer_locations = None
        self._acquirer_num_funding_rounds = None
        self._acquirer_revenue_range = None
        self._acquirer_short_description = None
        self._acquisition_type = None
        self._announced_on = None
        self._completed_on = None
        self._created_at = None
        self._disposition_of_acquired = None
        self._entity_def_id = None
        self._identifier = None
        self._permalink = None
        self._price = None
        self._rank_acquisition = None
        self._short_description = None
        self._status = None
        self._terms = None
        self._updated_at = None
        self._uuid = None
        self.discriminator = None
        if acquiree_categories is not None:
            self.acquiree_categories = acquiree_categories
        if acquiree_funding_total is not None:
            self.acquiree_funding_total = acquiree_funding_total
        if acquiree_identifier is not None:
            self.acquiree_identifier = acquiree_identifier
        if acquiree_last_funding_type is not None:
            self.acquiree_last_funding_type = acquiree_last_funding_type
        if acquiree_locations is not None:
            self.acquiree_locations = acquiree_locations
        if acquiree_num_funding_rounds is not None:
            self.acquiree_num_funding_rounds = acquiree_num_funding_rounds
        if acquiree_revenue_range is not None:
            self.acquiree_revenue_range = acquiree_revenue_range
        if acquiree_short_description is not None:
            self.acquiree_short_description = acquiree_short_description
        if acquirer_categories is not None:
            self.acquirer_categories = acquirer_categories
        if acquirer_funding_stage is not None:
            self.acquirer_funding_stage = acquirer_funding_stage
        if acquirer_funding_total is not None:
            self.acquirer_funding_total = acquirer_funding_total
        if acquirer_identifier is not None:
            self.acquirer_identifier = acquirer_identifier
        if acquirer_locations is not None:
            self.acquirer_locations = acquirer_locations
        if acquirer_num_funding_rounds is not None:
            self.acquirer_num_funding_rounds = acquirer_num_funding_rounds
        if acquirer_revenue_range is not None:
            self.acquirer_revenue_range = acquirer_revenue_range
        if acquirer_short_description is not None:
            self.acquirer_short_description = acquirer_short_description
        if acquisition_type is not None:
            self.acquisition_type = acquisition_type
        if announced_on is not None:
            self.announced_on = announced_on
        if completed_on is not None:
            self.completed_on = completed_on
        if created_at is not None:
            self.created_at = created_at
        if disposition_of_acquired is not None:
            self.disposition_of_acquired = disposition_of_acquired
        if entity_def_id is not None:
            self.entity_def_id = entity_def_id
        self.identifier = identifier
        if permalink is not None:
            self.permalink = permalink
        if price is not None:
            self.price = price
        if rank_acquisition is not None:
            self.rank_acquisition = rank_acquisition
        if short_description is not None:
            self.short_description = short_description
        if status is not None:
            self.status = status
        if terms is not None:
            self.terms = terms
        if updated_at is not None:
            self.updated_at = updated_at
        if uuid is not None:
            self.uuid = uuid

    @property
    def acquiree_categories(self):
        """Gets the acquiree_categories of this Acquisition.  # noqa: E501

        Keyword, sector, or industry\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :return: The acquiree_categories of this Acquisition.  # noqa: E501
        :rtype: list[EntityIdentifier]
        """
        return self._acquiree_categories

    @acquiree_categories.setter
    def acquiree_categories(self, acquiree_categories):
        """Sets the acquiree_categories of this Acquisition.

        Keyword, sector, or industry\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :param acquiree_categories: The acquiree_categories of this Acquisition.  # noqa: E501
        :type: list[EntityIdentifier]
        """

        self._acquiree_categories = acquiree_categories

    @property
    def acquiree_funding_total(self):
        """Gets the acquiree_funding_total of this Acquisition.  # noqa: E501

        Total funding amount raised across all acquired organization's funding rounds\\ Field Type: money\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The acquiree_funding_total of this Acquisition.  # noqa: E501
        :rtype: AllOfAcquisitionAcquireeFundingTotal
        """
        return self._acquiree_funding_total

    @acquiree_funding_total.setter
    def acquiree_funding_total(self, acquiree_funding_total):
        """Sets the acquiree_funding_total of this Acquisition.

        Total funding amount raised across all acquired organization's funding rounds\\ Field Type: money\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param acquiree_funding_total: The acquiree_funding_total of this Acquisition.  # noqa: E501
        :type: AllOfAcquisitionAcquireeFundingTotal
        """

        self._acquiree_funding_total = acquiree_funding_total

    @property
    def acquiree_identifier(self):
        """Gets the acquiree_identifier of this Acquisition.  # noqa: E501

        Name of the acquired organization\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :return: The acquiree_identifier of this Acquisition.  # noqa: E501
        :rtype: AllOfAcquisitionAcquireeIdentifier
        """
        return self._acquiree_identifier

    @acquiree_identifier.setter
    def acquiree_identifier(self, acquiree_identifier):
        """Sets the acquiree_identifier of this Acquisition.

        Name of the acquired organization\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :param acquiree_identifier: The acquiree_identifier of this Acquisition.  # noqa: E501
        :type: AllOfAcquisitionAcquireeIdentifier
        """

        self._acquiree_identifier = acquiree_identifier

    @property
    def acquiree_last_funding_type(self):
        """Gets the acquiree_last_funding_type of this Acquisition.  # noqa: E501

        Last funding round type (e.g. Series A, Seed, Private Equity)\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * angel - Angel  * convertible_note - Convertible Note  * corporate_round - Corporate Round  * debt_financing - Debt Financing  * equity_crowdfunding - Equity Crowdfunding  * grant - Grant  * initial_coin_offering - Initial Coin Offering  * non_equity_assistance - Non-equity Assistance  * post_ipo_debt - Post-IPO Debt  * post_ipo_equity - Post-IPO Equity  * post_ipo_secondary - Post-IPO Secondary  * pre_seed - Pre-Seed  * private_equity - Private Equity  * product_crowdfunding - Product Crowdfunding  * secondary_market - Secondary Market  * seed - Seed  * series_a - Series A  * series_b - Series B  * series_c - Series C  * series_d - Series D  * series_e - Series E  * series_f - Series F  * series_g - Series G  * series_h - Series H  * series_i - Series I  * series_j - Series J  * series_unknown - Venture - Series Unknown  * undisclosed - Undisclosed   # noqa: E501

        :return: The acquiree_last_funding_type of this Acquisition.  # noqa: E501
        :rtype: str
        """
        return self._acquiree_last_funding_type

    @acquiree_last_funding_type.setter
    def acquiree_last_funding_type(self, acquiree_last_funding_type):
        """Sets the acquiree_last_funding_type of this Acquisition.

        Last funding round type (e.g. Series A, Seed, Private Equity)\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * angel - Angel  * convertible_note - Convertible Note  * corporate_round - Corporate Round  * debt_financing - Debt Financing  * equity_crowdfunding - Equity Crowdfunding  * grant - Grant  * initial_coin_offering - Initial Coin Offering  * non_equity_assistance - Non-equity Assistance  * post_ipo_debt - Post-IPO Debt  * post_ipo_equity - Post-IPO Equity  * post_ipo_secondary - Post-IPO Secondary  * pre_seed - Pre-Seed  * private_equity - Private Equity  * product_crowdfunding - Product Crowdfunding  * secondary_market - Secondary Market  * seed - Seed  * series_a - Series A  * series_b - Series B  * series_c - Series C  * series_d - Series D  * series_e - Series E  * series_f - Series F  * series_g - Series G  * series_h - Series H  * series_i - Series I  * series_j - Series J  * series_unknown - Venture - Series Unknown  * undisclosed - Undisclosed   # noqa: E501

        :param acquiree_last_funding_type: The acquiree_last_funding_type of this Acquisition.  # noqa: E501
        :type: str
        """

        self._acquiree_last_funding_type = acquiree_last_funding_type

    @property
    def acquiree_locations(self):
        """Gets the acquiree_locations of this Acquisition.  # noqa: E501

        Where the acquired organization is headquartered\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :return: The acquiree_locations of this Acquisition.  # noqa: E501
        :rtype: list[LocationIdentifier]
        """
        return self._acquiree_locations

    @acquiree_locations.setter
    def acquiree_locations(self, acquiree_locations):
        """Sets the acquiree_locations of this Acquisition.

        Where the acquired organization is headquartered\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :param acquiree_locations: The acquiree_locations of this Acquisition.  # noqa: E501
        :type: list[LocationIdentifier]
        """

        self._acquiree_locations = acquiree_locations

    @property
    def acquiree_num_funding_rounds(self):
        """Gets the acquiree_num_funding_rounds of this Acquisition.  # noqa: E501

        Acquired organization's total number of funding rounds\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The acquiree_num_funding_rounds of this Acquisition.  # noqa: E501
        :rtype: float
        """
        return self._acquiree_num_funding_rounds

    @acquiree_num_funding_rounds.setter
    def acquiree_num_funding_rounds(self, acquiree_num_funding_rounds):
        """Sets the acquiree_num_funding_rounds of this Acquisition.

        Acquired organization's total number of funding rounds\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param acquiree_num_funding_rounds: The acquiree_num_funding_rounds of this Acquisition.  # noqa: E501
        :type: float
        """

        self._acquiree_num_funding_rounds = acquiree_num_funding_rounds

    @property
    def acquiree_revenue_range(self):
        """Gets the acquiree_revenue_range of this Acquisition.  # noqa: E501

        Estimated revenue range for acquired organization\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * r_00000000 - Less than $1M  * r_00001000 - $1M to $10M  * r_00010000 - $10M to $50M  * r_00050000 - $50M to $100M  * r_00100000 - $100M to $500M  * r_00500000 - $500M to $1B  * r_01000000 - $1B to $10B  * r_10000000 - $10B+   # noqa: E501

        :return: The acquiree_revenue_range of this Acquisition.  # noqa: E501
        :rtype: str
        """
        return self._acquiree_revenue_range

    @acquiree_revenue_range.setter
    def acquiree_revenue_range(self, acquiree_revenue_range):
        """Sets the acquiree_revenue_range of this Acquisition.

        Estimated revenue range for acquired organization\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * r_00000000 - Less than $1M  * r_00001000 - $1M to $10M  * r_00010000 - $10M to $50M  * r_00050000 - $50M to $100M  * r_00100000 - $100M to $500M  * r_00500000 - $500M to $1B  * r_01000000 - $1B to $10B  * r_10000000 - $10B+   # noqa: E501

        :param acquiree_revenue_range: The acquiree_revenue_range of this Acquisition.  # noqa: E501
        :type: str
        """

        self._acquiree_revenue_range = acquiree_revenue_range

    @property
    def acquiree_short_description(self):
        """Gets the acquiree_short_description of this Acquisition.  # noqa: E501

        Text of acquired organization's description, industries, and industry groups\\ Field Type: text_long\\ Searchable: Yes\\ Search Operators: blank, contains, not_contains   # noqa: E501

        :return: The acquiree_short_description of this Acquisition.  # noqa: E501
        :rtype: str
        """
        return self._acquiree_short_description

    @acquiree_short_description.setter
    def acquiree_short_description(self, acquiree_short_description):
        """Sets the acquiree_short_description of this Acquisition.

        Text of acquired organization's description, industries, and industry groups\\ Field Type: text_long\\ Searchable: Yes\\ Search Operators: blank, contains, not_contains   # noqa: E501

        :param acquiree_short_description: The acquiree_short_description of this Acquisition.  # noqa: E501
        :type: str
        """

        self._acquiree_short_description = acquiree_short_description

    @property
    def acquirer_categories(self):
        """Gets the acquirer_categories of this Acquisition.  # noqa: E501

        Keyword, sector, or industry\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :return: The acquirer_categories of this Acquisition.  # noqa: E501
        :rtype: list[EntityIdentifier]
        """
        return self._acquirer_categories

    @acquirer_categories.setter
    def acquirer_categories(self, acquirer_categories):
        """Sets the acquirer_categories of this Acquisition.

        Keyword, sector, or industry\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :param acquirer_categories: The acquirer_categories of this Acquisition.  # noqa: E501
        :type: list[EntityIdentifier]
        """

        self._acquirer_categories = acquirer_categories

    @property
    def acquirer_funding_stage(self):
        """Gets the acquirer_funding_stage of this Acquisition.  # noqa: E501

        Acquiring organization's most recent funding status\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * early_stage_venture - Early Stage Venture  * ipo - IPO  * late_stage_venture - Late Stage Venture  * m_and_a - M&A  * private_equity - Private Equity  * seed - Seed   # noqa: E501

        :return: The acquirer_funding_stage of this Acquisition.  # noqa: E501
        :rtype: str
        """
        return self._acquirer_funding_stage

    @acquirer_funding_stage.setter
    def acquirer_funding_stage(self, acquirer_funding_stage):
        """Sets the acquirer_funding_stage of this Acquisition.

        Acquiring organization's most recent funding status\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * early_stage_venture - Early Stage Venture  * ipo - IPO  * late_stage_venture - Late Stage Venture  * m_and_a - M&A  * private_equity - Private Equity  * seed - Seed   # noqa: E501

        :param acquirer_funding_stage: The acquirer_funding_stage of this Acquisition.  # noqa: E501
        :type: str
        """

        self._acquirer_funding_stage = acquirer_funding_stage

    @property
    def acquirer_funding_total(self):
        """Gets the acquirer_funding_total of this Acquisition.  # noqa: E501

        Total funding amount raised across all acquiring organization's funding rounds\\ Field Type: money\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The acquirer_funding_total of this Acquisition.  # noqa: E501
        :rtype: AllOfAcquisitionAcquirerFundingTotal
        """
        return self._acquirer_funding_total

    @acquirer_funding_total.setter
    def acquirer_funding_total(self, acquirer_funding_total):
        """Sets the acquirer_funding_total of this Acquisition.

        Total funding amount raised across all acquiring organization's funding rounds\\ Field Type: money\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param acquirer_funding_total: The acquirer_funding_total of this Acquisition.  # noqa: E501
        :type: AllOfAcquisitionAcquirerFundingTotal
        """

        self._acquirer_funding_total = acquirer_funding_total

    @property
    def acquirer_identifier(self):
        """Gets the acquirer_identifier of this Acquisition.  # noqa: E501

        Name of the acquiring organization\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :return: The acquirer_identifier of this Acquisition.  # noqa: E501
        :rtype: AllOfAcquisitionAcquirerIdentifier
        """
        return self._acquirer_identifier

    @acquirer_identifier.setter
    def acquirer_identifier(self, acquirer_identifier):
        """Sets the acquirer_identifier of this Acquisition.

        Name of the acquiring organization\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :param acquirer_identifier: The acquirer_identifier of this Acquisition.  # noqa: E501
        :type: AllOfAcquisitionAcquirerIdentifier
        """

        self._acquirer_identifier = acquirer_identifier

    @property
    def acquirer_locations(self):
        """Gets the acquirer_locations of this Acquisition.  # noqa: E501

        Where the organization is headquartered\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :return: The acquirer_locations of this Acquisition.  # noqa: E501
        :rtype: list[LocationIdentifier]
        """
        return self._acquirer_locations

    @acquirer_locations.setter
    def acquirer_locations(self, acquirer_locations):
        """Sets the acquirer_locations of this Acquisition.

        Where the organization is headquartered\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :param acquirer_locations: The acquirer_locations of this Acquisition.  # noqa: E501
        :type: list[LocationIdentifier]
        """

        self._acquirer_locations = acquirer_locations

    @property
    def acquirer_num_funding_rounds(self):
        """Gets the acquirer_num_funding_rounds of this Acquisition.  # noqa: E501

        Acquiring organization's total number of funding rounds\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The acquirer_num_funding_rounds of this Acquisition.  # noqa: E501
        :rtype: float
        """
        return self._acquirer_num_funding_rounds

    @acquirer_num_funding_rounds.setter
    def acquirer_num_funding_rounds(self, acquirer_num_funding_rounds):
        """Sets the acquirer_num_funding_rounds of this Acquisition.

        Acquiring organization's total number of funding rounds\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param acquirer_num_funding_rounds: The acquirer_num_funding_rounds of this Acquisition.  # noqa: E501
        :type: float
        """

        self._acquirer_num_funding_rounds = acquirer_num_funding_rounds

    @property
    def acquirer_revenue_range(self):
        """Gets the acquirer_revenue_range of this Acquisition.  # noqa: E501

        Estimated revenue range for acquiring organization\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * r_00000000 - Less than $1M  * r_00001000 - $1M to $10M  * r_00010000 - $10M to $50M  * r_00050000 - $50M to $100M  * r_00100000 - $100M to $500M  * r_00500000 - $500M to $1B  * r_01000000 - $1B to $10B  * r_10000000 - $10B+   # noqa: E501

        :return: The acquirer_revenue_range of this Acquisition.  # noqa: E501
        :rtype: str
        """
        return self._acquirer_revenue_range

    @acquirer_revenue_range.setter
    def acquirer_revenue_range(self, acquirer_revenue_range):
        """Sets the acquirer_revenue_range of this Acquisition.

        Estimated revenue range for acquiring organization\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * r_00000000 - Less than $1M  * r_00001000 - $1M to $10M  * r_00010000 - $10M to $50M  * r_00050000 - $50M to $100M  * r_00100000 - $100M to $500M  * r_00500000 - $500M to $1B  * r_01000000 - $1B to $10B  * r_10000000 - $10B+   # noqa: E501

        :param acquirer_revenue_range: The acquirer_revenue_range of this Acquisition.  # noqa: E501
        :type: str
        """

        self._acquirer_revenue_range = acquirer_revenue_range

    @property
    def acquirer_short_description(self):
        """Gets the acquirer_short_description of this Acquisition.  # noqa: E501

        Text of acquiring organization's description, industries, and industry groups\\ Field Type: text_long\\ Searchable: Yes\\ Search Operators: blank, contains, not_contains   # noqa: E501

        :return: The acquirer_short_description of this Acquisition.  # noqa: E501
        :rtype: str
        """
        return self._acquirer_short_description

    @acquirer_short_description.setter
    def acquirer_short_description(self, acquirer_short_description):
        """Sets the acquirer_short_description of this Acquisition.

        Text of acquiring organization's description, industries, and industry groups\\ Field Type: text_long\\ Searchable: Yes\\ Search Operators: blank, contains, not_contains   # noqa: E501

        :param acquirer_short_description: The acquirer_short_description of this Acquisition.  # noqa: E501
        :type: str
        """

        self._acquirer_short_description = acquirer_short_description

    @property
    def acquisition_type(self):
        """Gets the acquisition_type of this Acquisition.  # noqa: E501

        Type of acquisition\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * acquihire - Acquihire  * acquisition - Acquisition  * lbo - Leveraged Buyout  * management_buyout - Management Buyout  * merge - Merger   # noqa: E501

        :return: The acquisition_type of this Acquisition.  # noqa: E501
        :rtype: str
        """
        return self._acquisition_type

    @acquisition_type.setter
    def acquisition_type(self, acquisition_type):
        """Sets the acquisition_type of this Acquisition.

        Type of acquisition\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * acquihire - Acquihire  * acquisition - Acquisition  * lbo - Leveraged Buyout  * management_buyout - Management Buyout  * merge - Merger   # noqa: E501

        :param acquisition_type: The acquisition_type of this Acquisition.  # noqa: E501
        :type: str
        """

        self._acquisition_type = acquisition_type

    @property
    def announced_on(self):
        """Gets the announced_on of this Acquisition.  # noqa: E501

        Date the acquisition was announced\\ Field Type: date_precision\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The announced_on of this Acquisition.  # noqa: E501
        :rtype: AllOfAcquisitionAnnouncedOn
        """
        return self._announced_on

    @announced_on.setter
    def announced_on(self, announced_on):
        """Sets the announced_on of this Acquisition.

        Date the acquisition was announced\\ Field Type: date_precision\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param announced_on: The announced_on of this Acquisition.  # noqa: E501
        :type: AllOfAcquisitionAnnouncedOn
        """

        self._announced_on = announced_on

    @property
    def completed_on(self):
        """Gets the completed_on of this Acquisition.  # noqa: E501

        Date the Acquisition was completed\\ Field Type: date_precision\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The completed_on of this Acquisition.  # noqa: E501
        :rtype: AllOfAcquisitionCompletedOn
        """
        return self._completed_on

    @completed_on.setter
    def completed_on(self, completed_on):
        """Sets the completed_on of this Acquisition.

        Date the Acquisition was completed\\ Field Type: date_precision\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param completed_on: The completed_on of this Acquisition.  # noqa: E501
        :type: AllOfAcquisitionCompletedOn
        """

        self._completed_on = completed_on

    @property
    def created_at(self):
        """Gets the created_at of this Acquisition.  # noqa: E501

        Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The created_at of this Acquisition.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Acquisition.

        Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param created_at: The created_at of this Acquisition.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def disposition_of_acquired(self):
        """Gets the disposition_of_acquired of this Acquisition.  # noqa: E501

        How is the acquired Organization structured after the acquisition\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * combined - Combined  * division - Division  * product - Product  * separate_entity - Separate Entity  * subsidiary - Subsidiary   # noqa: E501

        :return: The disposition_of_acquired of this Acquisition.  # noqa: E501
        :rtype: str
        """
        return self._disposition_of_acquired

    @disposition_of_acquired.setter
    def disposition_of_acquired(self, disposition_of_acquired):
        """Sets the disposition_of_acquired of this Acquisition.

        How is the acquired Organization structured after the acquisition\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * combined - Combined  * division - Division  * product - Product  * separate_entity - Separate Entity  * subsidiary - Subsidiary   # noqa: E501

        :param disposition_of_acquired: The disposition_of_acquired of this Acquisition.  # noqa: E501
        :type: str
        """

        self._disposition_of_acquired = disposition_of_acquired

    @property
    def entity_def_id(self):
        """Gets the entity_def_id of this Acquisition.  # noqa: E501

        Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * acquisition - Acquisition   # noqa: E501

        :return: The entity_def_id of this Acquisition.  # noqa: E501
        :rtype: str
        """
        return self._entity_def_id

    @entity_def_id.setter
    def entity_def_id(self, entity_def_id):
        """Sets the entity_def_id of this Acquisition.

        Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * acquisition - Acquisition   # noqa: E501

        :param entity_def_id: The entity_def_id of this Acquisition.  # noqa: E501
        :type: str
        """

        self._entity_def_id = entity_def_id

    @property
    def identifier(self):
        """Gets the identifier of this Acquisition.  # noqa: E501

        Auto-generated name of transaction (e.g. WhatsApp acquired by Facebook)\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :return: The identifier of this Acquisition.  # noqa: E501
        :rtype: AllOfAcquisitionIdentifier
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this Acquisition.

        Auto-generated name of transaction (e.g. WhatsApp acquired by Facebook)\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :param identifier: The identifier of this Acquisition.  # noqa: E501
        :type: AllOfAcquisitionIdentifier
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")  # noqa: E501

        self._identifier = identifier

    @property
    def permalink(self):
        """Gets the permalink of this Acquisition.  # noqa: E501

        Field Type: permalink\\ Searchable: No   # noqa: E501

        :return: The permalink of this Acquisition.  # noqa: E501
        :rtype: str
        """
        return self._permalink

    @permalink.setter
    def permalink(self, permalink):
        """Sets the permalink of this Acquisition.

        Field Type: permalink\\ Searchable: No   # noqa: E501

        :param permalink: The permalink of this Acquisition.  # noqa: E501
        :type: str
        """

        self._permalink = permalink

    @property
    def price(self):
        """Gets the price of this Acquisition.  # noqa: E501

        Price of the acquisition\\ Field Type: money\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The price of this Acquisition.  # noqa: E501
        :rtype: AllOfAcquisitionPrice
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Acquisition.

        Price of the acquisition\\ Field Type: money\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param price: The price of this Acquisition.  # noqa: E501
        :type: AllOfAcquisitionPrice
        """

        self._price = price

    @property
    def rank_acquisition(self):
        """Gets the rank_acquisition of this Acquisition.  # noqa: E501

        Algorithmic rank assigned to the top 100,000 most active Acquisitions\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The rank_acquisition of this Acquisition.  # noqa: E501
        :rtype: float
        """
        return self._rank_acquisition

    @rank_acquisition.setter
    def rank_acquisition(self, rank_acquisition):
        """Sets the rank_acquisition of this Acquisition.

        Algorithmic rank assigned to the top 100,000 most active Acquisitions\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param rank_acquisition: The rank_acquisition of this Acquisition.  # noqa: E501
        :type: float
        """

        self._rank_acquisition = rank_acquisition

    @property
    def short_description(self):
        """Gets the short_description of this Acquisition.  # noqa: E501

        Short description of the Acquisition\\ Field Type: text_long\\ Searchable: Yes\\ Search Operators: blank, contains, not_contains   # noqa: E501

        :return: The short_description of this Acquisition.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this Acquisition.

        Short description of the Acquisition\\ Field Type: text_long\\ Searchable: Yes\\ Search Operators: blank, contains, not_contains   # noqa: E501

        :param short_description: The short_description of this Acquisition.  # noqa: E501
        :type: str
        """

        self._short_description = short_description

    @property
    def status(self):
        """Gets the status of this Acquisition.  # noqa: E501

        Status of the acquisition\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * complete - Complete  * pending - Pending   # noqa: E501

        :return: The status of this Acquisition.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Acquisition.

        Status of the acquisition\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * complete - Complete  * pending - Pending   # noqa: E501

        :param status: The status of this Acquisition.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def terms(self):
        """Gets the terms of this Acquisition.  # noqa: E501

        Terms of the acquisition\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * cash - Cash  * cash_and_stock - Cash & Stock  * stock - Stock   # noqa: E501

        :return: The terms of this Acquisition.  # noqa: E501
        :rtype: str
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """Sets the terms of this Acquisition.

        Terms of the acquisition\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * cash - Cash  * cash_and_stock - Cash & Stock  * stock - Stock   # noqa: E501

        :param terms: The terms of this Acquisition.  # noqa: E501
        :type: str
        """

        self._terms = terms

    @property
    def updated_at(self):
        """Gets the updated_at of this Acquisition.  # noqa: E501

        Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The updated_at of this Acquisition.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Acquisition.

        Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param updated_at: The updated_at of this Acquisition.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def uuid(self):
        """Gets the uuid of this Acquisition.  # noqa: E501

        Field Type: uuid\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes   # noqa: E501

        :return: The uuid of this Acquisition.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Acquisition.

        Field Type: uuid\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes   # noqa: E501

        :param uuid: The uuid of this Acquisition.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Acquisition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Acquisition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
