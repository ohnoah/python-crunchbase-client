# coding: utf-8

"""
    Crunchbase Enterprise API

    Crunchbase Enterprise API, 2021-07-16  # noqa: E501

    OpenAPI spec version: 1.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Predicate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'field_id': 'str',
        'operator_id': 'OperatorsEnum',
        'values': 'list[object]'
    }

    attribute_map = {
        'type': 'type',
        'field_id': 'field_id',
        'operator_id': 'operator_id',
        'values': 'values'
    }

    def __init__(self, type=None, field_id=None, operator_id=None, values=None):  # noqa: E501
        """Predicate - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._field_id = None
        self._operator_id = None
        self._values = None
        self.discriminator = None
        self.type = type
        self.field_id = field_id
        self.operator_id = operator_id
        if values is not None:
            self.values = values

    @property
    def type(self):
        """Gets the type of this Predicate.  # noqa: E501

        The type of query  # noqa: E501

        :return: The type of this Predicate.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Predicate.

        The type of query  # noqa: E501

        :param type: The type of this Predicate.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["predicate"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def field_id(self):
        """Gets the field_id of this Predicate.  # noqa: E501

        The field to operate on  # noqa: E501

        :return: The field_id of this Predicate.  # noqa: E501
        :rtype: str
        """
        return self._field_id

    @field_id.setter
    def field_id(self, field_id):
        """Sets the field_id of this Predicate.

        The field to operate on  # noqa: E501

        :param field_id: The field_id of this Predicate.  # noqa: E501
        :type: str
        """
        if field_id is None:
            raise ValueError("Invalid value for `field_id`, must not be `None`")  # noqa: E501

        self._field_id = field_id

    @property
    def operator_id(self):
        """Gets the operator_id of this Predicate.  # noqa: E501


        :return: The operator_id of this Predicate.  # noqa: E501
        :rtype: OperatorsEnum
        """
        return self._operator_id

    @operator_id.setter
    def operator_id(self, operator_id):
        """Sets the operator_id of this Predicate.


        :param operator_id: The operator_id of this Predicate.  # noqa: E501
        :type: OperatorsEnum
        """
        if operator_id is None:
            raise ValueError("Invalid value for `operator_id`, must not be `None`")  # noqa: E501

        self._operator_id = operator_id

    @property
    def values(self):
        """Gets the values of this Predicate.  # noqa: E501

        values array with data type matching field_id type  # noqa: E501

        :return: The values of this Predicate.  # noqa: E501
        :rtype: list[object]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this Predicate.

        values array with data type matching field_id type  # noqa: E501

        :param values: The values of this Predicate.  # noqa: E501
        :type: list[object]
        """

        self._values = values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Predicate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Predicate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
