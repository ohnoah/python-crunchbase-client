# coding: utf-8

"""
    Crunchbase Enterprise API

    Crunchbase Enterprise API, 2021-07-16  # noqa: E501

    OpenAPI spec version: 1.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EntityIdentifier(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'permalink': 'str',
        'value': 'str',
        'image_id': 'str',
        'entity_def_id': 'str'
    }

    attribute_map = {
        'uuid': 'uuid',
        'permalink': 'permalink',
        'value': 'value',
        'image_id': 'image_id',
        'entity_def_id': 'entity_def_id'
    }

    def __init__(self, uuid=None, permalink=None, value=None, image_id=None, entity_def_id=None):  # noqa: E501
        """EntityIdentifier - a model defined in Swagger"""  # noqa: E501
        self._uuid = None
        self._permalink = None
        self._value = None
        self._image_id = None
        self._entity_def_id = None
        self.discriminator = None
        self.uuid = uuid
        if permalink is not None:
            self.permalink = permalink
        if value is not None:
            self.value = value
        if image_id is not None:
            self.image_id = image_id
        self.entity_def_id = entity_def_id

    @property
    def uuid(self):
        """Gets the uuid of this EntityIdentifier.  # noqa: E501

        Globally unique id of this entity  # noqa: E501

        :return: The uuid of this EntityIdentifier.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this EntityIdentifier.

        Globally unique id of this entity  # noqa: E501

        :param uuid: The uuid of this EntityIdentifier.  # noqa: E501
        :type: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def permalink(self):
        """Gets the permalink of this EntityIdentifier.  # noqa: E501

        Optionally provided within Entity Def unique nice id of this entity  # noqa: E501

        :return: The permalink of this EntityIdentifier.  # noqa: E501
        :rtype: str
        """
        return self._permalink

    @permalink.setter
    def permalink(self, permalink):
        """Sets the permalink of this EntityIdentifier.

        Optionally provided within Entity Def unique nice id of this entity  # noqa: E501

        :param permalink: The permalink of this EntityIdentifier.  # noqa: E501
        :type: str
        """

        self._permalink = permalink

    @property
    def value(self):
        """Gets the value of this EntityIdentifier.  # noqa: E501

        Textual representation of this entity (i.e. its \"name\")  # noqa: E501

        :return: The value of this EntityIdentifier.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this EntityIdentifier.

        Textual representation of this entity (i.e. its \"name\")  # noqa: E501

        :param value: The value of this EntityIdentifier.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def image_id(self):
        """Gets the image_id of this EntityIdentifier.  # noqa: E501

        Optionally provided location to obtain an image representing this entity  # noqa: E501

        :return: The image_id of this EntityIdentifier.  # noqa: E501
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this EntityIdentifier.

        Optionally provided location to obtain an image representing this entity  # noqa: E501

        :param image_id: The image_id of this EntityIdentifier.  # noqa: E501
        :type: str
        """

        self._image_id = image_id

    @property
    def entity_def_id(self):
        """Gets the entity_def_id of this EntityIdentifier.  # noqa: E501

        What type of entity this be  # noqa: E501

        :return: The entity_def_id of this EntityIdentifier.  # noqa: E501
        :rtype: str
        """
        return self._entity_def_id

    @entity_def_id.setter
    def entity_def_id(self, entity_def_id):
        """Sets the entity_def_id of this EntityIdentifier.

        What type of entity this be  # noqa: E501

        :param entity_def_id: The entity_def_id of this EntityIdentifier.  # noqa: E501
        :type: str
        """
        if entity_def_id is None:
            raise ValueError("Invalid value for `entity_def_id`, must not be `None`")  # noqa: E501

        self._entity_def_id = entity_def_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EntityIdentifier, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntityIdentifier):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
