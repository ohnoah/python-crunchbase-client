# coding: utf-8

"""
    Crunchbase Enterprise API

    Crunchbase Enterprise API, 2021-07-16  # noqa: E501

    OpenAPI spec version: 1.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AutocompleteEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identifier': 'EntityIdentifier',
        'facet_ids': 'list[str]',
        'short_description': 'str'
    }

    attribute_map = {
        'identifier': 'identifier',
        'facet_ids': 'facet_ids',
        'short_description': 'short_description'
    }

    def __init__(self, identifier=None, facet_ids=None, short_description=None):  # noqa: E501
        """AutocompleteEntity - a model defined in Swagger"""  # noqa: E501
        self._identifier = None
        self._facet_ids = None
        self._short_description = None
        self.discriminator = None
        self.identifier = identifier
        if facet_ids is not None:
            self.facet_ids = facet_ids
        if short_description is not None:
            self.short_description = short_description

    @property
    def identifier(self):
        """Gets the identifier of this AutocompleteEntity.  # noqa: E501


        :return: The identifier of this AutocompleteEntity.  # noqa: E501
        :rtype: EntityIdentifier
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this AutocompleteEntity.


        :param identifier: The identifier of this AutocompleteEntity.  # noqa: E501
        :type: EntityIdentifier
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")  # noqa: E501

        self._identifier = identifier

    @property
    def facet_ids(self):
        """Gets the facet_ids of this AutocompleteEntity.  # noqa: E501


        :return: The facet_ids of this AutocompleteEntity.  # noqa: E501
        :rtype: list[str]
        """
        return self._facet_ids

    @facet_ids.setter
    def facet_ids(self, facet_ids):
        """Sets the facet_ids of this AutocompleteEntity.


        :param facet_ids: The facet_ids of this AutocompleteEntity.  # noqa: E501
        :type: list[str]
        """

        self._facet_ids = facet_ids

    @property
    def short_description(self):
        """Gets the short_description of this AutocompleteEntity.  # noqa: E501


        :return: The short_description of this AutocompleteEntity.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this AutocompleteEntity.


        :param short_description: The short_description of this AutocompleteEntity.  # noqa: E501
        :type: str
        """

        self._short_description = short_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AutocompleteEntity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AutocompleteEntity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
