# coding: utf-8

"""
    Crunchbase Enterprise API

    Crunchbase Enterprise API, 2021-07-16  # noqa: E501

    OpenAPI spec version: 1.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PressReference(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'activity_entities': 'list[EntityIdentifier]',
        'author': 'str',
        'created_at': 'datetime',
        'entity_def_id': 'str',
        'identifier': 'AllOfPressReferenceIdentifier',
        'posted_on': 'date',
        'publisher': 'str',
        'thumbnail_url': 'str',
        'title': 'str',
        'updated_at': 'datetime',
        'url': 'AllOfPressReferenceUrl',
        'uuid': 'str'
    }

    attribute_map = {
        'activity_entities': 'activity_entities',
        'author': 'author',
        'created_at': 'created_at',
        'entity_def_id': 'entity_def_id',
        'identifier': 'identifier',
        'posted_on': 'posted_on',
        'publisher': 'publisher',
        'thumbnail_url': 'thumbnail_url',
        'title': 'title',
        'updated_at': 'updated_at',
        'url': 'url',
        'uuid': 'uuid'
    }

    def __init__(self, activity_entities=None, author=None, created_at=None, entity_def_id=None, identifier=None, posted_on=None, publisher=None, thumbnail_url=None, title=None, updated_at=None, url=None, uuid=None):  # noqa: E501
        """PressReference - a model defined in Swagger"""  # noqa: E501
        self._activity_entities = None
        self._author = None
        self._created_at = None
        self._entity_def_id = None
        self._identifier = None
        self._posted_on = None
        self._publisher = None
        self._thumbnail_url = None
        self._title = None
        self._updated_at = None
        self._url = None
        self._uuid = None
        self.discriminator = None
        if activity_entities is not None:
            self.activity_entities = activity_entities
        if author is not None:
            self.author = author
        if created_at is not None:
            self.created_at = created_at
        if entity_def_id is not None:
            self.entity_def_id = entity_def_id
        self.identifier = identifier
        if posted_on is not None:
            self.posted_on = posted_on
        if publisher is not None:
            self.publisher = publisher
        if thumbnail_url is not None:
            self.thumbnail_url = thumbnail_url
        if title is not None:
            self.title = title
        if updated_at is not None:
            self.updated_at = updated_at
        if url is not None:
            self.url = url
        if uuid is not None:
            self.uuid = uuid

    @property
    def activity_entities(self):
        """Gets the activity_entities of this PressReference.  # noqa: E501

        Entities mentioned in the press reference\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :return: The activity_entities of this PressReference.  # noqa: E501
        :rtype: list[EntityIdentifier]
        """
        return self._activity_entities

    @activity_entities.setter
    def activity_entities(self, activity_entities):
        """Sets the activity_entities of this PressReference.

        Entities mentioned in the press reference\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :param activity_entities: The activity_entities of this PressReference.  # noqa: E501
        :type: list[EntityIdentifier]
        """

        self._activity_entities = activity_entities

    @property
    def author(self):
        """Gets the author of this PressReference.  # noqa: E501

        The author of the press reference\\ Field Type: text_blob\\ Searchable: No   # noqa: E501

        :return: The author of this PressReference.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this PressReference.

        The author of the press reference\\ Field Type: text_blob\\ Searchable: No   # noqa: E501

        :param author: The author of this PressReference.  # noqa: E501
        :type: str
        """

        self._author = author

    @property
    def created_at(self):
        """Gets the created_at of this PressReference.  # noqa: E501

        Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The created_at of this PressReference.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PressReference.

        Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param created_at: The created_at of this PressReference.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def entity_def_id(self):
        """Gets the entity_def_id of this PressReference.  # noqa: E501

        Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * press_reference - Press Reference   # noqa: E501

        :return: The entity_def_id of this PressReference.  # noqa: E501
        :rtype: str
        """
        return self._entity_def_id

    @entity_def_id.setter
    def entity_def_id(self, entity_def_id):
        """Sets the entity_def_id of this PressReference.

        Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * press_reference - Press Reference   # noqa: E501

        :param entity_def_id: The entity_def_id of this PressReference.  # noqa: E501
        :type: str
        """

        self._entity_def_id = entity_def_id

    @property
    def identifier(self):
        """Gets the identifier of this PressReference.  # noqa: E501

        Name of the Article\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :return: The identifier of this PressReference.  # noqa: E501
        :rtype: AllOfPressReferenceIdentifier
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this PressReference.

        Name of the Article\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :param identifier: The identifier of this PressReference.  # noqa: E501
        :type: AllOfPressReferenceIdentifier
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")  # noqa: E501

        self._identifier = identifier

    @property
    def posted_on(self):
        """Gets the posted_on of this PressReference.  # noqa: E501

        Date when the press reference is posted\\ Field Type: date\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The posted_on of this PressReference.  # noqa: E501
        :rtype: date
        """
        return self._posted_on

    @posted_on.setter
    def posted_on(self, posted_on):
        """Sets the posted_on of this PressReference.

        Date when the press reference is posted\\ Field Type: date\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param posted_on: The posted_on of this PressReference.  # noqa: E501
        :type: date
        """

        self._posted_on = posted_on

    @property
    def publisher(self):
        """Gets the publisher of this PressReference.  # noqa: E501

        The publisher of the press reference\\ Field Type: text_blob\\ Searchable: No   # noqa: E501

        :return: The publisher of this PressReference.  # noqa: E501
        :rtype: str
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher):
        """Sets the publisher of this PressReference.

        The publisher of the press reference\\ Field Type: text_blob\\ Searchable: No   # noqa: E501

        :param publisher: The publisher of this PressReference.  # noqa: E501
        :type: str
        """

        self._publisher = publisher

    @property
    def thumbnail_url(self):
        """Gets the thumbnail_url of this PressReference.  # noqa: E501

        Field Type: text_blob\\ Searchable: No   # noqa: E501

        :return: The thumbnail_url of this PressReference.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail_url

    @thumbnail_url.setter
    def thumbnail_url(self, thumbnail_url):
        """Sets the thumbnail_url of this PressReference.

        Field Type: text_blob\\ Searchable: No   # noqa: E501

        :param thumbnail_url: The thumbnail_url of this PressReference.  # noqa: E501
        :type: str
        """

        self._thumbnail_url = thumbnail_url

    @property
    def title(self):
        """Gets the title of this PressReference.  # noqa: E501

        The title of the press reference\\ Field Type: text_long\\ Searchable: Yes\\ Search Operators: blank, contains, not_contains   # noqa: E501

        :return: The title of this PressReference.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PressReference.

        The title of the press reference\\ Field Type: text_long\\ Searchable: Yes\\ Search Operators: blank, contains, not_contains   # noqa: E501

        :param title: The title of this PressReference.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def updated_at(self):
        """Gets the updated_at of this PressReference.  # noqa: E501

        Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The updated_at of this PressReference.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this PressReference.

        Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param updated_at: The updated_at of this PressReference.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this PressReference.  # noqa: E501

        The URL of the press reference\\ Field Type: link\\ Searchable: No   # noqa: E501

        :return: The url of this PressReference.  # noqa: E501
        :rtype: AllOfPressReferenceUrl
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this PressReference.

        The URL of the press reference\\ Field Type: link\\ Searchable: No   # noqa: E501

        :param url: The url of this PressReference.  # noqa: E501
        :type: AllOfPressReferenceUrl
        """

        self._url = url

    @property
    def uuid(self):
        """Gets the uuid of this PressReference.  # noqa: E501

        Field Type: uuid\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes   # noqa: E501

        :return: The uuid of this PressReference.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this PressReference.

        Field Type: uuid\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes   # noqa: E501

        :param uuid: The uuid of this PressReference.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PressReference, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PressReference):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
