# coding: utf-8

"""
    Crunchbase Enterprise API

    Crunchbase Enterprise API, 2021-07-16  # noqa: E501

    OpenAPI spec version: 1.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Investment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'announced_on': 'date',
        'created_at': 'datetime',
        'entity_def_id': 'str',
        'funding_round_identifier': 'AllOfInvestmentFundingRoundIdentifier',
        'funding_round_investment_type': 'str',
        'funding_round_money_raised': 'AllOfInvestmentFundingRoundMoneyRaised',
        'identifier': 'AllOfInvestmentIdentifier',
        'investor_identifier': 'AllOfInvestmentInvestorIdentifier',
        'investor_stage': 'list[str]',
        'investor_type': 'list[str]',
        'is_lead_investor': 'bool',
        'money_invested': 'AllOfInvestmentMoneyInvested',
        'name': 'str',
        'organization_diversity_spotlights': 'list[EntityIdentifier]',
        'organization_identifier': 'AllOfInvestmentOrganizationIdentifier',
        'partner_identifiers': 'list[EntityIdentifier]',
        'permalink': 'str',
        'updated_at': 'datetime',
        'uuid': 'str'
    }

    attribute_map = {
        'announced_on': 'announced_on',
        'created_at': 'created_at',
        'entity_def_id': 'entity_def_id',
        'funding_round_identifier': 'funding_round_identifier',
        'funding_round_investment_type': 'funding_round_investment_type',
        'funding_round_money_raised': 'funding_round_money_raised',
        'identifier': 'identifier',
        'investor_identifier': 'investor_identifier',
        'investor_stage': 'investor_stage',
        'investor_type': 'investor_type',
        'is_lead_investor': 'is_lead_investor',
        'money_invested': 'money_invested',
        'name': 'name',
        'organization_diversity_spotlights': 'organization_diversity_spotlights',
        'organization_identifier': 'organization_identifier',
        'partner_identifiers': 'partner_identifiers',
        'permalink': 'permalink',
        'updated_at': 'updated_at',
        'uuid': 'uuid'
    }

    def __init__(self, announced_on=None, created_at=None, entity_def_id=None, funding_round_identifier=None, funding_round_investment_type=None, funding_round_money_raised=None, identifier=None, investor_identifier=None, investor_stage=None, investor_type=None, is_lead_investor=None, money_invested=None, name=None, organization_diversity_spotlights=None, organization_identifier=None, partner_identifiers=None, permalink=None, updated_at=None, uuid=None):  # noqa: E501
        """Investment - a model defined in Swagger"""  # noqa: E501
        self._announced_on = None
        self._created_at = None
        self._entity_def_id = None
        self._funding_round_identifier = None
        self._funding_round_investment_type = None
        self._funding_round_money_raised = None
        self._identifier = None
        self._investor_identifier = None
        self._investor_stage = None
        self._investor_type = None
        self._is_lead_investor = None
        self._money_invested = None
        self._name = None
        self._organization_diversity_spotlights = None
        self._organization_identifier = None
        self._partner_identifiers = None
        self._permalink = None
        self._updated_at = None
        self._uuid = None
        self.discriminator = None
        if announced_on is not None:
            self.announced_on = announced_on
        if created_at is not None:
            self.created_at = created_at
        if entity_def_id is not None:
            self.entity_def_id = entity_def_id
        if funding_round_identifier is not None:
            self.funding_round_identifier = funding_round_identifier
        if funding_round_investment_type is not None:
            self.funding_round_investment_type = funding_round_investment_type
        if funding_round_money_raised is not None:
            self.funding_round_money_raised = funding_round_money_raised
        self.identifier = identifier
        if investor_identifier is not None:
            self.investor_identifier = investor_identifier
        if investor_stage is not None:
            self.investor_stage = investor_stage
        if investor_type is not None:
            self.investor_type = investor_type
        if is_lead_investor is not None:
            self.is_lead_investor = is_lead_investor
        if money_invested is not None:
            self.money_invested = money_invested
        if name is not None:
            self.name = name
        if organization_diversity_spotlights is not None:
            self.organization_diversity_spotlights = organization_diversity_spotlights
        if organization_identifier is not None:
            self.organization_identifier = organization_identifier
        if partner_identifiers is not None:
            self.partner_identifiers = partner_identifiers
        if permalink is not None:
            self.permalink = permalink
        if updated_at is not None:
            self.updated_at = updated_at
        if uuid is not None:
            self.uuid = uuid

    @property
    def announced_on(self):
        """Gets the announced_on of this Investment.  # noqa: E501

        Date when the Investment is announced\\ Field Type: date\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The announced_on of this Investment.  # noqa: E501
        :rtype: date
        """
        return self._announced_on

    @announced_on.setter
    def announced_on(self, announced_on):
        """Sets the announced_on of this Investment.

        Date when the Investment is announced\\ Field Type: date\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param announced_on: The announced_on of this Investment.  # noqa: E501
        :type: date
        """

        self._announced_on = announced_on

    @property
    def created_at(self):
        """Gets the created_at of this Investment.  # noqa: E501

        Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The created_at of this Investment.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Investment.

        Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param created_at: The created_at of this Investment.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def entity_def_id(self):
        """Gets the entity_def_id of this Investment.  # noqa: E501

        Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * investment - Investment   # noqa: E501

        :return: The entity_def_id of this Investment.  # noqa: E501
        :rtype: str
        """
        return self._entity_def_id

    @entity_def_id.setter
    def entity_def_id(self, entity_def_id):
        """Sets the entity_def_id of this Investment.

        Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * investment - Investment   # noqa: E501

        :param entity_def_id: The entity_def_id of this Investment.  # noqa: E501
        :type: str
        """

        self._entity_def_id = entity_def_id

    @property
    def funding_round_identifier(self):
        """Gets the funding_round_identifier of this Investment.  # noqa: E501

        Name of the funding round where the Investment is made\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :return: The funding_round_identifier of this Investment.  # noqa: E501
        :rtype: AllOfInvestmentFundingRoundIdentifier
        """
        return self._funding_round_identifier

    @funding_round_identifier.setter
    def funding_round_identifier(self, funding_round_identifier):
        """Sets the funding_round_identifier of this Investment.

        Name of the funding round where the Investment is made\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :param funding_round_identifier: The funding_round_identifier of this Investment.  # noqa: E501
        :type: AllOfInvestmentFundingRoundIdentifier
        """

        self._funding_round_identifier = funding_round_identifier

    @property
    def funding_round_investment_type(self):
        """Gets the funding_round_investment_type of this Investment.  # noqa: E501

        Type of Funding Round where the Investment is made (e.g. Seed, Series A, Private Equity, Debt Financing)\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * angel - Angel  * convertible_note - Convertible Note  * corporate_round - Corporate Round  * debt_financing - Debt Financing  * equity_crowdfunding - Equity Crowdfunding  * grant - Grant  * initial_coin_offering - Initial Coin Offering  * non_equity_assistance - Non-equity Assistance  * post_ipo_debt - Post-IPO Debt  * post_ipo_equity - Post-IPO Equity  * post_ipo_secondary - Post-IPO Secondary  * pre_seed - Pre-Seed  * private_equity - Private Equity  * product_crowdfunding - Product Crowdfunding  * secondary_market - Secondary Market  * seed - Seed  * series_a - Series A  * series_b - Series B  * series_c - Series C  * series_d - Series D  * series_e - Series E  * series_f - Series F  * series_g - Series G  * series_h - Series H  * series_i - Series I  * series_j - Series J  * series_unknown - Venture - Series Unknown  * undisclosed - Funding Round   # noqa: E501

        :return: The funding_round_investment_type of this Investment.  # noqa: E501
        :rtype: str
        """
        return self._funding_round_investment_type

    @funding_round_investment_type.setter
    def funding_round_investment_type(self, funding_round_investment_type):
        """Sets the funding_round_investment_type of this Investment.

        Type of Funding Round where the Investment is made (e.g. Seed, Series A, Private Equity, Debt Financing)\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * angel - Angel  * convertible_note - Convertible Note  * corporate_round - Corporate Round  * debt_financing - Debt Financing  * equity_crowdfunding - Equity Crowdfunding  * grant - Grant  * initial_coin_offering - Initial Coin Offering  * non_equity_assistance - Non-equity Assistance  * post_ipo_debt - Post-IPO Debt  * post_ipo_equity - Post-IPO Equity  * post_ipo_secondary - Post-IPO Secondary  * pre_seed - Pre-Seed  * private_equity - Private Equity  * product_crowdfunding - Product Crowdfunding  * secondary_market - Secondary Market  * seed - Seed  * series_a - Series A  * series_b - Series B  * series_c - Series C  * series_d - Series D  * series_e - Series E  * series_f - Series F  * series_g - Series G  * series_h - Series H  * series_i - Series I  * series_j - Series J  * series_unknown - Venture - Series Unknown  * undisclosed - Funding Round   # noqa: E501

        :param funding_round_investment_type: The funding_round_investment_type of this Investment.  # noqa: E501
        :type: str
        """

        self._funding_round_investment_type = funding_round_investment_type

    @property
    def funding_round_money_raised(self):
        """Gets the funding_round_money_raised of this Investment.  # noqa: E501

        Amount of money raised in Funding Round\\ Field Type: money\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The funding_round_money_raised of this Investment.  # noqa: E501
        :rtype: AllOfInvestmentFundingRoundMoneyRaised
        """
        return self._funding_round_money_raised

    @funding_round_money_raised.setter
    def funding_round_money_raised(self, funding_round_money_raised):
        """Sets the funding_round_money_raised of this Investment.

        Amount of money raised in Funding Round\\ Field Type: money\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param funding_round_money_raised: The funding_round_money_raised of this Investment.  # noqa: E501
        :type: AllOfInvestmentFundingRoundMoneyRaised
        """

        self._funding_round_money_raised = funding_round_money_raised

    @property
    def identifier(self):
        """Gets the identifier of this Investment.  # noqa: E501

        Investment description coming soon\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :return: The identifier of this Investment.  # noqa: E501
        :rtype: AllOfInvestmentIdentifier
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this Investment.

        Investment description coming soon\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :param identifier: The identifier of this Investment.  # noqa: E501
        :type: AllOfInvestmentIdentifier
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")  # noqa: E501

        self._identifier = identifier

    @property
    def investor_identifier(self):
        """Gets the investor_identifier of this Investment.  # noqa: E501

        Name of the investor who participated in the Investment\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :return: The investor_identifier of this Investment.  # noqa: E501
        :rtype: AllOfInvestmentInvestorIdentifier
        """
        return self._investor_identifier

    @investor_identifier.setter
    def investor_identifier(self, investor_identifier):
        """Sets the investor_identifier of this Investment.

        Name of the investor who participated in the Investment\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :param investor_identifier: The investor_identifier of this Investment.  # noqa: E501
        :type: AllOfInvestmentInvestorIdentifier
        """

        self._investor_identifier = investor_identifier

    @property
    def investor_stage(self):
        """Gets the investor_stage of this Investment.  # noqa: E501

        This describes the stage of investor this organization or person is (e.g. Angel, Fund of Funds, Venture Capital)\\ Field Type: enum_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :return: The investor_stage of this Investment.  # noqa: E501
        :rtype: list[str]
        """
        return self._investor_stage

    @investor_stage.setter
    def investor_stage(self, investor_stage):
        """Sets the investor_stage of this Investment.

        This describes the stage of investor this organization or person is (e.g. Angel, Fund of Funds, Venture Capital)\\ Field Type: enum_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :param investor_stage: The investor_stage of this Investment.  # noqa: E501
        :type: list[str]
        """

        self._investor_stage = investor_stage

    @property
    def investor_type(self):
        """Gets the investor_type of this Investment.  # noqa: E501

        This describes the type of investor this organization or person is (e.g. Angel, Fund of Funds, Venture Capital)\\ Field Type: enum_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :return: The investor_type of this Investment.  # noqa: E501
        :rtype: list[str]
        """
        return self._investor_type

    @investor_type.setter
    def investor_type(self, investor_type):
        """Sets the investor_type of this Investment.

        This describes the type of investor this organization or person is (e.g. Angel, Fund of Funds, Venture Capital)\\ Field Type: enum_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :param investor_type: The investor_type of this Investment.  # noqa: E501
        :type: list[str]
        """

        self._investor_type = investor_type

    @property
    def is_lead_investor(self):
        """Gets the is_lead_investor of this Investment.  # noqa: E501

        This field indicates whether an investor led/organized the investment\\ Field Type: boolean\\ Searchable: Yes\\ Search Operators: blank, eq   # noqa: E501

        :return: The is_lead_investor of this Investment.  # noqa: E501
        :rtype: bool
        """
        return self._is_lead_investor

    @is_lead_investor.setter
    def is_lead_investor(self, is_lead_investor):
        """Sets the is_lead_investor of this Investment.

        This field indicates whether an investor led/organized the investment\\ Field Type: boolean\\ Searchable: Yes\\ Search Operators: blank, eq   # noqa: E501

        :param is_lead_investor: The is_lead_investor of this Investment.  # noqa: E501
        :type: bool
        """

        self._is_lead_investor = is_lead_investor

    @property
    def money_invested(self):
        """Gets the money_invested of this Investment.  # noqa: E501

        Amount of money an Investor contributed into an investment\\ Field Type: money\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The money_invested of this Investment.  # noqa: E501
        :rtype: AllOfInvestmentMoneyInvested
        """
        return self._money_invested

    @money_invested.setter
    def money_invested(self, money_invested):
        """Sets the money_invested of this Investment.

        Amount of money an Investor contributed into an investment\\ Field Type: money\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param money_invested: The money_invested of this Investment.  # noqa: E501
        :type: AllOfInvestmentMoneyInvested
        """

        self._money_invested = money_invested

    @property
    def name(self):
        """Gets the name of this Investment.  # noqa: E501

        Field Type: text_blob\\ Searchable: No   # noqa: E501

        :return: The name of this Investment.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Investment.

        Field Type: text_blob\\ Searchable: No   # noqa: E501

        :param name: The name of this Investment.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def organization_diversity_spotlights(self):
        """Gets the organization_diversity_spotlights of this Investment.  # noqa: E501

        Types of diversity represented in an organization, specifically of those who are founding members, currently the CEO, or have check-writing abilities in an investment firm. This feature is in beta and may change with future updates.\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :return: The organization_diversity_spotlights of this Investment.  # noqa: E501
        :rtype: list[EntityIdentifier]
        """
        return self._organization_diversity_spotlights

    @organization_diversity_spotlights.setter
    def organization_diversity_spotlights(self, organization_diversity_spotlights):
        """Sets the organization_diversity_spotlights of this Investment.

        Types of diversity represented in an organization, specifically of those who are founding members, currently the CEO, or have check-writing abilities in an investment firm. This feature is in beta and may change with future updates.\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :param organization_diversity_spotlights: The organization_diversity_spotlights of this Investment.  # noqa: E501
        :type: list[EntityIdentifier]
        """

        self._organization_diversity_spotlights = organization_diversity_spotlights

    @property
    def organization_identifier(self):
        """Gets the organization_identifier of this Investment.  # noqa: E501

        Name of the organization that received the investment\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :return: The organization_identifier of this Investment.  # noqa: E501
        :rtype: AllOfInvestmentOrganizationIdentifier
        """
        return self._organization_identifier

    @organization_identifier.setter
    def organization_identifier(self, organization_identifier):
        """Sets the organization_identifier of this Investment.

        Name of the organization that received the investment\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :param organization_identifier: The organization_identifier of this Investment.  # noqa: E501
        :type: AllOfInvestmentOrganizationIdentifier
        """

        self._organization_identifier = organization_identifier

    @property
    def partner_identifiers(self):
        """Gets the partner_identifiers of this Investment.  # noqa: E501

        Name of the individual who led a funding round for his/her firm\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :return: The partner_identifiers of this Investment.  # noqa: E501
        :rtype: list[EntityIdentifier]
        """
        return self._partner_identifiers

    @partner_identifiers.setter
    def partner_identifiers(self, partner_identifiers):
        """Sets the partner_identifiers of this Investment.

        Name of the individual who led a funding round for his/her firm\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :param partner_identifiers: The partner_identifiers of this Investment.  # noqa: E501
        :type: list[EntityIdentifier]
        """

        self._partner_identifiers = partner_identifiers

    @property
    def permalink(self):
        """Gets the permalink of this Investment.  # noqa: E501

        Field Type: permalink\\ Searchable: No   # noqa: E501

        :return: The permalink of this Investment.  # noqa: E501
        :rtype: str
        """
        return self._permalink

    @permalink.setter
    def permalink(self, permalink):
        """Sets the permalink of this Investment.

        Field Type: permalink\\ Searchable: No   # noqa: E501

        :param permalink: The permalink of this Investment.  # noqa: E501
        :type: str
        """

        self._permalink = permalink

    @property
    def updated_at(self):
        """Gets the updated_at of this Investment.  # noqa: E501

        Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The updated_at of this Investment.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Investment.

        Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param updated_at: The updated_at of this Investment.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def uuid(self):
        """Gets the uuid of this Investment.  # noqa: E501

        Field Type: uuid\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes   # noqa: E501

        :return: The uuid of this Investment.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Investment.

        Field Type: uuid\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes   # noqa: E501

        :param uuid: The uuid of this Investment.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Investment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Investment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
