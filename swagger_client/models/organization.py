# coding: utf-8

"""
    Crunchbase Enterprise API

    Crunchbase Enterprise API, 2021-07-16  # noqa: E501

    OpenAPI spec version: 1.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Organization(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'acquirer_identifier': 'AllOfOrganizationAcquirerIdentifier',
        'aliases': 'list[str]',
        'categories': 'list[EntityIdentifier]',
        'category_groups': 'list[EntityIdentifier]',
        'closed_on': 'AllOfOrganizationClosedOn',
        'company_type': 'str',
        'contact_email': 'str',
        'created_at': 'datetime',
        'delisted_on': 'AllOfOrganizationDelistedOn',
        'demo_days': 'bool',
        'description': 'str',
        'diversity_spotlights': 'list[EntityIdentifier]',
        'entity_def_id': 'str',
        'equity_funding_total': 'AllOfOrganizationEquityFundingTotal',
        'exited_on': 'AllOfOrganizationExitedOn',
        'facebook': 'AllOfOrganizationFacebook',
        'facet_ids': 'list[str]',
        'founded_on': 'AllOfOrganizationFoundedOn',
        'founder_identifiers': 'list[EntityIdentifier]',
        'funding_stage': 'str',
        'funding_total': 'AllOfOrganizationFundingTotal',
        'funds_total': 'AllOfOrganizationFundsTotal',
        'hub_tags': 'list[str]',
        'identifier': 'AllOfOrganizationIdentifier',
        'image_id': 'str',
        'image_url': 'str',
        'investor_identifiers': 'list[EntityIdentifier]',
        'investor_stage': 'list[str]',
        'investor_type': 'list[str]',
        'ipo_status': 'str',
        'last_equity_funding_total': 'AllOfOrganizationLastEquityFundingTotal',
        'last_equity_funding_type': 'str',
        'last_funding_at': 'date',
        'last_funding_total': 'AllOfOrganizationLastFundingTotal',
        'last_funding_type': 'str',
        'last_key_employee_change_date': 'date',
        'last_layoff_date': 'date',
        'layout_id': 'str',
        'legal_name': 'str',
        'linkedin': 'AllOfOrganizationLinkedin',
        'listed_stock_symbol': 'str',
        'location_group_identifiers': 'list[EntityIdentifier]',
        'location_identifiers': 'list[LocationIdentifier]',
        'name': 'str',
        'num_acquisitions': 'float',
        'num_alumni': 'float',
        'num_articles': 'float',
        'num_current_advisor_positions': 'float',
        'num_current_positions': 'float',
        'num_diversity_spotlight_investments': 'float',
        'num_employees_enum': 'str',
        'num_enrollments': 'str',
        'num_event_appearances': 'float',
        'num_exits': 'float',
        'num_exits_ipo': 'float',
        'num_founder_alumni': 'float',
        'num_founders': 'float',
        'num_funding_rounds': 'float',
        'num_funds': 'float',
        'num_investments': 'float',
        'num_investors': 'float',
        'num_lead_investments': 'float',
        'num_lead_investors': 'float',
        'num_past_positions': 'float',
        'num_portfolio_organizations': 'float',
        'num_sub_organizations': 'float',
        'operating_status': 'str',
        'override_layout_id': 'str',
        'owner_identifier': 'AllOfOrganizationOwnerIdentifier',
        'permalink': 'str',
        'permalink_aliases': 'list[str]',
        'phone_number': 'str',
        'program_application_deadline': 'date',
        'program_duration': 'float',
        'program_type': 'str',
        'rank_delta_d30': 'float',
        'rank_delta_d7': 'float',
        'rank_delta_d90': 'float',
        'rank_org': 'float',
        'rank_principal': 'float',
        'revenue_range': 'str',
        'school_method': 'str',
        'school_program': 'str',
        'school_type': 'str',
        'short_description': 'str',
        'status': 'str',
        'stock_exchange_symbol': 'str',
        'stock_symbol': 'AllOfOrganizationStockSymbol',
        'twitter': 'AllOfOrganizationTwitter',
        'updated_at': 'datetime',
        'uuid': 'str',
        'valuation': 'AllOfOrganizationValuation',
        'valuation_date': 'date',
        'website': 'AllOfOrganizationWebsite',
        'website_url': 'str',
        'went_public_on': 'date'
    }

    attribute_map = {
        'acquirer_identifier': 'acquirer_identifier',
        'aliases': 'aliases',
        'categories': 'categories',
        'category_groups': 'category_groups',
        'closed_on': 'closed_on',
        'company_type': 'company_type',
        'contact_email': 'contact_email',
        'created_at': 'created_at',
        'delisted_on': 'delisted_on',
        'demo_days': 'demo_days',
        'description': 'description',
        'diversity_spotlights': 'diversity_spotlights',
        'entity_def_id': 'entity_def_id',
        'equity_funding_total': 'equity_funding_total',
        'exited_on': 'exited_on',
        'facebook': 'facebook',
        'facet_ids': 'facet_ids',
        'founded_on': 'founded_on',
        'founder_identifiers': 'founder_identifiers',
        'funding_stage': 'funding_stage',
        'funding_total': 'funding_total',
        'funds_total': 'funds_total',
        'hub_tags': 'hub_tags',
        'identifier': 'identifier',
        'image_id': 'image_id',
        'image_url': 'image_url',
        'investor_identifiers': 'investor_identifiers',
        'investor_stage': 'investor_stage',
        'investor_type': 'investor_type',
        'ipo_status': 'ipo_status',
        'last_equity_funding_total': 'last_equity_funding_total',
        'last_equity_funding_type': 'last_equity_funding_type',
        'last_funding_at': 'last_funding_at',
        'last_funding_total': 'last_funding_total',
        'last_funding_type': 'last_funding_type',
        'last_key_employee_change_date': 'last_key_employee_change_date',
        'last_layoff_date': 'last_layoff_date',
        'layout_id': 'layout_id',
        'legal_name': 'legal_name',
        'linkedin': 'linkedin',
        'listed_stock_symbol': 'listed_stock_symbol',
        'location_group_identifiers': 'location_group_identifiers',
        'location_identifiers': 'location_identifiers',
        'name': 'name',
        'num_acquisitions': 'num_acquisitions',
        'num_alumni': 'num_alumni',
        'num_articles': 'num_articles',
        'num_current_advisor_positions': 'num_current_advisor_positions',
        'num_current_positions': 'num_current_positions',
        'num_diversity_spotlight_investments': 'num_diversity_spotlight_investments',
        'num_employees_enum': 'num_employees_enum',
        'num_enrollments': 'num_enrollments',
        'num_event_appearances': 'num_event_appearances',
        'num_exits': 'num_exits',
        'num_exits_ipo': 'num_exits_ipo',
        'num_founder_alumni': 'num_founder_alumni',
        'num_founders': 'num_founders',
        'num_funding_rounds': 'num_funding_rounds',
        'num_funds': 'num_funds',
        'num_investments': 'num_investments',
        'num_investors': 'num_investors',
        'num_lead_investments': 'num_lead_investments',
        'num_lead_investors': 'num_lead_investors',
        'num_past_positions': 'num_past_positions',
        'num_portfolio_organizations': 'num_portfolio_organizations',
        'num_sub_organizations': 'num_sub_organizations',
        'operating_status': 'operating_status',
        'override_layout_id': 'override_layout_id',
        'owner_identifier': 'owner_identifier',
        'permalink': 'permalink',
        'permalink_aliases': 'permalink_aliases',
        'phone_number': 'phone_number',
        'program_application_deadline': 'program_application_deadline',
        'program_duration': 'program_duration',
        'program_type': 'program_type',
        'rank_delta_d30': 'rank_delta_d30',
        'rank_delta_d7': 'rank_delta_d7',
        'rank_delta_d90': 'rank_delta_d90',
        'rank_org': 'rank_org',
        'rank_principal': 'rank_principal',
        'revenue_range': 'revenue_range',
        'school_method': 'school_method',
        'school_program': 'school_program',
        'school_type': 'school_type',
        'short_description': 'short_description',
        'status': 'status',
        'stock_exchange_symbol': 'stock_exchange_symbol',
        'stock_symbol': 'stock_symbol',
        'twitter': 'twitter',
        'updated_at': 'updated_at',
        'uuid': 'uuid',
        'valuation': 'valuation',
        'valuation_date': 'valuation_date',
        'website': 'website',
        'website_url': 'website_url',
        'went_public_on': 'went_public_on'
    }

    def __init__(self, acquirer_identifier=None, aliases=None, categories=None, category_groups=None, closed_on=None, company_type=None, contact_email=None, created_at=None, delisted_on=None, demo_days=None, description=None, diversity_spotlights=None, entity_def_id=None, equity_funding_total=None, exited_on=None, facebook=None, facet_ids=None, founded_on=None, founder_identifiers=None, funding_stage=None, funding_total=None, funds_total=None, hub_tags=None, identifier=None, image_id=None, image_url=None, investor_identifiers=None, investor_stage=None, investor_type=None, ipo_status=None, last_equity_funding_total=None, last_equity_funding_type=None, last_funding_at=None, last_funding_total=None, last_funding_type=None, last_key_employee_change_date=None, last_layoff_date=None, layout_id=None, legal_name=None, linkedin=None, listed_stock_symbol=None, location_group_identifiers=None, location_identifiers=None, name=None, num_acquisitions=None, num_alumni=None, num_articles=None, num_current_advisor_positions=None, num_current_positions=None, num_diversity_spotlight_investments=None, num_employees_enum=None, num_enrollments=None, num_event_appearances=None, num_exits=None, num_exits_ipo=None, num_founder_alumni=None, num_founders=None, num_funding_rounds=None, num_funds=None, num_investments=None, num_investors=None, num_lead_investments=None, num_lead_investors=None, num_past_positions=None, num_portfolio_organizations=None, num_sub_organizations=None, operating_status=None, override_layout_id=None, owner_identifier=None, permalink=None, permalink_aliases=None, phone_number=None, program_application_deadline=None, program_duration=None, program_type=None, rank_delta_d30=None, rank_delta_d7=None, rank_delta_d90=None, rank_org=None, rank_principal=None, revenue_range=None, school_method=None, school_program=None, school_type=None, short_description=None, status=None, stock_exchange_symbol=None, stock_symbol=None, twitter=None, updated_at=None, uuid=None, valuation=None, valuation_date=None, website=None, website_url=None, went_public_on=None):  # noqa: E501
        """Organization - a model defined in Swagger"""  # noqa: E501
        self._acquirer_identifier = None
        self._aliases = None
        self._categories = None
        self._category_groups = None
        self._closed_on = None
        self._company_type = None
        self._contact_email = None
        self._created_at = None
        self._delisted_on = None
        self._demo_days = None
        self._description = None
        self._diversity_spotlights = None
        self._entity_def_id = None
        self._equity_funding_total = None
        self._exited_on = None
        self._facebook = None
        self._facet_ids = None
        self._founded_on = None
        self._founder_identifiers = None
        self._funding_stage = None
        self._funding_total = None
        self._funds_total = None
        self._hub_tags = None
        self._identifier = None
        self._image_id = None
        self._image_url = None
        self._investor_identifiers = None
        self._investor_stage = None
        self._investor_type = None
        self._ipo_status = None
        self._last_equity_funding_total = None
        self._last_equity_funding_type = None
        self._last_funding_at = None
        self._last_funding_total = None
        self._last_funding_type = None
        self._last_key_employee_change_date = None
        self._last_layoff_date = None
        self._layout_id = None
        self._legal_name = None
        self._linkedin = None
        self._listed_stock_symbol = None
        self._location_group_identifiers = None
        self._location_identifiers = None
        self._name = None
        self._num_acquisitions = None
        self._num_alumni = None
        self._num_articles = None
        self._num_current_advisor_positions = None
        self._num_current_positions = None
        self._num_diversity_spotlight_investments = None
        self._num_employees_enum = None
        self._num_enrollments = None
        self._num_event_appearances = None
        self._num_exits = None
        self._num_exits_ipo = None
        self._num_founder_alumni = None
        self._num_founders = None
        self._num_funding_rounds = None
        self._num_funds = None
        self._num_investments = None
        self._num_investors = None
        self._num_lead_investments = None
        self._num_lead_investors = None
        self._num_past_positions = None
        self._num_portfolio_organizations = None
        self._num_sub_organizations = None
        self._operating_status = None
        self._override_layout_id = None
        self._owner_identifier = None
        self._permalink = None
        self._permalink_aliases = None
        self._phone_number = None
        self._program_application_deadline = None
        self._program_duration = None
        self._program_type = None
        self._rank_delta_d30 = None
        self._rank_delta_d7 = None
        self._rank_delta_d90 = None
        self._rank_org = None
        self._rank_principal = None
        self._revenue_range = None
        self._school_method = None
        self._school_program = None
        self._school_type = None
        self._short_description = None
        self._status = None
        self._stock_exchange_symbol = None
        self._stock_symbol = None
        self._twitter = None
        self._updated_at = None
        self._uuid = None
        self._valuation = None
        self._valuation_date = None
        self._website = None
        self._website_url = None
        self._went_public_on = None
        self.discriminator = None
        if acquirer_identifier is not None:
            self.acquirer_identifier = acquirer_identifier
        if aliases is not None:
            self.aliases = aliases
        if categories is not None:
            self.categories = categories
        if category_groups is not None:
            self.category_groups = category_groups
        if closed_on is not None:
            self.closed_on = closed_on
        if company_type is not None:
            self.company_type = company_type
        if contact_email is not None:
            self.contact_email = contact_email
        if created_at is not None:
            self.created_at = created_at
        if delisted_on is not None:
            self.delisted_on = delisted_on
        if demo_days is not None:
            self.demo_days = demo_days
        if description is not None:
            self.description = description
        if diversity_spotlights is not None:
            self.diversity_spotlights = diversity_spotlights
        if entity_def_id is not None:
            self.entity_def_id = entity_def_id
        if equity_funding_total is not None:
            self.equity_funding_total = equity_funding_total
        if exited_on is not None:
            self.exited_on = exited_on
        if facebook is not None:
            self.facebook = facebook
        if facet_ids is not None:
            self.facet_ids = facet_ids
        if founded_on is not None:
            self.founded_on = founded_on
        if founder_identifiers is not None:
            self.founder_identifiers = founder_identifiers
        if funding_stage is not None:
            self.funding_stage = funding_stage
        if funding_total is not None:
            self.funding_total = funding_total
        if funds_total is not None:
            self.funds_total = funds_total
        if hub_tags is not None:
            self.hub_tags = hub_tags
        self.identifier = identifier
        if image_id is not None:
            self.image_id = image_id
        if image_url is not None:
            self.image_url = image_url
        if investor_identifiers is not None:
            self.investor_identifiers = investor_identifiers
        if investor_stage is not None:
            self.investor_stage = investor_stage
        if investor_type is not None:
            self.investor_type = investor_type
        if ipo_status is not None:
            self.ipo_status = ipo_status
        if last_equity_funding_total is not None:
            self.last_equity_funding_total = last_equity_funding_total
        if last_equity_funding_type is not None:
            self.last_equity_funding_type = last_equity_funding_type
        if last_funding_at is not None:
            self.last_funding_at = last_funding_at
        if last_funding_total is not None:
            self.last_funding_total = last_funding_total
        if last_funding_type is not None:
            self.last_funding_type = last_funding_type
        if last_key_employee_change_date is not None:
            self.last_key_employee_change_date = last_key_employee_change_date
        if last_layoff_date is not None:
            self.last_layoff_date = last_layoff_date
        if layout_id is not None:
            self.layout_id = layout_id
        if legal_name is not None:
            self.legal_name = legal_name
        if linkedin is not None:
            self.linkedin = linkedin
        if listed_stock_symbol is not None:
            self.listed_stock_symbol = listed_stock_symbol
        if location_group_identifiers is not None:
            self.location_group_identifiers = location_group_identifiers
        if location_identifiers is not None:
            self.location_identifiers = location_identifiers
        if name is not None:
            self.name = name
        if num_acquisitions is not None:
            self.num_acquisitions = num_acquisitions
        if num_alumni is not None:
            self.num_alumni = num_alumni
        if num_articles is not None:
            self.num_articles = num_articles
        if num_current_advisor_positions is not None:
            self.num_current_advisor_positions = num_current_advisor_positions
        if num_current_positions is not None:
            self.num_current_positions = num_current_positions
        if num_diversity_spotlight_investments is not None:
            self.num_diversity_spotlight_investments = num_diversity_spotlight_investments
        if num_employees_enum is not None:
            self.num_employees_enum = num_employees_enum
        if num_enrollments is not None:
            self.num_enrollments = num_enrollments
        if num_event_appearances is not None:
            self.num_event_appearances = num_event_appearances
        if num_exits is not None:
            self.num_exits = num_exits
        if num_exits_ipo is not None:
            self.num_exits_ipo = num_exits_ipo
        if num_founder_alumni is not None:
            self.num_founder_alumni = num_founder_alumni
        if num_founders is not None:
            self.num_founders = num_founders
        if num_funding_rounds is not None:
            self.num_funding_rounds = num_funding_rounds
        if num_funds is not None:
            self.num_funds = num_funds
        if num_investments is not None:
            self.num_investments = num_investments
        if num_investors is not None:
            self.num_investors = num_investors
        if num_lead_investments is not None:
            self.num_lead_investments = num_lead_investments
        if num_lead_investors is not None:
            self.num_lead_investors = num_lead_investors
        if num_past_positions is not None:
            self.num_past_positions = num_past_positions
        if num_portfolio_organizations is not None:
            self.num_portfolio_organizations = num_portfolio_organizations
        if num_sub_organizations is not None:
            self.num_sub_organizations = num_sub_organizations
        if operating_status is not None:
            self.operating_status = operating_status
        if override_layout_id is not None:
            self.override_layout_id = override_layout_id
        if owner_identifier is not None:
            self.owner_identifier = owner_identifier
        if permalink is not None:
            self.permalink = permalink
        if permalink_aliases is not None:
            self.permalink_aliases = permalink_aliases
        if phone_number is not None:
            self.phone_number = phone_number
        if program_application_deadline is not None:
            self.program_application_deadline = program_application_deadline
        if program_duration is not None:
            self.program_duration = program_duration
        if program_type is not None:
            self.program_type = program_type
        if rank_delta_d30 is not None:
            self.rank_delta_d30 = rank_delta_d30
        if rank_delta_d7 is not None:
            self.rank_delta_d7 = rank_delta_d7
        if rank_delta_d90 is not None:
            self.rank_delta_d90 = rank_delta_d90
        if rank_org is not None:
            self.rank_org = rank_org
        if rank_principal is not None:
            self.rank_principal = rank_principal
        if revenue_range is not None:
            self.revenue_range = revenue_range
        if school_method is not None:
            self.school_method = school_method
        if school_program is not None:
            self.school_program = school_program
        if school_type is not None:
            self.school_type = school_type
        if short_description is not None:
            self.short_description = short_description
        if status is not None:
            self.status = status
        if stock_exchange_symbol is not None:
            self.stock_exchange_symbol = stock_exchange_symbol
        if stock_symbol is not None:
            self.stock_symbol = stock_symbol
        if twitter is not None:
            self.twitter = twitter
        if updated_at is not None:
            self.updated_at = updated_at
        if uuid is not None:
            self.uuid = uuid
        if valuation is not None:
            self.valuation = valuation
        if valuation_date is not None:
            self.valuation_date = valuation_date
        if website is not None:
            self.website = website
        if website_url is not None:
            self.website_url = website_url
        if went_public_on is not None:
            self.went_public_on = went_public_on

    @property
    def acquirer_identifier(self):
        """Gets the acquirer_identifier of this Organization.  # noqa: E501

        Name of the organization that made the acquisition\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :return: The acquirer_identifier of this Organization.  # noqa: E501
        :rtype: AllOfOrganizationAcquirerIdentifier
        """
        return self._acquirer_identifier

    @acquirer_identifier.setter
    def acquirer_identifier(self, acquirer_identifier):
        """Sets the acquirer_identifier of this Organization.

        Name of the organization that made the acquisition\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :param acquirer_identifier: The acquirer_identifier of this Organization.  # noqa: E501
        :type: AllOfOrganizationAcquirerIdentifier
        """

        self._acquirer_identifier = acquirer_identifier

    @property
    def aliases(self):
        """Gets the aliases of this Organization.  # noqa: E501

        Alternate or previous names for the organization\\ Field Type: text_short_multi\\ Searchable: Yes\\ Search Operators: blank, contains, eq, not_contains, not_eq, starts   # noqa: E501

        :return: The aliases of this Organization.  # noqa: E501
        :rtype: list[str]
        """
        return self._aliases

    @aliases.setter
    def aliases(self, aliases):
        """Sets the aliases of this Organization.

        Alternate or previous names for the organization\\ Field Type: text_short_multi\\ Searchable: Yes\\ Search Operators: blank, contains, eq, not_contains, not_eq, starts   # noqa: E501

        :param aliases: The aliases of this Organization.  # noqa: E501
        :type: list[str]
        """

        self._aliases = aliases

    @property
    def categories(self):
        """Gets the categories of this Organization.  # noqa: E501

        Descriptive keyword for an Organization (e.g. SaaS, Android, Cloud Computing, Medical Device)\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :return: The categories of this Organization.  # noqa: E501
        :rtype: list[EntityIdentifier]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this Organization.

        Descriptive keyword for an Organization (e.g. SaaS, Android, Cloud Computing, Medical Device)\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :param categories: The categories of this Organization.  # noqa: E501
        :type: list[EntityIdentifier]
        """

        self._categories = categories

    @property
    def category_groups(self):
        """Gets the category_groups of this Organization.  # noqa: E501

        Superset of Industries (e.g. Software, Mobile, Health Care)\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :return: The category_groups of this Organization.  # noqa: E501
        :rtype: list[EntityIdentifier]
        """
        return self._category_groups

    @category_groups.setter
    def category_groups(self, category_groups):
        """Sets the category_groups of this Organization.

        Superset of Industries (e.g. Software, Mobile, Health Care)\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :param category_groups: The category_groups of this Organization.  # noqa: E501
        :type: list[EntityIdentifier]
        """

        self._category_groups = category_groups

    @property
    def closed_on(self):
        """Gets the closed_on of this Organization.  # noqa: E501

        The date when the organization is closed\\ Field Type: date_precision\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The closed_on of this Organization.  # noqa: E501
        :rtype: AllOfOrganizationClosedOn
        """
        return self._closed_on

    @closed_on.setter
    def closed_on(self, closed_on):
        """Sets the closed_on of this Organization.

        The date when the organization is closed\\ Field Type: date_precision\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param closed_on: The closed_on of this Organization.  # noqa: E501
        :type: AllOfOrganizationClosedOn
        """

        self._closed_on = closed_on

    @property
    def company_type(self):
        """Gets the company_type of this Organization.  # noqa: E501

        Whether an Organization is for profit or non-profit\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * for_profit - For Profit  * non_profit - Non-profit   # noqa: E501

        :return: The company_type of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._company_type

    @company_type.setter
    def company_type(self, company_type):
        """Sets the company_type of this Organization.

        Whether an Organization is for profit or non-profit\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * for_profit - For Profit  * non_profit - Non-profit   # noqa: E501

        :param company_type: The company_type of this Organization.  # noqa: E501
        :type: str
        """

        self._company_type = company_type

    @property
    def contact_email(self):
        """Gets the contact_email of this Organization.  # noqa: E501

        General contact email for the organization\\ Field Type: text_blob\\ Searchable: No   # noqa: E501

        :return: The contact_email of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email):
        """Sets the contact_email of this Organization.

        General contact email for the organization\\ Field Type: text_blob\\ Searchable: No   # noqa: E501

        :param contact_email: The contact_email of this Organization.  # noqa: E501
        :type: str
        """

        self._contact_email = contact_email

    @property
    def created_at(self):
        """Gets the created_at of this Organization.  # noqa: E501

        Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The created_at of this Organization.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Organization.

        Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param created_at: The created_at of this Organization.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def delisted_on(self):
        """Gets the delisted_on of this Organization.  # noqa: E501

        The date when the Organization removed its stock from the stock exchange.\\ Field Type: date_precision\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The delisted_on of this Organization.  # noqa: E501
        :rtype: AllOfOrganizationDelistedOn
        """
        return self._delisted_on

    @delisted_on.setter
    def delisted_on(self, delisted_on):
        """Sets the delisted_on of this Organization.

        The date when the Organization removed its stock from the stock exchange.\\ Field Type: date_precision\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param delisted_on: The delisted_on of this Organization.  # noqa: E501
        :type: AllOfOrganizationDelistedOn
        """

        self._delisted_on = delisted_on

    @property
    def demo_days(self):
        """Gets the demo_days of this Organization.  # noqa: E501

        Whether an accelerator hosts any demo days\\ Field Type: boolean\\ Searchable: Yes\\ Search Operators: blank, eq   # noqa: E501

        :return: The demo_days of this Organization.  # noqa: E501
        :rtype: bool
        """
        return self._demo_days

    @demo_days.setter
    def demo_days(self, demo_days):
        """Sets the demo_days of this Organization.

        Whether an accelerator hosts any demo days\\ Field Type: boolean\\ Searchable: Yes\\ Search Operators: blank, eq   # noqa: E501

        :param demo_days: The demo_days of this Organization.  # noqa: E501
        :type: bool
        """

        self._demo_days = demo_days

    @property
    def description(self):
        """Gets the description of this Organization.  # noqa: E501

        Organization Description, Industries, Industry Groups\\ Field Type: text_long\\ Searchable: Yes\\ Search Operators: blank, contains, not_contains   # noqa: E501

        :return: The description of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Organization.

        Organization Description, Industries, Industry Groups\\ Field Type: text_long\\ Searchable: Yes\\ Search Operators: blank, contains, not_contains   # noqa: E501

        :param description: The description of this Organization.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def diversity_spotlights(self):
        """Gets the diversity_spotlights of this Organization.  # noqa: E501

        Types of diversity represented in an organization, specifically of those who are founding members, currently the CEO, or have check-writing abilities in an investment firm. This feature is in beta and may change with future updates.\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :return: The diversity_spotlights of this Organization.  # noqa: E501
        :rtype: list[EntityIdentifier]
        """
        return self._diversity_spotlights

    @diversity_spotlights.setter
    def diversity_spotlights(self, diversity_spotlights):
        """Sets the diversity_spotlights of this Organization.

        Types of diversity represented in an organization, specifically of those who are founding members, currently the CEO, or have check-writing abilities in an investment firm. This feature is in beta and may change with future updates.\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :param diversity_spotlights: The diversity_spotlights of this Organization.  # noqa: E501
        :type: list[EntityIdentifier]
        """

        self._diversity_spotlights = diversity_spotlights

    @property
    def entity_def_id(self):
        """Gets the entity_def_id of this Organization.  # noqa: E501

        Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * organization - Organization   # noqa: E501

        :return: The entity_def_id of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._entity_def_id

    @entity_def_id.setter
    def entity_def_id(self, entity_def_id):
        """Sets the entity_def_id of this Organization.

        Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * organization - Organization   # noqa: E501

        :param entity_def_id: The entity_def_id of this Organization.  # noqa: E501
        :type: str
        """

        self._entity_def_id = entity_def_id

    @property
    def equity_funding_total(self):
        """Gets the equity_funding_total of this Organization.  # noqa: E501

        Total funding amount raised across all Funding Rounds excluding debt\\ Field Type: money\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The equity_funding_total of this Organization.  # noqa: E501
        :rtype: AllOfOrganizationEquityFundingTotal
        """
        return self._equity_funding_total

    @equity_funding_total.setter
    def equity_funding_total(self, equity_funding_total):
        """Sets the equity_funding_total of this Organization.

        Total funding amount raised across all Funding Rounds excluding debt\\ Field Type: money\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param equity_funding_total: The equity_funding_total of this Organization.  # noqa: E501
        :type: AllOfOrganizationEquityFundingTotal
        """

        self._equity_funding_total = equity_funding_total

    @property
    def exited_on(self):
        """Gets the exited_on of this Organization.  # noqa: E501

        Date the organization was acquired or went public\\ Field Type: date_precision\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The exited_on of this Organization.  # noqa: E501
        :rtype: AllOfOrganizationExitedOn
        """
        return self._exited_on

    @exited_on.setter
    def exited_on(self, exited_on):
        """Sets the exited_on of this Organization.

        Date the organization was acquired or went public\\ Field Type: date_precision\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param exited_on: The exited_on of this Organization.  # noqa: E501
        :type: AllOfOrganizationExitedOn
        """

        self._exited_on = exited_on

    @property
    def facebook(self):
        """Gets the facebook of this Organization.  # noqa: E501

        Link to Organization's Facebook page\\ Field Type: link\\ Searchable: No   # noqa: E501

        :return: The facebook of this Organization.  # noqa: E501
        :rtype: AllOfOrganizationFacebook
        """
        return self._facebook

    @facebook.setter
    def facebook(self, facebook):
        """Sets the facebook of this Organization.

        Link to Organization's Facebook page\\ Field Type: link\\ Searchable: No   # noqa: E501

        :param facebook: The facebook of this Organization.  # noqa: E501
        :type: AllOfOrganizationFacebook
        """

        self._facebook = facebook

    @property
    def facet_ids(self):
        """Gets the facet_ids of this Organization.  # noqa: E501

        Field Type: enum_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :return: The facet_ids of this Organization.  # noqa: E501
        :rtype: list[str]
        """
        return self._facet_ids

    @facet_ids.setter
    def facet_ids(self, facet_ids):
        """Sets the facet_ids of this Organization.

        Field Type: enum_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :param facet_ids: The facet_ids of this Organization.  # noqa: E501
        :type: list[str]
        """

        self._facet_ids = facet_ids

    @property
    def founded_on(self):
        """Gets the founded_on of this Organization.  # noqa: E501

        Date the Organization was founded\\ Field Type: date_precision\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The founded_on of this Organization.  # noqa: E501
        :rtype: AllOfOrganizationFoundedOn
        """
        return self._founded_on

    @founded_on.setter
    def founded_on(self, founded_on):
        """Sets the founded_on of this Organization.

        Date the Organization was founded\\ Field Type: date_precision\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param founded_on: The founded_on of this Organization.  # noqa: E501
        :type: AllOfOrganizationFoundedOn
        """

        self._founded_on = founded_on

    @property
    def founder_identifiers(self):
        """Gets the founder_identifiers of this Organization.  # noqa: E501

        Founders of the organization\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :return: The founder_identifiers of this Organization.  # noqa: E501
        :rtype: list[EntityIdentifier]
        """
        return self._founder_identifiers

    @founder_identifiers.setter
    def founder_identifiers(self, founder_identifiers):
        """Sets the founder_identifiers of this Organization.

        Founders of the organization\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :param founder_identifiers: The founder_identifiers of this Organization.  # noqa: E501
        :type: list[EntityIdentifier]
        """

        self._founder_identifiers = founder_identifiers

    @property
    def funding_stage(self):
        """Gets the funding_stage of this Organization.  # noqa: E501

        This field describes an organization's most recent funding status (e.g. Early Stage Venture, Late Stage Venture, M&A)\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * early_stage_venture - Early Stage Venture  * ipo - IPO  * late_stage_venture - Late Stage Venture  * m_and_a - M&A  * private_equity - Private Equity  * seed - Seed   # noqa: E501

        :return: The funding_stage of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._funding_stage

    @funding_stage.setter
    def funding_stage(self, funding_stage):
        """Sets the funding_stage of this Organization.

        This field describes an organization's most recent funding status (e.g. Early Stage Venture, Late Stage Venture, M&A)\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * early_stage_venture - Early Stage Venture  * ipo - IPO  * late_stage_venture - Late Stage Venture  * m_and_a - M&A  * private_equity - Private Equity  * seed - Seed   # noqa: E501

        :param funding_stage: The funding_stage of this Organization.  # noqa: E501
        :type: str
        """

        self._funding_stage = funding_stage

    @property
    def funding_total(self):
        """Gets the funding_total of this Organization.  # noqa: E501

        Total amount raised across all funding rounds\\ Field Type: money\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The funding_total of this Organization.  # noqa: E501
        :rtype: AllOfOrganizationFundingTotal
        """
        return self._funding_total

    @funding_total.setter
    def funding_total(self, funding_total):
        """Sets the funding_total of this Organization.

        Total amount raised across all funding rounds\\ Field Type: money\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param funding_total: The funding_total of this Organization.  # noqa: E501
        :type: AllOfOrganizationFundingTotal
        """

        self._funding_total = funding_total

    @property
    def funds_total(self):
        """Gets the funds_total of this Organization.  # noqa: E501

        Total funding amount raised across all Fund Raises\\ Field Type: money\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The funds_total of this Organization.  # noqa: E501
        :rtype: AllOfOrganizationFundsTotal
        """
        return self._funds_total

    @funds_total.setter
    def funds_total(self, funds_total):
        """Sets the funds_total of this Organization.

        Total funding amount raised across all Fund Raises\\ Field Type: money\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param funds_total: The funds_total of this Organization.  # noqa: E501
        :type: AllOfOrganizationFundsTotal
        """

        self._funds_total = funds_total

    @property
    def hub_tags(self):
        """Gets the hub_tags of this Organization.  # noqa: E501

        Tags are labels assigned to organizations, which identify their belonging to a group with that shared label\\ Field Type: enum_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :return: The hub_tags of this Organization.  # noqa: E501
        :rtype: list[str]
        """
        return self._hub_tags

    @hub_tags.setter
    def hub_tags(self, hub_tags):
        """Sets the hub_tags of this Organization.

        Tags are labels assigned to organizations, which identify their belonging to a group with that shared label\\ Field Type: enum_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :param hub_tags: The hub_tags of this Organization.  # noqa: E501
        :type: list[str]
        """

        self._hub_tags = hub_tags

    @property
    def identifier(self):
        """Gets the identifier of this Organization.  # noqa: E501

        Name of the Organization\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :return: The identifier of this Organization.  # noqa: E501
        :rtype: AllOfOrganizationIdentifier
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this Organization.

        Name of the Organization\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :param identifier: The identifier of this Organization.  # noqa: E501
        :type: AllOfOrganizationIdentifier
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")  # noqa: E501

        self._identifier = identifier

    @property
    def image_id(self):
        """Gets the image_id of this Organization.  # noqa: E501

        The profile image of the organization on Crunchbase\\ Field Type: image_id\\ Searchable: No   # noqa: E501

        :return: The image_id of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this Organization.

        The profile image of the organization on Crunchbase\\ Field Type: image_id\\ Searchable: No   # noqa: E501

        :param image_id: The image_id of this Organization.  # noqa: E501
        :type: str
        """

        self._image_id = image_id

    @property
    def image_url(self):
        """Gets the image_url of this Organization.  # noqa: E501

        The cloudinary url of the profile image\\ Field Type: text_blob\\ Searchable: No   # noqa: E501

        :return: The image_url of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this Organization.

        The cloudinary url of the profile image\\ Field Type: text_blob\\ Searchable: No   # noqa: E501

        :param image_url: The image_url of this Organization.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def investor_identifiers(self):
        """Gets the investor_identifiers of this Organization.  # noqa: E501

        The top 5 investors with investments in this company, ordered by Crunchbase Rank\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :return: The investor_identifiers of this Organization.  # noqa: E501
        :rtype: list[EntityIdentifier]
        """
        return self._investor_identifiers

    @investor_identifiers.setter
    def investor_identifiers(self, investor_identifiers):
        """Sets the investor_identifiers of this Organization.

        The top 5 investors with investments in this company, ordered by Crunchbase Rank\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :param investor_identifiers: The investor_identifiers of this Organization.  # noqa: E501
        :type: list[EntityIdentifier]
        """

        self._investor_identifiers = investor_identifiers

    @property
    def investor_stage(self):
        """Gets the investor_stage of this Organization.  # noqa: E501

        This describes the stage of investments made by this organization (e.g. Angel, Fund of Funds, Venture Capital)\\ Field Type: enum_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :return: The investor_stage of this Organization.  # noqa: E501
        :rtype: list[str]
        """
        return self._investor_stage

    @investor_stage.setter
    def investor_stage(self, investor_stage):
        """Sets the investor_stage of this Organization.

        This describes the stage of investments made by this organization (e.g. Angel, Fund of Funds, Venture Capital)\\ Field Type: enum_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :param investor_stage: The investor_stage of this Organization.  # noqa: E501
        :type: list[str]
        """

        self._investor_stage = investor_stage

    @property
    def investor_type(self):
        """Gets the investor_type of this Organization.  # noqa: E501

        This describes the type of investor this organization is (e.g. Angel, Fund of Funds, Venture Capital)\\ Field Type: enum_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :return: The investor_type of this Organization.  # noqa: E501
        :rtype: list[str]
        """
        return self._investor_type

    @investor_type.setter
    def investor_type(self, investor_type):
        """Sets the investor_type of this Organization.

        This describes the type of investor this organization is (e.g. Angel, Fund of Funds, Venture Capital)\\ Field Type: enum_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :param investor_type: The investor_type of this Organization.  # noqa: E501
        :type: list[str]
        """

        self._investor_type = investor_type

    @property
    def ipo_status(self):
        """Gets the ipo_status of this Organization.  # noqa: E501

        The current public status of the Organization\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * delisted - Delisted  * private - Private  * public - Public   # noqa: E501

        :return: The ipo_status of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._ipo_status

    @ipo_status.setter
    def ipo_status(self, ipo_status):
        """Sets the ipo_status of this Organization.

        The current public status of the Organization\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * delisted - Delisted  * private - Private  * public - Public   # noqa: E501

        :param ipo_status: The ipo_status of this Organization.  # noqa: E501
        :type: str
        """

        self._ipo_status = ipo_status

    @property
    def last_equity_funding_total(self):
        """Gets the last_equity_funding_total of this Organization.  # noqa: E501

        Amount of most recent Funding Round excluding debt\\ Field Type: money\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The last_equity_funding_total of this Organization.  # noqa: E501
        :rtype: AllOfOrganizationLastEquityFundingTotal
        """
        return self._last_equity_funding_total

    @last_equity_funding_total.setter
    def last_equity_funding_total(self, last_equity_funding_total):
        """Sets the last_equity_funding_total of this Organization.

        Amount of most recent Funding Round excluding debt\\ Field Type: money\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param last_equity_funding_total: The last_equity_funding_total of this Organization.  # noqa: E501
        :type: AllOfOrganizationLastEquityFundingTotal
        """

        self._last_equity_funding_total = last_equity_funding_total

    @property
    def last_equity_funding_type(self):
        """Gets the last_equity_funding_type of this Organization.  # noqa: E501

        The most recent Funding Round excluding debt\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * angel - Angel  * convertible_note - Convertible Note  * corporate_round - Corporate Round  * debt_financing - Debt Financing  * equity_crowdfunding - Equity Crowdfunding  * grant - Grant  * initial_coin_offering - Initial Coin Offering  * non_equity_assistance - Non-equity Assistance  * post_ipo_debt - Post-IPO Debt  * post_ipo_equity - Post-IPO Equity  * post_ipo_secondary - Post-IPO Secondary  * pre_seed - Pre-Seed  * private_equity - Private Equity  * product_crowdfunding - Product Crowdfunding  * secondary_market - Secondary Market  * seed - Seed  * series_a - Series A  * series_b - Series B  * series_c - Series C  * series_d - Series D  * series_e - Series E  * series_f - Series F  * series_g - Series G  * series_h - Series H  * series_i - Series I  * series_j - Series J  * series_unknown - Venture - Series Unknown  * undisclosed - Undisclosed   # noqa: E501

        :return: The last_equity_funding_type of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._last_equity_funding_type

    @last_equity_funding_type.setter
    def last_equity_funding_type(self, last_equity_funding_type):
        """Sets the last_equity_funding_type of this Organization.

        The most recent Funding Round excluding debt\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * angel - Angel  * convertible_note - Convertible Note  * corporate_round - Corporate Round  * debt_financing - Debt Financing  * equity_crowdfunding - Equity Crowdfunding  * grant - Grant  * initial_coin_offering - Initial Coin Offering  * non_equity_assistance - Non-equity Assistance  * post_ipo_debt - Post-IPO Debt  * post_ipo_equity - Post-IPO Equity  * post_ipo_secondary - Post-IPO Secondary  * pre_seed - Pre-Seed  * private_equity - Private Equity  * product_crowdfunding - Product Crowdfunding  * secondary_market - Secondary Market  * seed - Seed  * series_a - Series A  * series_b - Series B  * series_c - Series C  * series_d - Series D  * series_e - Series E  * series_f - Series F  * series_g - Series G  * series_h - Series H  * series_i - Series I  * series_j - Series J  * series_unknown - Venture - Series Unknown  * undisclosed - Undisclosed   # noqa: E501

        :param last_equity_funding_type: The last_equity_funding_type of this Organization.  # noqa: E501
        :type: str
        """

        self._last_equity_funding_type = last_equity_funding_type

    @property
    def last_funding_at(self):
        """Gets the last_funding_at of this Organization.  # noqa: E501

        Date of most recent Funding Round\\ Field Type: date\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The last_funding_at of this Organization.  # noqa: E501
        :rtype: date
        """
        return self._last_funding_at

    @last_funding_at.setter
    def last_funding_at(self, last_funding_at):
        """Sets the last_funding_at of this Organization.

        Date of most recent Funding Round\\ Field Type: date\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param last_funding_at: The last_funding_at of this Organization.  # noqa: E501
        :type: date
        """

        self._last_funding_at = last_funding_at

    @property
    def last_funding_total(self):
        """Gets the last_funding_total of this Organization.  # noqa: E501

        Amount of most recent Funding Round\\ Field Type: money\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The last_funding_total of this Organization.  # noqa: E501
        :rtype: AllOfOrganizationLastFundingTotal
        """
        return self._last_funding_total

    @last_funding_total.setter
    def last_funding_total(self, last_funding_total):
        """Sets the last_funding_total of this Organization.

        Amount of most recent Funding Round\\ Field Type: money\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param last_funding_total: The last_funding_total of this Organization.  # noqa: E501
        :type: AllOfOrganizationLastFundingTotal
        """

        self._last_funding_total = last_funding_total

    @property
    def last_funding_type(self):
        """Gets the last_funding_type of this Organization.  # noqa: E501

        Last funding round type (e.g. Seed, Series A, Private Equity)\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * angel - Angel  * convertible_note - Convertible Note  * corporate_round - Corporate Round  * debt_financing - Debt Financing  * equity_crowdfunding - Equity Crowdfunding  * grant - Grant  * initial_coin_offering - Initial Coin Offering  * non_equity_assistance - Non-equity Assistance  * post_ipo_debt - Post-IPO Debt  * post_ipo_equity - Post-IPO Equity  * post_ipo_secondary - Post-IPO Secondary  * pre_seed - Pre-Seed  * private_equity - Private Equity  * product_crowdfunding - Product Crowdfunding  * secondary_market - Secondary Market  * seed - Seed  * series_a - Series A  * series_b - Series B  * series_c - Series C  * series_d - Series D  * series_e - Series E  * series_f - Series F  * series_g - Series G  * series_h - Series H  * series_i - Series I  * series_j - Series J  * series_unknown - Venture - Series Unknown  * undisclosed - Undisclosed   # noqa: E501

        :return: The last_funding_type of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._last_funding_type

    @last_funding_type.setter
    def last_funding_type(self, last_funding_type):
        """Sets the last_funding_type of this Organization.

        Last funding round type (e.g. Seed, Series A, Private Equity)\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * angel - Angel  * convertible_note - Convertible Note  * corporate_round - Corporate Round  * debt_financing - Debt Financing  * equity_crowdfunding - Equity Crowdfunding  * grant - Grant  * initial_coin_offering - Initial Coin Offering  * non_equity_assistance - Non-equity Assistance  * post_ipo_debt - Post-IPO Debt  * post_ipo_equity - Post-IPO Equity  * post_ipo_secondary - Post-IPO Secondary  * pre_seed - Pre-Seed  * private_equity - Private Equity  * product_crowdfunding - Product Crowdfunding  * secondary_market - Secondary Market  * seed - Seed  * series_a - Series A  * series_b - Series B  * series_c - Series C  * series_d - Series D  * series_e - Series E  * series_f - Series F  * series_g - Series G  * series_h - Series H  * series_i - Series I  * series_j - Series J  * series_unknown - Venture - Series Unknown  * undisclosed - Undisclosed   # noqa: E501

        :param last_funding_type: The last_funding_type of this Organization.  # noqa: E501
        :type: str
        """

        self._last_funding_type = last_funding_type

    @property
    def last_key_employee_change_date(self):
        """Gets the last_key_employee_change_date of this Organization.  # noqa: E501

        See companies that have hired executives (VP and above) in a certain date range\\ Field Type: date\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The last_key_employee_change_date of this Organization.  # noqa: E501
        :rtype: date
        """
        return self._last_key_employee_change_date

    @last_key_employee_change_date.setter
    def last_key_employee_change_date(self, last_key_employee_change_date):
        """Sets the last_key_employee_change_date of this Organization.

        See companies that have hired executives (VP and above) in a certain date range\\ Field Type: date\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param last_key_employee_change_date: The last_key_employee_change_date of this Organization.  # noqa: E501
        :type: date
        """

        self._last_key_employee_change_date = last_key_employee_change_date

    @property
    def last_layoff_date(self):
        """Gets the last_layoff_date of this Organization.  # noqa: E501

        Date of last layoff event\\ Field Type: date\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The last_layoff_date of this Organization.  # noqa: E501
        :rtype: date
        """
        return self._last_layoff_date

    @last_layoff_date.setter
    def last_layoff_date(self, last_layoff_date):
        """Sets the last_layoff_date of this Organization.

        Date of last layoff event\\ Field Type: date\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param last_layoff_date: The last_layoff_date of this Organization.  # noqa: E501
        :type: date
        """

        self._last_layoff_date = last_layoff_date

    @property
    def layout_id(self):
        """Gets the layout_id of this Organization.  # noqa: E501

        This is the auto-generated layout for the profile\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * investor - Investor Layout  * school - School Layout   # noqa: E501

        :return: The layout_id of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._layout_id

    @layout_id.setter
    def layout_id(self, layout_id):
        """Sets the layout_id of this Organization.

        This is the auto-generated layout for the profile\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * investor - Investor Layout  * school - School Layout   # noqa: E501

        :param layout_id: The layout_id of this Organization.  # noqa: E501
        :type: str
        """

        self._layout_id = layout_id

    @property
    def legal_name(self):
        """Gets the legal_name of this Organization.  # noqa: E501

        The legal name of the organization\\ Field Type: text_blob\\ Searchable: No   # noqa: E501

        :return: The legal_name of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._legal_name

    @legal_name.setter
    def legal_name(self, legal_name):
        """Sets the legal_name of this Organization.

        The legal name of the organization\\ Field Type: text_blob\\ Searchable: No   # noqa: E501

        :param legal_name: The legal_name of this Organization.  # noqa: E501
        :type: str
        """

        self._legal_name = legal_name

    @property
    def linkedin(self):
        """Gets the linkedin of this Organization.  # noqa: E501

        Link to Organization's LinkedIn page\\ Field Type: link\\ Searchable: No   # noqa: E501

        :return: The linkedin of this Organization.  # noqa: E501
        :rtype: AllOfOrganizationLinkedin
        """
        return self._linkedin

    @linkedin.setter
    def linkedin(self, linkedin):
        """Sets the linkedin of this Organization.

        Link to Organization's LinkedIn page\\ Field Type: link\\ Searchable: No   # noqa: E501

        :param linkedin: The linkedin of this Organization.  # noqa: E501
        :type: AllOfOrganizationLinkedin
        """

        self._linkedin = linkedin

    @property
    def listed_stock_symbol(self):
        """Gets the listed_stock_symbol of this Organization.  # noqa: E501

        Stock ticker symbol (e.g. AAPL, FB, TWTR)\\ Field Type: text_blob\\ Searchable: No   # noqa: E501

        :return: The listed_stock_symbol of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._listed_stock_symbol

    @listed_stock_symbol.setter
    def listed_stock_symbol(self, listed_stock_symbol):
        """Sets the listed_stock_symbol of this Organization.

        Stock ticker symbol (e.g. AAPL, FB, TWTR)\\ Field Type: text_blob\\ Searchable: No   # noqa: E501

        :param listed_stock_symbol: The listed_stock_symbol of this Organization.  # noqa: E501
        :type: str
        """

        self._listed_stock_symbol = listed_stock_symbol

    @property
    def location_group_identifiers(self):
        """Gets the location_group_identifiers of this Organization.  # noqa: E501

        Where the organization is headquartered (e.g. San Francisco Bay Area, Silicon Valley)\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :return: The location_group_identifiers of this Organization.  # noqa: E501
        :rtype: list[EntityIdentifier]
        """
        return self._location_group_identifiers

    @location_group_identifiers.setter
    def location_group_identifiers(self, location_group_identifiers):
        """Sets the location_group_identifiers of this Organization.

        Where the organization is headquartered (e.g. San Francisco Bay Area, Silicon Valley)\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :param location_group_identifiers: The location_group_identifiers of this Organization.  # noqa: E501
        :type: list[EntityIdentifier]
        """

        self._location_group_identifiers = location_group_identifiers

    @property
    def location_identifiers(self):
        """Gets the location_identifiers of this Organization.  # noqa: E501

        Where the organization is headquartered\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :return: The location_identifiers of this Organization.  # noqa: E501
        :rtype: list[LocationIdentifier]
        """
        return self._location_identifiers

    @location_identifiers.setter
    def location_identifiers(self, location_identifiers):
        """Sets the location_identifiers of this Organization.

        Where the organization is headquartered\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :param location_identifiers: The location_identifiers of this Organization.  # noqa: E501
        :type: list[LocationIdentifier]
        """

        self._location_identifiers = location_identifiers

    @property
    def name(self):
        """Gets the name of this Organization.  # noqa: E501

        Field Type: text_blob\\ Searchable: No   # noqa: E501

        :return: The name of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Organization.

        Field Type: text_blob\\ Searchable: No   # noqa: E501

        :param name: The name of this Organization.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def num_acquisitions(self):
        """Gets the num_acquisitions of this Organization.  # noqa: E501

        Total number of Acquisitions\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The num_acquisitions of this Organization.  # noqa: E501
        :rtype: float
        """
        return self._num_acquisitions

    @num_acquisitions.setter
    def num_acquisitions(self, num_acquisitions):
        """Sets the num_acquisitions of this Organization.

        Total number of Acquisitions\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param num_acquisitions: The num_acquisitions of this Organization.  # noqa: E501
        :type: float
        """

        self._num_acquisitions = num_acquisitions

    @property
    def num_alumni(self):
        """Gets the num_alumni of this Organization.  # noqa: E501

        Total number of alumni\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The num_alumni of this Organization.  # noqa: E501
        :rtype: float
        """
        return self._num_alumni

    @num_alumni.setter
    def num_alumni(self, num_alumni):
        """Sets the num_alumni of this Organization.

        Total number of alumni\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param num_alumni: The num_alumni of this Organization.  # noqa: E501
        :type: float
        """

        self._num_alumni = num_alumni

    @property
    def num_articles(self):
        """Gets the num_articles of this Organization.  # noqa: E501

        Number of news articles that reference the Organization\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The num_articles of this Organization.  # noqa: E501
        :rtype: float
        """
        return self._num_articles

    @num_articles.setter
    def num_articles(self, num_articles):
        """Sets the num_articles of this Organization.

        Number of news articles that reference the Organization\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param num_articles: The num_articles of this Organization.  # noqa: E501
        :type: float
        """

        self._num_articles = num_articles

    @property
    def num_current_advisor_positions(self):
        """Gets the num_current_advisor_positions of this Organization.  # noqa: E501

        Total number of board member and advisor profiles an organization has on Crunchbase\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The num_current_advisor_positions of this Organization.  # noqa: E501
        :rtype: float
        """
        return self._num_current_advisor_positions

    @num_current_advisor_positions.setter
    def num_current_advisor_positions(self, num_current_advisor_positions):
        """Sets the num_current_advisor_positions of this Organization.

        Total number of board member and advisor profiles an organization has on Crunchbase\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param num_current_advisor_positions: The num_current_advisor_positions of this Organization.  # noqa: E501
        :type: float
        """

        self._num_current_advisor_positions = num_current_advisor_positions

    @property
    def num_current_positions(self):
        """Gets the num_current_positions of this Organization.  # noqa: E501

        Total number of employee profiles an organization has on Crunchbase\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The num_current_positions of this Organization.  # noqa: E501
        :rtype: float
        """
        return self._num_current_positions

    @num_current_positions.setter
    def num_current_positions(self, num_current_positions):
        """Sets the num_current_positions of this Organization.

        Total number of employee profiles an organization has on Crunchbase\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param num_current_positions: The num_current_positions of this Organization.  # noqa: E501
        :type: float
        """

        self._num_current_positions = num_current_positions

    @property
    def num_diversity_spotlight_investments(self):
        """Gets the num_diversity_spotlight_investments of this Organization.  # noqa: E501

        Total number of diversity investments made by an investor\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The num_diversity_spotlight_investments of this Organization.  # noqa: E501
        :rtype: float
        """
        return self._num_diversity_spotlight_investments

    @num_diversity_spotlight_investments.setter
    def num_diversity_spotlight_investments(self, num_diversity_spotlight_investments):
        """Sets the num_diversity_spotlight_investments of this Organization.

        Total number of diversity investments made by an investor\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param num_diversity_spotlight_investments: The num_diversity_spotlight_investments of this Organization.  # noqa: E501
        :type: float
        """

        self._num_diversity_spotlight_investments = num_diversity_spotlight_investments

    @property
    def num_employees_enum(self):
        """Gets the num_employees_enum of this Organization.  # noqa: E501

        Total number of employees\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * c_00001_00010 - 1-10  * c_00011_00050 - 11-50  * c_00051_00100 - 51-100  * c_00101_00250 - 101-250  * c_00251_00500 - 251-500  * c_00501_01000 - 501-1000  * c_01001_05000 - 1001-5000  * c_05001_10000 - 5001-10000  * c_10001_max - 10001+   # noqa: E501

        :return: The num_employees_enum of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._num_employees_enum

    @num_employees_enum.setter
    def num_employees_enum(self, num_employees_enum):
        """Sets the num_employees_enum of this Organization.

        Total number of employees\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * c_00001_00010 - 1-10  * c_00011_00050 - 11-50  * c_00051_00100 - 51-100  * c_00101_00250 - 101-250  * c_00251_00500 - 251-500  * c_00501_01000 - 501-1000  * c_01001_05000 - 1001-5000  * c_05001_10000 - 5001-10000  * c_10001_max - 10001+   # noqa: E501

        :param num_employees_enum: The num_employees_enum of this Organization.  # noqa: E501
        :type: str
        """

        self._num_employees_enum = num_employees_enum

    @property
    def num_enrollments(self):
        """Gets the num_enrollments of this Organization.  # noqa: E501

        Total number of Enrollments\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * c_00001_00010 - 1-10  * c_00011_00050 - 11-50  * c_00051_00100 - 51-100  * c_00101_00250 - 101-250  * c_00251_00500 - 251-500  * c_00501_01000 - 501-1000  * c_01001_05000 - 1001-5000  * c_05001_10000 - 5001-10000  * c_10001_max - 10001+   # noqa: E501

        :return: The num_enrollments of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._num_enrollments

    @num_enrollments.setter
    def num_enrollments(self, num_enrollments):
        """Sets the num_enrollments of this Organization.

        Total number of Enrollments\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * c_00001_00010 - 1-10  * c_00011_00050 - 11-50  * c_00051_00100 - 51-100  * c_00101_00250 - 101-250  * c_00251_00500 - 251-500  * c_00501_01000 - 501-1000  * c_01001_05000 - 1001-5000  * c_05001_10000 - 5001-10000  * c_10001_max - 10001+   # noqa: E501

        :param num_enrollments: The num_enrollments of this Organization.  # noqa: E501
        :type: str
        """

        self._num_enrollments = num_enrollments

    @property
    def num_event_appearances(self):
        """Gets the num_event_appearances of this Organization.  # noqa: E501

        Total number of events an Organization appeared in\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The num_event_appearances of this Organization.  # noqa: E501
        :rtype: float
        """
        return self._num_event_appearances

    @num_event_appearances.setter
    def num_event_appearances(self, num_event_appearances):
        """Sets the num_event_appearances of this Organization.

        Total number of events an Organization appeared in\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param num_event_appearances: The num_event_appearances of this Organization.  # noqa: E501
        :type: float
        """

        self._num_event_appearances = num_event_appearances

    @property
    def num_exits(self):
        """Gets the num_exits of this Organization.  # noqa: E501

        Total number of Exits\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The num_exits of this Organization.  # noqa: E501
        :rtype: float
        """
        return self._num_exits

    @num_exits.setter
    def num_exits(self, num_exits):
        """Sets the num_exits of this Organization.

        Total number of Exits\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param num_exits: The num_exits of this Organization.  # noqa: E501
        :type: float
        """

        self._num_exits = num_exits

    @property
    def num_exits_ipo(self):
        """Gets the num_exits_ipo of this Organization.  # noqa: E501

        Total number of Exits (IPO)\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The num_exits_ipo of this Organization.  # noqa: E501
        :rtype: float
        """
        return self._num_exits_ipo

    @num_exits_ipo.setter
    def num_exits_ipo(self, num_exits_ipo):
        """Sets the num_exits_ipo of this Organization.

        Total number of Exits (IPO)\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param num_exits_ipo: The num_exits_ipo of this Organization.  # noqa: E501
        :type: float
        """

        self._num_exits_ipo = num_exits_ipo

    @property
    def num_founder_alumni(self):
        """Gets the num_founder_alumni of this Organization.  # noqa: E501

        Total number of Alumni that are Founders\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The num_founder_alumni of this Organization.  # noqa: E501
        :rtype: float
        """
        return self._num_founder_alumni

    @num_founder_alumni.setter
    def num_founder_alumni(self, num_founder_alumni):
        """Sets the num_founder_alumni of this Organization.

        Total number of Alumni that are Founders\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param num_founder_alumni: The num_founder_alumni of this Organization.  # noqa: E501
        :type: float
        """

        self._num_founder_alumni = num_founder_alumni

    @property
    def num_founders(self):
        """Gets the num_founders of this Organization.  # noqa: E501

        Total number of Founders\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The num_founders of this Organization.  # noqa: E501
        :rtype: float
        """
        return self._num_founders

    @num_founders.setter
    def num_founders(self, num_founders):
        """Sets the num_founders of this Organization.

        Total number of Founders\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param num_founders: The num_founders of this Organization.  # noqa: E501
        :type: float
        """

        self._num_founders = num_founders

    @property
    def num_funding_rounds(self):
        """Gets the num_funding_rounds of this Organization.  # noqa: E501

        Total number of Funding Rounds\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The num_funding_rounds of this Organization.  # noqa: E501
        :rtype: float
        """
        return self._num_funding_rounds

    @num_funding_rounds.setter
    def num_funding_rounds(self, num_funding_rounds):
        """Sets the num_funding_rounds of this Organization.

        Total number of Funding Rounds\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param num_funding_rounds: The num_funding_rounds of this Organization.  # noqa: E501
        :type: float
        """

        self._num_funding_rounds = num_funding_rounds

    @property
    def num_funds(self):
        """Gets the num_funds of this Organization.  # noqa: E501

        Total number of Funds raised\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The num_funds of this Organization.  # noqa: E501
        :rtype: float
        """
        return self._num_funds

    @num_funds.setter
    def num_funds(self, num_funds):
        """Sets the num_funds of this Organization.

        Total number of Funds raised\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param num_funds: The num_funds of this Organization.  # noqa: E501
        :type: float
        """

        self._num_funds = num_funds

    @property
    def num_investments(self):
        """Gets the num_investments of this Organization.  # noqa: E501

        Total number of Investments made\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The num_investments of this Organization.  # noqa: E501
        :rtype: float
        """
        return self._num_investments

    @num_investments.setter
    def num_investments(self, num_investments):
        """Sets the num_investments of this Organization.

        Total number of Investments made\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param num_investments: The num_investments of this Organization.  # noqa: E501
        :type: float
        """

        self._num_investments = num_investments

    @property
    def num_investors(self):
        """Gets the num_investors of this Organization.  # noqa: E501

        Total number of investment firms and individual investors\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The num_investors of this Organization.  # noqa: E501
        :rtype: float
        """
        return self._num_investors

    @num_investors.setter
    def num_investors(self, num_investors):
        """Sets the num_investors of this Organization.

        Total number of investment firms and individual investors\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param num_investors: The num_investors of this Organization.  # noqa: E501
        :type: float
        """

        self._num_investors = num_investors

    @property
    def num_lead_investments(self):
        """Gets the num_lead_investments of this Organization.  # noqa: E501

        Total number of Lead Investments made\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The num_lead_investments of this Organization.  # noqa: E501
        :rtype: float
        """
        return self._num_lead_investments

    @num_lead_investments.setter
    def num_lead_investments(self, num_lead_investments):
        """Sets the num_lead_investments of this Organization.

        Total number of Lead Investments made\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param num_lead_investments: The num_lead_investments of this Organization.  # noqa: E501
        :type: float
        """

        self._num_lead_investments = num_lead_investments

    @property
    def num_lead_investors(self):
        """Gets the num_lead_investors of this Organization.  # noqa: E501

        Total number of lead investment firms and individual investors\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The num_lead_investors of this Organization.  # noqa: E501
        :rtype: float
        """
        return self._num_lead_investors

    @num_lead_investors.setter
    def num_lead_investors(self, num_lead_investors):
        """Sets the num_lead_investors of this Organization.

        Total number of lead investment firms and individual investors\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param num_lead_investors: The num_lead_investors of this Organization.  # noqa: E501
        :type: float
        """

        self._num_lead_investors = num_lead_investors

    @property
    def num_past_positions(self):
        """Gets the num_past_positions of this Organization.  # noqa: E501

        Total number of past employee profiles of an organization\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The num_past_positions of this Organization.  # noqa: E501
        :rtype: float
        """
        return self._num_past_positions

    @num_past_positions.setter
    def num_past_positions(self, num_past_positions):
        """Sets the num_past_positions of this Organization.

        Total number of past employee profiles of an organization\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param num_past_positions: The num_past_positions of this Organization.  # noqa: E501
        :type: float
        """

        self._num_past_positions = num_past_positions

    @property
    def num_portfolio_organizations(self):
        """Gets the num_portfolio_organizations of this Organization.  # noqa: E501

        Total number of portfolio organizations\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The num_portfolio_organizations of this Organization.  # noqa: E501
        :rtype: float
        """
        return self._num_portfolio_organizations

    @num_portfolio_organizations.setter
    def num_portfolio_organizations(self, num_portfolio_organizations):
        """Sets the num_portfolio_organizations of this Organization.

        Total number of portfolio organizations\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param num_portfolio_organizations: The num_portfolio_organizations of this Organization.  # noqa: E501
        :type: float
        """

        self._num_portfolio_organizations = num_portfolio_organizations

    @property
    def num_sub_organizations(self):
        """Gets the num_sub_organizations of this Organization.  # noqa: E501

        Total number of sub-organizations that belongs to a parent Organization\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The num_sub_organizations of this Organization.  # noqa: E501
        :rtype: float
        """
        return self._num_sub_organizations

    @num_sub_organizations.setter
    def num_sub_organizations(self, num_sub_organizations):
        """Sets the num_sub_organizations of this Organization.

        Total number of sub-organizations that belongs to a parent Organization\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param num_sub_organizations: The num_sub_organizations of this Organization.  # noqa: E501
        :type: float
        """

        self._num_sub_organizations = num_sub_organizations

    @property
    def operating_status(self):
        """Gets the operating_status of this Organization.  # noqa: E501

        Operating Status of Organization e.g. Active, Closed\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * active - Active  * closed - Closed   # noqa: E501

        :return: The operating_status of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._operating_status

    @operating_status.setter
    def operating_status(self, operating_status):
        """Sets the operating_status of this Organization.

        Operating Status of Organization e.g. Active, Closed\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * active - Active  * closed - Closed   # noqa: E501

        :param operating_status: The operating_status of this Organization.  # noqa: E501
        :type: str
        """

        self._operating_status = operating_status

    @property
    def override_layout_id(self):
        """Gets the override_layout_id of this Organization.  # noqa: E501

        Override the layout of the Entity Profile\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * default - Default Layout  * investor - Investor Layout  * school - School Layout   # noqa: E501

        :return: The override_layout_id of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._override_layout_id

    @override_layout_id.setter
    def override_layout_id(self, override_layout_id):
        """Sets the override_layout_id of this Organization.

        Override the layout of the Entity Profile\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * default - Default Layout  * investor - Investor Layout  * school - School Layout   # noqa: E501

        :param override_layout_id: The override_layout_id of this Organization.  # noqa: E501
        :type: str
        """

        self._override_layout_id = override_layout_id

    @property
    def owner_identifier(self):
        """Gets the owner_identifier of this Organization.  # noqa: E501

        This is the parent Organization of the sub-organization\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :return: The owner_identifier of this Organization.  # noqa: E501
        :rtype: AllOfOrganizationOwnerIdentifier
        """
        return self._owner_identifier

    @owner_identifier.setter
    def owner_identifier(self, owner_identifier):
        """Sets the owner_identifier of this Organization.

        This is the parent Organization of the sub-organization\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :param owner_identifier: The owner_identifier of this Organization.  # noqa: E501
        :type: AllOfOrganizationOwnerIdentifier
        """

        self._owner_identifier = owner_identifier

    @property
    def permalink(self):
        """Gets the permalink of this Organization.  # noqa: E501

        Field Type: permalink\\ Searchable: No   # noqa: E501

        :return: The permalink of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._permalink

    @permalink.setter
    def permalink(self, permalink):
        """Sets the permalink of this Organization.

        Field Type: permalink\\ Searchable: No   # noqa: E501

        :param permalink: The permalink of this Organization.  # noqa: E501
        :type: str
        """

        self._permalink = permalink

    @property
    def permalink_aliases(self):
        """Gets the permalink_aliases of this Organization.  # noqa: E501

        These are the alternative aliases to the primary permalink of the Organization\\ Field Type: text_exact_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :return: The permalink_aliases of this Organization.  # noqa: E501
        :rtype: list[str]
        """
        return self._permalink_aliases

    @permalink_aliases.setter
    def permalink_aliases(self, permalink_aliases):
        """Sets the permalink_aliases of this Organization.

        These are the alternative aliases to the primary permalink of the Organization\\ Field Type: text_exact_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :param permalink_aliases: The permalink_aliases of this Organization.  # noqa: E501
        :type: list[str]
        """

        self._permalink_aliases = permalink_aliases

    @property
    def phone_number(self):
        """Gets the phone_number of this Organization.  # noqa: E501

        Organization's general phone number\\ Field Type: text_blob\\ Searchable: No   # noqa: E501

        :return: The phone_number of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this Organization.

        Organization's general phone number\\ Field Type: text_blob\\ Searchable: No   # noqa: E501

        :param phone_number: The phone_number of this Organization.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def program_application_deadline(self):
        """Gets the program_application_deadline of this Organization.  # noqa: E501

        The deadline for applying to the Accelerator Program\\ Field Type: date\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The program_application_deadline of this Organization.  # noqa: E501
        :rtype: date
        """
        return self._program_application_deadline

    @program_application_deadline.setter
    def program_application_deadline(self, program_application_deadline):
        """Sets the program_application_deadline of this Organization.

        The deadline for applying to the Accelerator Program\\ Field Type: date\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param program_application_deadline: The program_application_deadline of this Organization.  # noqa: E501
        :type: date
        """

        self._program_application_deadline = program_application_deadline

    @property
    def program_duration(self):
        """Gets the program_duration of this Organization.  # noqa: E501

        The duration of the Acceleration Program in number of weeks\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The program_duration of this Organization.  # noqa: E501
        :rtype: float
        """
        return self._program_duration

    @program_duration.setter
    def program_duration(self, program_duration):
        """Sets the program_duration of this Organization.

        The duration of the Acceleration Program in number of weeks\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param program_duration: The program_duration of this Organization.  # noqa: E501
        :type: float
        """

        self._program_duration = program_duration

    @property
    def program_type(self):
        """Gets the program_type of this Organization.  # noqa: E501

        The type of Accelerator Program (e.g. On-Site, Online)\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * on_site - On-Site  * online - Online   # noqa: E501

        :return: The program_type of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._program_type

    @program_type.setter
    def program_type(self, program_type):
        """Sets the program_type of this Organization.

        The type of Accelerator Program (e.g. On-Site, Online)\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * on_site - On-Site  * online - Online   # noqa: E501

        :param program_type: The program_type of this Organization.  # noqa: E501
        :type: str
        """

        self._program_type = program_type

    @property
    def rank_delta_d30(self):
        """Gets the rank_delta_d30 of this Organization.  # noqa: E501

        Movement in Rank over the last 30 days using a score from -10 to 10\\ Field Type: decimal\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The rank_delta_d30 of this Organization.  # noqa: E501
        :rtype: float
        """
        return self._rank_delta_d30

    @rank_delta_d30.setter
    def rank_delta_d30(self, rank_delta_d30):
        """Sets the rank_delta_d30 of this Organization.

        Movement in Rank over the last 30 days using a score from -10 to 10\\ Field Type: decimal\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param rank_delta_d30: The rank_delta_d30 of this Organization.  # noqa: E501
        :type: float
        """

        self._rank_delta_d30 = rank_delta_d30

    @property
    def rank_delta_d7(self):
        """Gets the rank_delta_d7 of this Organization.  # noqa: E501

        Movement in Rank over the last 7 days using a score from -10 to 10\\ Field Type: decimal\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The rank_delta_d7 of this Organization.  # noqa: E501
        :rtype: float
        """
        return self._rank_delta_d7

    @rank_delta_d7.setter
    def rank_delta_d7(self, rank_delta_d7):
        """Sets the rank_delta_d7 of this Organization.

        Movement in Rank over the last 7 days using a score from -10 to 10\\ Field Type: decimal\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param rank_delta_d7: The rank_delta_d7 of this Organization.  # noqa: E501
        :type: float
        """

        self._rank_delta_d7 = rank_delta_d7

    @property
    def rank_delta_d90(self):
        """Gets the rank_delta_d90 of this Organization.  # noqa: E501

        Movement in Rank over the last 90 days using a score from -10 to 10\\ Field Type: decimal\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The rank_delta_d90 of this Organization.  # noqa: E501
        :rtype: float
        """
        return self._rank_delta_d90

    @rank_delta_d90.setter
    def rank_delta_d90(self, rank_delta_d90):
        """Sets the rank_delta_d90 of this Organization.

        Movement in Rank over the last 90 days using a score from -10 to 10\\ Field Type: decimal\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param rank_delta_d90: The rank_delta_d90 of this Organization.  # noqa: E501
        :type: float
        """

        self._rank_delta_d90 = rank_delta_d90

    @property
    def rank_org(self):
        """Gets the rank_org of this Organization.  # noqa: E501

        Algorithmic rank assigned to the top 100,000 most active Organizations\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The rank_org of this Organization.  # noqa: E501
        :rtype: float
        """
        return self._rank_org

    @rank_org.setter
    def rank_org(self, rank_org):
        """Sets the rank_org of this Organization.

        Algorithmic rank assigned to the top 100,000 most active Organizations\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param rank_org: The rank_org of this Organization.  # noqa: E501
        :type: float
        """

        self._rank_org = rank_org

    @property
    def rank_principal(self):
        """Gets the rank_principal of this Organization.  # noqa: E501

        Algorithmic rank assigned to the top 100,000 most active Organizations and People\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The rank_principal of this Organization.  # noqa: E501
        :rtype: float
        """
        return self._rank_principal

    @rank_principal.setter
    def rank_principal(self, rank_principal):
        """Sets the rank_principal of this Organization.

        Algorithmic rank assigned to the top 100,000 most active Organizations and People\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param rank_principal: The rank_principal of this Organization.  # noqa: E501
        :type: float
        """

        self._rank_principal = rank_principal

    @property
    def revenue_range(self):
        """Gets the revenue_range of this Organization.  # noqa: E501

        Estimated revenue range for organization\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * r_00000000 - Less than $1M  * r_00001000 - $1M to $10M  * r_00010000 - $10M to $50M  * r_00050000 - $50M to $100M  * r_00100000 - $100M to $500M  * r_00500000 - $500M to $1B  * r_01000000 - $1B to $10B  * r_10000000 - $10B+   # noqa: E501

        :return: The revenue_range of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._revenue_range

    @revenue_range.setter
    def revenue_range(self, revenue_range):
        """Sets the revenue_range of this Organization.

        Estimated revenue range for organization\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * r_00000000 - Less than $1M  * r_00001000 - $1M to $10M  * r_00010000 - $10M to $50M  * r_00050000 - $50M to $100M  * r_00100000 - $100M to $500M  * r_00500000 - $500M to $1B  * r_01000000 - $1B to $10B  * r_10000000 - $10B+   # noqa: E501

        :param revenue_range: The revenue_range of this Organization.  # noqa: E501
        :type: str
        """

        self._revenue_range = revenue_range

    @property
    def school_method(self):
        """Gets the school_method of this Organization.  # noqa: E501

        The type of School Method (e.g. On Campus, Online)\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * on_compus - On Campus  * online - Online  * online_and_on_campus - Online and On Campus   # noqa: E501

        :return: The school_method of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._school_method

    @school_method.setter
    def school_method(self, school_method):
        """Sets the school_method of this Organization.

        The type of School Method (e.g. On Campus, Online)\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * on_compus - On Campus  * online - Online  * online_and_on_campus - Online and On Campus   # noqa: E501

        :param school_method: The school_method of this Organization.  # noqa: E501
        :type: str
        """

        self._school_method = school_method

    @property
    def school_program(self):
        """Gets the school_program of this Organization.  # noqa: E501

        The type of School Program (e.g. Bootcamp, Four Year University)\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * bootcamp - Bootcamp  * community_college - Community College  * four_year_university - Four Year University  * graduate_university - Graduate University  * high_school - High School  * trade_school - Trade School  * two_year_university - Two Year University   # noqa: E501

        :return: The school_program of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._school_program

    @school_program.setter
    def school_program(self, school_program):
        """Sets the school_program of this Organization.

        The type of School Program (e.g. Bootcamp, Four Year University)\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * bootcamp - Bootcamp  * community_college - Community College  * four_year_university - Four Year University  * graduate_university - Graduate University  * high_school - High School  * trade_school - Trade School  * two_year_university - Two Year University   # noqa: E501

        :param school_program: The school_program of this Organization.  # noqa: E501
        :type: str
        """

        self._school_program = school_program

    @property
    def school_type(self):
        """Gets the school_type of this Organization.  # noqa: E501

        The type of school\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * for_profit_private - Private  * non_profit_private - Private (Non-Profit)  * public - Public   # noqa: E501

        :return: The school_type of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._school_type

    @school_type.setter
    def school_type(self, school_type):
        """Sets the school_type of this Organization.

        The type of school\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * for_profit_private - Private  * non_profit_private - Private (Non-Profit)  * public - Public   # noqa: E501

        :param school_type: The school_type of this Organization.  # noqa: E501
        :type: str
        """

        self._school_type = school_type

    @property
    def short_description(self):
        """Gets the short_description of this Organization.  # noqa: E501

        Text of Organization Description, Industries, and Industry Groups\\ Field Type: text_long\\ Searchable: Yes\\ Search Operators: blank, contains, not_contains   # noqa: E501

        :return: The short_description of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this Organization.

        Text of Organization Description, Industries, and Industry Groups\\ Field Type: text_long\\ Searchable: Yes\\ Search Operators: blank, contains, not_contains   # noqa: E501

        :param short_description: The short_description of this Organization.  # noqa: E501
        :type: str
        """

        self._short_description = short_description

    @property
    def status(self):
        """Gets the status of this Organization.  # noqa: E501

        Status of Organization e.g. Operating, Closed, Acquired, IPO\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * closed - Closed  * ipo - IPO  * operating - Operating  * was_acquired - Was Acquired   # noqa: E501

        :return: The status of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Organization.

        Status of Organization e.g. Operating, Closed, Acquired, IPO\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * closed - Closed  * ipo - IPO  * operating - Operating  * was_acquired - Was Acquired   # noqa: E501

        :param status: The status of this Organization.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def stock_exchange_symbol(self):
        """Gets the stock_exchange_symbol of this Organization.  # noqa: E501

        Stock exchange where the Organization is listed e.g. NYSE, NASDAQ\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * adx - ADX - Abu Dhabi Securities Exchange  * afx - AFX - Afghanistan Stock Exchange  * altx - ALTX - ALTX East Africa Exchange  * amex - AMEX - American Stock Exchange  * ams - AMS - Euronext Amsterdam  * amx - AMX - Armenia Securities Exchange  * asce - ASCE - Abuja Securities and Commodities Exchange  * asx - ASX - Australian Securities Exchange  * ath - ATH - Athens Stock Exchange  * bcba - BCBA - Buenos Aires Stock Exchange  * bdp - BDP - Budapest Stock Exchange  * belex - BELEX - Belgrade Stock Exchange  * ber - BER - Berliner Börse  * bfb - BFB - Baku Stock Exchange  * bit - BIT - Italian Stock Exchange  * bkk - BKK - Thailand Stock Exchange  * blse - BLSE - Banja Luka Stock Exchange  * bme - BME - Madrid Stock Exchange  * bmv - BMV - Mexican Stock Exchange  * bom - BOM - Bombay Stock Exchange  * brvm - BRVM - Regional Securities Exchange SA  * bse - BSE - Bulgarian Stock Exchange  * bse_lb - BSE - Beirut Stock Exchange  * bsse - BSSE - Bratislava Stock Exchange  * bsx - BSX - Bermuda Stock Exchange  * bvb - BVB - Bucharest Stock Exchange  * bvc - BVC - Colombian Stock Exchange  * bvfb - BVFB - Belarusian Currency and Stock Exchange  * bvm - BVM - Montevideo Stock Exchange  * bvmf - B3 - Brazil Stock Exchange and OTC Market  * bvmt - BVMT - Tunis Stock Exchange  * bx - BX - Berne Stock Exchange  * cas - CAS - Casablanca Stock Exchange  * cise - CISE - Channel Islands Stock Exchange  * cnsx - CNSX - Canadian National Stock Exchange  * col - COL - Colombo Stock Exchange  * cph - CPH - Copenhagen Stock Exchange  * cse - CSE - Canadian Securities Exchange  * cse_cy - CSE - Cyprus Stock Exchange  * csx - CSX - Cambodia Securities Exchange  * cve - TSX-V - Toronto TSX Venture Exchange  * dfm - DFM - Dubai Financial Market  * dse - DSE - Dhaka Stock Exchange  * dsx - DSX - Douala Stock Exchange  * dus - DUS - Börse Düsseldorf  * ebr - EBR - Euronext Brussels  * egx - EGX - Egypt Stock Exchange  * eli - ELI - Euronext Lisbon  * epa - EPA - Euronext Paris  * etr - ETR - Deutsche Börse XETRA  * eurex - EUREX - Eurex Exchange  * fra - FRA - Frankfurt Stock Exchange  * fwb - FWB - Börse Frankfurt Stock Exchange  * gha - GHA - Ghana Stock Exchange  * gsx - GSX - Georgian Stock Exchange  * gsx_gi - GSX - Gibraltar Stock Exchange  * hel - HEL - Helsinki Stock Exchange  * hkg - HKG - Hong Kong Stock Exchange  * hnx - HNX - Hanoi Stock Exchange  * hose - HOSE - Ho Chi Minh Stock Exchange  * ice - ICE - Iceland Stock Exchange  * idx - IDX - Indonesia Stock Exchange  * iex - IEX - Investors Exchange  * ifb - IFB - Iran Fara Bourse  * ime - IME - Iran Mercantile Exchange  * irenex - IRENEX - Iran Energy Exchange  * ise - ISE - Irish Stock Exchange  * ist - IST - Istanbul Stock Exchange  * isx - ISX - Iraq Stock Exchange  * jp - JP - Japan Exchange  * jsc - JSC - Belarusian Currency and Stock Exchange  * jse - JSE - Johannesburg Stock Exchange  * jse_jam - JSE - Jamaica Stock Exchange  * kase - KASE - Kazakhstan Stock Exchange  * klse - KLSE - Malaysia Stock Exchange  * kosdaq - KOSDAQ - Korean Securities Dealers Automated Quotations  * krx - KRX - Korea Stock Exchange  * kse - KSE - Kuwait Stock Exchange  * lje - LJE - Ljubljana Stock Exchange  * lse - LSE - London Stock Exchange  * lsm - LSM - Libyan Stock Market  * lsx - LSX - Lao Securities Exchange  * luse - LuSE - Lusaka Securities Exchange  * luxse - LuxSE - Luxembourg Stock Exchange  * mal - MAL - Malta Stock Exchange  * mcx - MCX - Multi Commodity Exchange of India  * meff - MEFF - Mercado Spanish Financial Futures Market  * mnse - MNSE - Montenegro Stock Exchange  * moex - MOEX - Moscow Exchange  * mse - MSE - Metropolitan Stock Exchange  * mse_md - MSE - Moldova Stock Exchange  * mse_mk - MSE - Macedonian Stock Exchange  * msei - MSEI - Metropolitan Stock Exchange of India  * msm - MSM - Muscat Securities Market  * mun - MUN - Börse München  * nasdaq - NASDAQ  * nbo - NSE - Nairobi Securities Exchange  * neeq - NEEQ - National Equities Exchange and Quotations  * nepse - NEPSE - Nepal Stock Exchange  * nex - NEX - NEX Exchange  * ngm - NGM - Nordic Growth Market Exchange  * nig - NIG - Nigerian Stock Exchange  * notc - NOTC - Norwegian OTC  * npex - NPEX - NPEX Stock Exchange  * nse - NSE - National Stock Exchange of India  * nsx - NSX - National Stock Exchange of Australia  * nyse - NYSE - New York Stock Exchange  * nysearca - NYSEARCA - NYSE Arca  * nysemkt - NYSEAMERICAN - NYSE American  * nze - NZE - New Zealand Stock Exchange  * ose - OSE - Oslo Stock Exchange  * otcbb - OTCBB - FINRA OTC Bulletin Board  * otcpink - OTC Pink  * otcqb - OTCQB  * otcqx - OTCQX  * pdex - PDEx - Philippine Dealing Exchange  * pex - PEX - Palestine Exchange  * pfts - PFTS - PFTS Ukraine Stock Exchange  * pomsox - POMSoX - Port Moresby Stock Exchange  * prg - PRA - Prague Stock Exchange  * pse - PSE - Philippine Stock Exchange  * psx - PSX - Pakistan Stock Exchange  * qse - QSE - Qatar Stock Exchange  * rfb - RFB - Riga Stock Exchange  * rse - RSE - Rwanda Stock Exchange  * rsebl - RSEBL - Royal Securities Exchange of Bhutan  * sase - SASE - Sarajevo Stock Exchange  * sbx - SBX - BX Swiss  * sehk - SEHK - The Stock Exchange of Hong Kong  * sem - SEM - Stock Exchange of Mauritius  * sgbv - SGBV - Algiers Stock Exchange  * sgx - SGX - Singapore Stock Exchange  * six - SIX - SIX Swiss Exchange  * spbex - SPBEX - Saint Petersburg Stock Exchange  * spse - SPSE - South Pacific Stock Exchange  * sse - SSE - Shanghai Stock Exchange  * ssx - SSX - Sydney Stock Exchange  * sto - STO - Stockholm Stock Exchange  * stu - STU - Börse Stuttgart  * swx - SWX - SIX Swiss Exchange  * szse - SZSE - Shenzhen Stock Exchange  * tadawul - Tadawul - Saudi Stock Exchange  * tal - TSE - Tallinn Stock Exchange  * tfex - TFEX - Thailand Futures Exchange  * tise - TISE - The International Stock Exchange  * tlv - TLV - Tel Aviv Stock Exchange  * tpe - TWSE - Taiwan Stock Exchange  * tse_al - TSE - Tirana Stock Exchange  * tse_ir - TSE - Tehran Stock Exchange  * tsec - TWO - Taiwan OTC Exchange  * tsx - TSX - Toronto Stock Exchange  * ttse - TTSE - Trinidad and Tobago Stock Exchange  * tyo - TYO - Tokyo Stock Exchange  * use - USE - Uganda Securities Exchange  * ux - UX - Ukrainian Exchange  * vie - VIE - Vienna Stock Exchange  * vmf - VMF - Faroese Securities Market  * vse - VSE - Vancouver Stock Exchange  * wse - WSE - Warsaw Stock Exchange  * ysx - YSX - Yangon Stock Exchange  * zamace - ZAMACE - Zambian Commodity Exchange  * zse - ZSE - Zimbabwe Stock Exchange  * zse_hr - ZSE - Zagreb Stock Exchange   # noqa: E501

        :return: The stock_exchange_symbol of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._stock_exchange_symbol

    @stock_exchange_symbol.setter
    def stock_exchange_symbol(self, stock_exchange_symbol):
        """Sets the stock_exchange_symbol of this Organization.

        Stock exchange where the Organization is listed e.g. NYSE, NASDAQ\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * adx - ADX - Abu Dhabi Securities Exchange  * afx - AFX - Afghanistan Stock Exchange  * altx - ALTX - ALTX East Africa Exchange  * amex - AMEX - American Stock Exchange  * ams - AMS - Euronext Amsterdam  * amx - AMX - Armenia Securities Exchange  * asce - ASCE - Abuja Securities and Commodities Exchange  * asx - ASX - Australian Securities Exchange  * ath - ATH - Athens Stock Exchange  * bcba - BCBA - Buenos Aires Stock Exchange  * bdp - BDP - Budapest Stock Exchange  * belex - BELEX - Belgrade Stock Exchange  * ber - BER - Berliner Börse  * bfb - BFB - Baku Stock Exchange  * bit - BIT - Italian Stock Exchange  * bkk - BKK - Thailand Stock Exchange  * blse - BLSE - Banja Luka Stock Exchange  * bme - BME - Madrid Stock Exchange  * bmv - BMV - Mexican Stock Exchange  * bom - BOM - Bombay Stock Exchange  * brvm - BRVM - Regional Securities Exchange SA  * bse - BSE - Bulgarian Stock Exchange  * bse_lb - BSE - Beirut Stock Exchange  * bsse - BSSE - Bratislava Stock Exchange  * bsx - BSX - Bermuda Stock Exchange  * bvb - BVB - Bucharest Stock Exchange  * bvc - BVC - Colombian Stock Exchange  * bvfb - BVFB - Belarusian Currency and Stock Exchange  * bvm - BVM - Montevideo Stock Exchange  * bvmf - B3 - Brazil Stock Exchange and OTC Market  * bvmt - BVMT - Tunis Stock Exchange  * bx - BX - Berne Stock Exchange  * cas - CAS - Casablanca Stock Exchange  * cise - CISE - Channel Islands Stock Exchange  * cnsx - CNSX - Canadian National Stock Exchange  * col - COL - Colombo Stock Exchange  * cph - CPH - Copenhagen Stock Exchange  * cse - CSE - Canadian Securities Exchange  * cse_cy - CSE - Cyprus Stock Exchange  * csx - CSX - Cambodia Securities Exchange  * cve - TSX-V - Toronto TSX Venture Exchange  * dfm - DFM - Dubai Financial Market  * dse - DSE - Dhaka Stock Exchange  * dsx - DSX - Douala Stock Exchange  * dus - DUS - Börse Düsseldorf  * ebr - EBR - Euronext Brussels  * egx - EGX - Egypt Stock Exchange  * eli - ELI - Euronext Lisbon  * epa - EPA - Euronext Paris  * etr - ETR - Deutsche Börse XETRA  * eurex - EUREX - Eurex Exchange  * fra - FRA - Frankfurt Stock Exchange  * fwb - FWB - Börse Frankfurt Stock Exchange  * gha - GHA - Ghana Stock Exchange  * gsx - GSX - Georgian Stock Exchange  * gsx_gi - GSX - Gibraltar Stock Exchange  * hel - HEL - Helsinki Stock Exchange  * hkg - HKG - Hong Kong Stock Exchange  * hnx - HNX - Hanoi Stock Exchange  * hose - HOSE - Ho Chi Minh Stock Exchange  * ice - ICE - Iceland Stock Exchange  * idx - IDX - Indonesia Stock Exchange  * iex - IEX - Investors Exchange  * ifb - IFB - Iran Fara Bourse  * ime - IME - Iran Mercantile Exchange  * irenex - IRENEX - Iran Energy Exchange  * ise - ISE - Irish Stock Exchange  * ist - IST - Istanbul Stock Exchange  * isx - ISX - Iraq Stock Exchange  * jp - JP - Japan Exchange  * jsc - JSC - Belarusian Currency and Stock Exchange  * jse - JSE - Johannesburg Stock Exchange  * jse_jam - JSE - Jamaica Stock Exchange  * kase - KASE - Kazakhstan Stock Exchange  * klse - KLSE - Malaysia Stock Exchange  * kosdaq - KOSDAQ - Korean Securities Dealers Automated Quotations  * krx - KRX - Korea Stock Exchange  * kse - KSE - Kuwait Stock Exchange  * lje - LJE - Ljubljana Stock Exchange  * lse - LSE - London Stock Exchange  * lsm - LSM - Libyan Stock Market  * lsx - LSX - Lao Securities Exchange  * luse - LuSE - Lusaka Securities Exchange  * luxse - LuxSE - Luxembourg Stock Exchange  * mal - MAL - Malta Stock Exchange  * mcx - MCX - Multi Commodity Exchange of India  * meff - MEFF - Mercado Spanish Financial Futures Market  * mnse - MNSE - Montenegro Stock Exchange  * moex - MOEX - Moscow Exchange  * mse - MSE - Metropolitan Stock Exchange  * mse_md - MSE - Moldova Stock Exchange  * mse_mk - MSE - Macedonian Stock Exchange  * msei - MSEI - Metropolitan Stock Exchange of India  * msm - MSM - Muscat Securities Market  * mun - MUN - Börse München  * nasdaq - NASDAQ  * nbo - NSE - Nairobi Securities Exchange  * neeq - NEEQ - National Equities Exchange and Quotations  * nepse - NEPSE - Nepal Stock Exchange  * nex - NEX - NEX Exchange  * ngm - NGM - Nordic Growth Market Exchange  * nig - NIG - Nigerian Stock Exchange  * notc - NOTC - Norwegian OTC  * npex - NPEX - NPEX Stock Exchange  * nse - NSE - National Stock Exchange of India  * nsx - NSX - National Stock Exchange of Australia  * nyse - NYSE - New York Stock Exchange  * nysearca - NYSEARCA - NYSE Arca  * nysemkt - NYSEAMERICAN - NYSE American  * nze - NZE - New Zealand Stock Exchange  * ose - OSE - Oslo Stock Exchange  * otcbb - OTCBB - FINRA OTC Bulletin Board  * otcpink - OTC Pink  * otcqb - OTCQB  * otcqx - OTCQX  * pdex - PDEx - Philippine Dealing Exchange  * pex - PEX - Palestine Exchange  * pfts - PFTS - PFTS Ukraine Stock Exchange  * pomsox - POMSoX - Port Moresby Stock Exchange  * prg - PRA - Prague Stock Exchange  * pse - PSE - Philippine Stock Exchange  * psx - PSX - Pakistan Stock Exchange  * qse - QSE - Qatar Stock Exchange  * rfb - RFB - Riga Stock Exchange  * rse - RSE - Rwanda Stock Exchange  * rsebl - RSEBL - Royal Securities Exchange of Bhutan  * sase - SASE - Sarajevo Stock Exchange  * sbx - SBX - BX Swiss  * sehk - SEHK - The Stock Exchange of Hong Kong  * sem - SEM - Stock Exchange of Mauritius  * sgbv - SGBV - Algiers Stock Exchange  * sgx - SGX - Singapore Stock Exchange  * six - SIX - SIX Swiss Exchange  * spbex - SPBEX - Saint Petersburg Stock Exchange  * spse - SPSE - South Pacific Stock Exchange  * sse - SSE - Shanghai Stock Exchange  * ssx - SSX - Sydney Stock Exchange  * sto - STO - Stockholm Stock Exchange  * stu - STU - Börse Stuttgart  * swx - SWX - SIX Swiss Exchange  * szse - SZSE - Shenzhen Stock Exchange  * tadawul - Tadawul - Saudi Stock Exchange  * tal - TSE - Tallinn Stock Exchange  * tfex - TFEX - Thailand Futures Exchange  * tise - TISE - The International Stock Exchange  * tlv - TLV - Tel Aviv Stock Exchange  * tpe - TWSE - Taiwan Stock Exchange  * tse_al - TSE - Tirana Stock Exchange  * tse_ir - TSE - Tehran Stock Exchange  * tsec - TWO - Taiwan OTC Exchange  * tsx - TSX - Toronto Stock Exchange  * ttse - TTSE - Trinidad and Tobago Stock Exchange  * tyo - TYO - Tokyo Stock Exchange  * use - USE - Uganda Securities Exchange  * ux - UX - Ukrainian Exchange  * vie - VIE - Vienna Stock Exchange  * vmf - VMF - Faroese Securities Market  * vse - VSE - Vancouver Stock Exchange  * wse - WSE - Warsaw Stock Exchange  * ysx - YSX - Yangon Stock Exchange  * zamace - ZAMACE - Zambian Commodity Exchange  * zse - ZSE - Zimbabwe Stock Exchange  * zse_hr - ZSE - Zagreb Stock Exchange   # noqa: E501

        :param stock_exchange_symbol: The stock_exchange_symbol of this Organization.  # noqa: E501
        :type: str
        """

        self._stock_exchange_symbol = stock_exchange_symbol

    @property
    def stock_symbol(self):
        """Gets the stock_symbol of this Organization.  # noqa: E501

        Stock ticker symbol (e.g. AAPL, FB, TWTR)\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :return: The stock_symbol of this Organization.  # noqa: E501
        :rtype: AllOfOrganizationStockSymbol
        """
        return self._stock_symbol

    @stock_symbol.setter
    def stock_symbol(self, stock_symbol):
        """Sets the stock_symbol of this Organization.

        Stock ticker symbol (e.g. AAPL, FB, TWTR)\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :param stock_symbol: The stock_symbol of this Organization.  # noqa: E501
        :type: AllOfOrganizationStockSymbol
        """

        self._stock_symbol = stock_symbol

    @property
    def twitter(self):
        """Gets the twitter of this Organization.  # noqa: E501

        Link to Organization's Twitter page\\ Field Type: link\\ Searchable: No   # noqa: E501

        :return: The twitter of this Organization.  # noqa: E501
        :rtype: AllOfOrganizationTwitter
        """
        return self._twitter

    @twitter.setter
    def twitter(self, twitter):
        """Sets the twitter of this Organization.

        Link to Organization's Twitter page\\ Field Type: link\\ Searchable: No   # noqa: E501

        :param twitter: The twitter of this Organization.  # noqa: E501
        :type: AllOfOrganizationTwitter
        """

        self._twitter = twitter

    @property
    def updated_at(self):
        """Gets the updated_at of this Organization.  # noqa: E501

        Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The updated_at of this Organization.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Organization.

        Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param updated_at: The updated_at of this Organization.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def uuid(self):
        """Gets the uuid of this Organization.  # noqa: E501

        Field Type: uuid\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes   # noqa: E501

        :return: The uuid of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Organization.

        Field Type: uuid\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes   # noqa: E501

        :param uuid: The uuid of this Organization.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def valuation(self):
        """Gets the valuation of this Organization.  # noqa: E501

        Latest post money valuation of organization\\ Field Type: money\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The valuation of this Organization.  # noqa: E501
        :rtype: AllOfOrganizationValuation
        """
        return self._valuation

    @valuation.setter
    def valuation(self, valuation):
        """Sets the valuation of this Organization.

        Latest post money valuation of organization\\ Field Type: money\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param valuation: The valuation of this Organization.  # noqa: E501
        :type: AllOfOrganizationValuation
        """

        self._valuation = valuation

    @property
    def valuation_date(self):
        """Gets the valuation_date of this Organization.  # noqa: E501

        Date of latest post money valuation\\ Field Type: date\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The valuation_date of this Organization.  # noqa: E501
        :rtype: date
        """
        return self._valuation_date

    @valuation_date.setter
    def valuation_date(self, valuation_date):
        """Sets the valuation_date of this Organization.

        Date of latest post money valuation\\ Field Type: date\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param valuation_date: The valuation_date of this Organization.  # noqa: E501
        :type: date
        """

        self._valuation_date = valuation_date

    @property
    def website(self):
        """Gets the website of this Organization.  # noqa: E501

        Link to homepage. note: website_url has replaced this field; this field will be deprecated in the near future\\ Field Type: link\\ Searchable: No   # noqa: E501

        :return: The website of this Organization.  # noqa: E501
        :rtype: AllOfOrganizationWebsite
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Organization.

        Link to homepage. note: website_url has replaced this field; this field will be deprecated in the near future\\ Field Type: link\\ Searchable: No   # noqa: E501

        :param website: The website of this Organization.  # noqa: E501
        :type: AllOfOrganizationWebsite
        """

        self._website = website

    @property
    def website_url(self):
        """Gets the website_url of this Organization.  # noqa: E501

        Link to homepage\\ Field Type: url\\ Searchable: Yes\\ Search Operators: domain_blank, domain_eq, domain_includes, not_domain_eq, not_domain_includes   # noqa: E501

        :return: The website_url of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._website_url

    @website_url.setter
    def website_url(self, website_url):
        """Sets the website_url of this Organization.

        Link to homepage\\ Field Type: url\\ Searchable: Yes\\ Search Operators: domain_blank, domain_eq, domain_includes, not_domain_eq, not_domain_includes   # noqa: E501

        :param website_url: The website_url of this Organization.  # noqa: E501
        :type: str
        """

        self._website_url = website_url

    @property
    def went_public_on(self):
        """Gets the went_public_on of this Organization.  # noqa: E501

        The date when the Organization went public\\ Field Type: date\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The went_public_on of this Organization.  # noqa: E501
        :rtype: date
        """
        return self._went_public_on

    @went_public_on.setter
    def went_public_on(self, went_public_on):
        """Sets the went_public_on of this Organization.

        The date when the Organization went public\\ Field Type: date\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param went_public_on: The went_public_on of this Organization.  # noqa: E501
        :type: date
        """

        self._went_public_on = went_public_on

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Organization, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Organization):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
