# coding: utf-8

"""
    Crunchbase Enterprise API

    Crunchbase Enterprise API, 2021-07-16  # noqa: E501

    OpenAPI spec version: 1.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EventAppearance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'appearance_type': 'str',
        'created_at': 'datetime',
        'entity_def_id': 'str',
        'event_identifier': 'AllOfEventAppearanceEventIdentifier',
        'event_location_identifiers': 'list[LocationIdentifier]',
        'event_starts_on': 'date',
        'identifier': 'AllOfEventAppearanceIdentifier',
        'name': 'str',
        'participant_identifier': 'AllOfEventAppearanceParticipantIdentifier',
        'permalink': 'str',
        'short_description': 'str',
        'updated_at': 'datetime',
        'uuid': 'str'
    }

    attribute_map = {
        'appearance_type': 'appearance_type',
        'created_at': 'created_at',
        'entity_def_id': 'entity_def_id',
        'event_identifier': 'event_identifier',
        'event_location_identifiers': 'event_location_identifiers',
        'event_starts_on': 'event_starts_on',
        'identifier': 'identifier',
        'name': 'name',
        'participant_identifier': 'participant_identifier',
        'permalink': 'permalink',
        'short_description': 'short_description',
        'updated_at': 'updated_at',
        'uuid': 'uuid'
    }

    def __init__(self, appearance_type=None, created_at=None, entity_def_id=None, event_identifier=None, event_location_identifiers=None, event_starts_on=None, identifier=None, name=None, participant_identifier=None, permalink=None, short_description=None, updated_at=None, uuid=None):  # noqa: E501
        """EventAppearance - a model defined in Swagger"""  # noqa: E501
        self._appearance_type = None
        self._created_at = None
        self._entity_def_id = None
        self._event_identifier = None
        self._event_location_identifiers = None
        self._event_starts_on = None
        self._identifier = None
        self._name = None
        self._participant_identifier = None
        self._permalink = None
        self._short_description = None
        self._updated_at = None
        self._uuid = None
        self.discriminator = None
        if appearance_type is not None:
            self.appearance_type = appearance_type
        if created_at is not None:
            self.created_at = created_at
        if entity_def_id is not None:
            self.entity_def_id = entity_def_id
        if event_identifier is not None:
            self.event_identifier = event_identifier
        if event_location_identifiers is not None:
            self.event_location_identifiers = event_location_identifiers
        if event_starts_on is not None:
            self.event_starts_on = event_starts_on
        self.identifier = identifier
        if name is not None:
            self.name = name
        if participant_identifier is not None:
            self.participant_identifier = participant_identifier
        if permalink is not None:
            self.permalink = permalink
        if short_description is not None:
            self.short_description = short_description
        if updated_at is not None:
            self.updated_at = updated_at
        if uuid is not None:
            self.uuid = uuid

    @property
    def appearance_type(self):
        """Gets the appearance_type of this EventAppearance.  # noqa: E501

        Describe how an Organization or a Person is participating in an Event (e.g. Speaker, Sponsor, etc.)\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * contestant - Contestant  * exhibitor - Exhibitor  * organizer - Organizer  * speaker - Speaker  * sponsor - Sponsor   # noqa: E501

        :return: The appearance_type of this EventAppearance.  # noqa: E501
        :rtype: str
        """
        return self._appearance_type

    @appearance_type.setter
    def appearance_type(self, appearance_type):
        """Sets the appearance_type of this EventAppearance.

        Describe how an Organization or a Person is participating in an Event (e.g. Speaker, Sponsor, etc.)\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * contestant - Contestant  * exhibitor - Exhibitor  * organizer - Organizer  * speaker - Speaker  * sponsor - Sponsor   # noqa: E501

        :param appearance_type: The appearance_type of this EventAppearance.  # noqa: E501
        :type: str
        """

        self._appearance_type = appearance_type

    @property
    def created_at(self):
        """Gets the created_at of this EventAppearance.  # noqa: E501

        Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The created_at of this EventAppearance.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this EventAppearance.

        Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param created_at: The created_at of this EventAppearance.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def entity_def_id(self):
        """Gets the entity_def_id of this EventAppearance.  # noqa: E501

        Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * event_appearance - Event Appearance   # noqa: E501

        :return: The entity_def_id of this EventAppearance.  # noqa: E501
        :rtype: str
        """
        return self._entity_def_id

    @entity_def_id.setter
    def entity_def_id(self, entity_def_id):
        """Sets the entity_def_id of this EventAppearance.

        Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * event_appearance - Event Appearance   # noqa: E501

        :param entity_def_id: The entity_def_id of this EventAppearance.  # noqa: E501
        :type: str
        """

        self._entity_def_id = entity_def_id

    @property
    def event_identifier(self):
        """Gets the event_identifier of this EventAppearance.  # noqa: E501

        Name of the Event\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :return: The event_identifier of this EventAppearance.  # noqa: E501
        :rtype: AllOfEventAppearanceEventIdentifier
        """
        return self._event_identifier

    @event_identifier.setter
    def event_identifier(self, event_identifier):
        """Sets the event_identifier of this EventAppearance.

        Name of the Event\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :param event_identifier: The event_identifier of this EventAppearance.  # noqa: E501
        :type: AllOfEventAppearanceEventIdentifier
        """

        self._event_identifier = event_identifier

    @property
    def event_location_identifiers(self):
        """Gets the event_location_identifiers of this EventAppearance.  # noqa: E501

        Location of the Event (e.g. Japan, San Francisco, Europe, Asia)\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :return: The event_location_identifiers of this EventAppearance.  # noqa: E501
        :rtype: list[LocationIdentifier]
        """
        return self._event_location_identifiers

    @event_location_identifiers.setter
    def event_location_identifiers(self, event_location_identifiers):
        """Sets the event_location_identifiers of this EventAppearance.

        Location of the Event (e.g. Japan, San Francisco, Europe, Asia)\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :param event_location_identifiers: The event_location_identifiers of this EventAppearance.  # noqa: E501
        :type: list[LocationIdentifier]
        """

        self._event_location_identifiers = event_location_identifiers

    @property
    def event_starts_on(self):
        """Gets the event_starts_on of this EventAppearance.  # noqa: E501

        Start date of the Event\\ Field Type: date\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The event_starts_on of this EventAppearance.  # noqa: E501
        :rtype: date
        """
        return self._event_starts_on

    @event_starts_on.setter
    def event_starts_on(self, event_starts_on):
        """Sets the event_starts_on of this EventAppearance.

        Start date of the Event\\ Field Type: date\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param event_starts_on: The event_starts_on of this EventAppearance.  # noqa: E501
        :type: date
        """

        self._event_starts_on = event_starts_on

    @property
    def identifier(self):
        """Gets the identifier of this EventAppearance.  # noqa: E501

        Name of the Event Appearance\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :return: The identifier of this EventAppearance.  # noqa: E501
        :rtype: AllOfEventAppearanceIdentifier
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this EventAppearance.

        Name of the Event Appearance\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :param identifier: The identifier of this EventAppearance.  # noqa: E501
        :type: AllOfEventAppearanceIdentifier
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")  # noqa: E501

        self._identifier = identifier

    @property
    def name(self):
        """Gets the name of this EventAppearance.  # noqa: E501

        Field Type: text_long\\ Searchable: Yes\\ Search Operators: blank, contains, not_contains   # noqa: E501

        :return: The name of this EventAppearance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EventAppearance.

        Field Type: text_long\\ Searchable: Yes\\ Search Operators: blank, contains, not_contains   # noqa: E501

        :param name: The name of this EventAppearance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def participant_identifier(self):
        """Gets the participant_identifier of this EventAppearance.  # noqa: E501

        The name of the participant in an Event\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :return: The participant_identifier of this EventAppearance.  # noqa: E501
        :rtype: AllOfEventAppearanceParticipantIdentifier
        """
        return self._participant_identifier

    @participant_identifier.setter
    def participant_identifier(self, participant_identifier):
        """Sets the participant_identifier of this EventAppearance.

        The name of the participant in an Event\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :param participant_identifier: The participant_identifier of this EventAppearance.  # noqa: E501
        :type: AllOfEventAppearanceParticipantIdentifier
        """

        self._participant_identifier = participant_identifier

    @property
    def permalink(self):
        """Gets the permalink of this EventAppearance.  # noqa: E501

        Field Type: permalink\\ Searchable: No   # noqa: E501

        :return: The permalink of this EventAppearance.  # noqa: E501
        :rtype: str
        """
        return self._permalink

    @permalink.setter
    def permalink(self, permalink):
        """Sets the permalink of this EventAppearance.

        Field Type: permalink\\ Searchable: No   # noqa: E501

        :param permalink: The permalink of this EventAppearance.  # noqa: E501
        :type: str
        """

        self._permalink = permalink

    @property
    def short_description(self):
        """Gets the short_description of this EventAppearance.  # noqa: E501

        A short description of how a person or an organization is participant in an Event\\ Field Type: text_long\\ Searchable: Yes\\ Search Operators: blank, contains, not_contains   # noqa: E501

        :return: The short_description of this EventAppearance.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this EventAppearance.

        A short description of how a person or an organization is participant in an Event\\ Field Type: text_long\\ Searchable: Yes\\ Search Operators: blank, contains, not_contains   # noqa: E501

        :param short_description: The short_description of this EventAppearance.  # noqa: E501
        :type: str
        """

        self._short_description = short_description

    @property
    def updated_at(self):
        """Gets the updated_at of this EventAppearance.  # noqa: E501

        Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The updated_at of this EventAppearance.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this EventAppearance.

        Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param updated_at: The updated_at of this EventAppearance.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def uuid(self):
        """Gets the uuid of this EventAppearance.  # noqa: E501

        Field Type: uuid\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes   # noqa: E501

        :return: The uuid of this EventAppearance.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this EventAppearance.

        Field Type: uuid\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes   # noqa: E501

        :param uuid: The uuid of this EventAppearance.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventAppearance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventAppearance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
