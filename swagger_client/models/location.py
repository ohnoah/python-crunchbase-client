# coding: utf-8

"""
    Crunchbase Enterprise API

    Crunchbase Enterprise API, 2021-07-16  # noqa: E501

    OpenAPI spec version: 1.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Location(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'country_code': 'str',
        'country_code_ext': 'str',
        'created_at': 'datetime',
        'entity_def_id': 'str',
        'facet_ids': 'list[str]',
        'groups': 'list[LocationIdentifier]',
        'identifier': 'AllOfLocationIdentifier',
        'locations': 'list[LocationIdentifier]',
        'name': 'str',
        'permalink': 'str',
        'permalink_aliases': 'list[str]',
        'region_code': 'str',
        'short_description': 'str',
        'updated_at': 'datetime',
        'uuid': 'str'
    }

    attribute_map = {
        'country_code': 'country_code',
        'country_code_ext': 'country_code_ext',
        'created_at': 'created_at',
        'entity_def_id': 'entity_def_id',
        'facet_ids': 'facet_ids',
        'groups': 'groups',
        'identifier': 'identifier',
        'locations': 'locations',
        'name': 'name',
        'permalink': 'permalink',
        'permalink_aliases': 'permalink_aliases',
        'region_code': 'region_code',
        'short_description': 'short_description',
        'updated_at': 'updated_at',
        'uuid': 'uuid'
    }

    def __init__(self, country_code=None, country_code_ext=None, created_at=None, entity_def_id=None, facet_ids=None, groups=None, identifier=None, locations=None, name=None, permalink=None, permalink_aliases=None, region_code=None, short_description=None, updated_at=None, uuid=None):  # noqa: E501
        """Location - a model defined in Swagger"""  # noqa: E501
        self._country_code = None
        self._country_code_ext = None
        self._created_at = None
        self._entity_def_id = None
        self._facet_ids = None
        self._groups = None
        self._identifier = None
        self._locations = None
        self._name = None
        self._permalink = None
        self._permalink_aliases = None
        self._region_code = None
        self._short_description = None
        self._updated_at = None
        self._uuid = None
        self.discriminator = None
        if country_code is not None:
            self.country_code = country_code
        if country_code_ext is not None:
            self.country_code_ext = country_code_ext
        if created_at is not None:
            self.created_at = created_at
        if entity_def_id is not None:
            self.entity_def_id = entity_def_id
        if facet_ids is not None:
            self.facet_ids = facet_ids
        if groups is not None:
            self.groups = groups
        self.identifier = identifier
        if locations is not None:
            self.locations = locations
        if name is not None:
            self.name = name
        if permalink is not None:
            self.permalink = permalink
        if permalink_aliases is not None:
            self.permalink_aliases = permalink_aliases
        if region_code is not None:
            self.region_code = region_code
        if short_description is not None:
            self.short_description = short_description
        if updated_at is not None:
            self.updated_at = updated_at
        if uuid is not None:
            self.uuid = uuid

    @property
    def country_code(self):
        """Gets the country_code of this Location.  # noqa: E501

        Short alphabetic or numeric geographical codes that represent countries (e.g. TWN, USA, ZAF)\\ Field Type: text_blob\\ Searchable: No   # noqa: E501

        :return: The country_code of this Location.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Location.

        Short alphabetic or numeric geographical codes that represent countries (e.g. TWN, USA, ZAF)\\ Field Type: text_blob\\ Searchable: No   # noqa: E501

        :param country_code: The country_code of this Location.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def country_code_ext(self):
        """Gets the country_code_ext of this Location.  # noqa: E501

        Field Type: text_blob\\ Searchable: No   # noqa: E501

        :return: The country_code_ext of this Location.  # noqa: E501
        :rtype: str
        """
        return self._country_code_ext

    @country_code_ext.setter
    def country_code_ext(self, country_code_ext):
        """Sets the country_code_ext of this Location.

        Field Type: text_blob\\ Searchable: No   # noqa: E501

        :param country_code_ext: The country_code_ext of this Location.  # noqa: E501
        :type: str
        """

        self._country_code_ext = country_code_ext

    @property
    def created_at(self):
        """Gets the created_at of this Location.  # noqa: E501

        Created At\\ Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The created_at of this Location.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Location.

        Created At\\ Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param created_at: The created_at of this Location.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def entity_def_id(self):
        """Gets the entity_def_id of this Location.  # noqa: E501

        Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * location - Location   # noqa: E501

        :return: The entity_def_id of this Location.  # noqa: E501
        :rtype: str
        """
        return self._entity_def_id

    @entity_def_id.setter
    def entity_def_id(self, entity_def_id):
        """Sets the entity_def_id of this Location.

        Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * location - Location   # noqa: E501

        :param entity_def_id: The entity_def_id of this Location.  # noqa: E501
        :type: str
        """

        self._entity_def_id = entity_def_id

    @property
    def facet_ids(self):
        """Gets the facet_ids of this Location.  # noqa: E501

        Type of location (e.g. City, Continent, Regional Area)\\ Field Type: enum_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :return: The facet_ids of this Location.  # noqa: E501
        :rtype: list[str]
        """
        return self._facet_ids

    @facet_ids.setter
    def facet_ids(self, facet_ids):
        """Sets the facet_ids of this Location.

        Type of location (e.g. City, Continent, Regional Area)\\ Field Type: enum_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :param facet_ids: The facet_ids of this Location.  # noqa: E501
        :type: list[str]
        """

        self._facet_ids = facet_ids

    @property
    def groups(self):
        """Gets the groups of this Location.  # noqa: E501

        Regional areas this location belongs to (e.g. San Francisco Bay Area, Silicon Valley)\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :return: The groups of this Location.  # noqa: E501
        :rtype: list[LocationIdentifier]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this Location.

        Regional areas this location belongs to (e.g. San Francisco Bay Area, Silicon Valley)\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :param groups: The groups of this Location.  # noqa: E501
        :type: list[LocationIdentifier]
        """

        self._groups = groups

    @property
    def identifier(self):
        """Gets the identifier of this Location.  # noqa: E501

        Short location name (e.g. Japan, San Francisco, Europe)\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :return: The identifier of this Location.  # noqa: E501
        :rtype: AllOfLocationIdentifier
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this Location.

        Short location name (e.g. Japan, San Francisco, Europe)\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :param identifier: The identifier of this Location.  # noqa: E501
        :type: AllOfLocationIdentifier
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")  # noqa: E501

        self._identifier = identifier

    @property
    def locations(self):
        """Gets the locations of this Location.  # noqa: E501

        Full location name (e.g. Denver, Colorado, United States, North America)\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :return: The locations of this Location.  # noqa: E501
        :rtype: list[LocationIdentifier]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this Location.

        Full location name (e.g. Denver, Colorado, United States, North America)\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :param locations: The locations of this Location.  # noqa: E501
        :type: list[LocationIdentifier]
        """

        self._locations = locations

    @property
    def name(self):
        """Gets the name of this Location.  # noqa: E501

        Field Type: text_blob\\ Searchable: No   # noqa: E501

        :return: The name of this Location.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Location.

        Field Type: text_blob\\ Searchable: No   # noqa: E501

        :param name: The name of this Location.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def permalink(self):
        """Gets the permalink of this Location.  # noqa: E501

        Field Type: permalink\\ Searchable: No   # noqa: E501

        :return: The permalink of this Location.  # noqa: E501
        :rtype: str
        """
        return self._permalink

    @permalink.setter
    def permalink(self, permalink):
        """Sets the permalink of this Location.

        Field Type: permalink\\ Searchable: No   # noqa: E501

        :param permalink: The permalink of this Location.  # noqa: E501
        :type: str
        """

        self._permalink = permalink

    @property
    def permalink_aliases(self):
        """Gets the permalink_aliases of this Location.  # noqa: E501

        These are the alternative aliases to the primary permalink of the Organization\\ Field Type: text_exact_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :return: The permalink_aliases of this Location.  # noqa: E501
        :rtype: list[str]
        """
        return self._permalink_aliases

    @permalink_aliases.setter
    def permalink_aliases(self, permalink_aliases):
        """Sets the permalink_aliases of this Location.

        These are the alternative aliases to the primary permalink of the Organization\\ Field Type: text_exact_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :param permalink_aliases: The permalink_aliases of this Location.  # noqa: E501
        :type: list[str]
        """

        self._permalink_aliases = permalink_aliases

    @property
    def region_code(self):
        """Gets the region_code of this Location.  # noqa: E501

        Region code used to define location\\ Field Type: text_blob\\ Searchable: No   # noqa: E501

        :return: The region_code of this Location.  # noqa: E501
        :rtype: str
        """
        return self._region_code

    @region_code.setter
    def region_code(self, region_code):
        """Sets the region_code of this Location.

        Region code used to define location\\ Field Type: text_blob\\ Searchable: No   # noqa: E501

        :param region_code: The region_code of this Location.  # noqa: E501
        :type: str
        """

        self._region_code = region_code

    @property
    def short_description(self):
        """Gets the short_description of this Location.  # noqa: E501

        Description\\ Field Type: text_long\\ Searchable: Yes\\ Search Operators: blank, contains, not_contains   # noqa: E501

        :return: The short_description of this Location.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this Location.

        Description\\ Field Type: text_long\\ Searchable: Yes\\ Search Operators: blank, contains, not_contains   # noqa: E501

        :param short_description: The short_description of this Location.  # noqa: E501
        :type: str
        """

        self._short_description = short_description

    @property
    def updated_at(self):
        """Gets the updated_at of this Location.  # noqa: E501

        Updated At\\ Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The updated_at of this Location.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Location.

        Updated At\\ Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param updated_at: The updated_at of this Location.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def uuid(self):
        """Gets the uuid of this Location.  # noqa: E501

        Field Type: uuid\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes   # noqa: E501

        :return: The uuid of this Location.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Location.

        Field Type: uuid\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes   # noqa: E501

        :param uuid: The uuid of this Location.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Location, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Location):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
