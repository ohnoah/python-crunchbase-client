# coding: utf-8

"""
    Crunchbase Enterprise API

    Crunchbase Enterprise API, 2021-07-16  # noqa: E501

    OpenAPI spec version: 1.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FundingRoundEntityCards(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fields': 'FundingRound',
        'investments': 'list[Investment]',
        'investors': 'list[Principal]',
        'lead_investors': 'list[Principal]',
        'organization': 'list[Organization]',
        'partners': 'list[Person]',
        'press_references': 'list[PressReference]'
    }

    attribute_map = {
        'fields': 'fields',
        'investments': 'investments',
        'investors': 'investors',
        'lead_investors': 'lead_investors',
        'organization': 'organization',
        'partners': 'partners',
        'press_references': 'press_references'
    }

    def __init__(self, fields=None, investments=None, investors=None, lead_investors=None, organization=None, partners=None, press_references=None):  # noqa: E501
        """FundingRoundEntityCards - a model defined in Swagger"""  # noqa: E501
        self._fields = None
        self._investments = None
        self._investors = None
        self._lead_investors = None
        self._organization = None
        self._partners = None
        self._press_references = None
        self.discriminator = None
        if fields is not None:
            self.fields = fields
        if investments is not None:
            self.investments = investments
        if investors is not None:
            self.investors = investors
        if lead_investors is not None:
            self.lead_investors = lead_investors
        if organization is not None:
            self.organization = organization
        if partners is not None:
            self.partners = partners
        if press_references is not None:
            self.press_references = press_references

    @property
    def fields(self):
        """Gets the fields of this FundingRoundEntityCards.  # noqa: E501


        :return: The fields of this FundingRoundEntityCards.  # noqa: E501
        :rtype: FundingRound
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this FundingRoundEntityCards.


        :param fields: The fields of this FundingRoundEntityCards.  # noqa: E501
        :type: FundingRound
        """

        self._fields = fields

    @property
    def investments(self):
        """Gets the investments of this FundingRoundEntityCards.  # noqa: E501


        :return: The investments of this FundingRoundEntityCards.  # noqa: E501
        :rtype: list[Investment]
        """
        return self._investments

    @investments.setter
    def investments(self, investments):
        """Sets the investments of this FundingRoundEntityCards.


        :param investments: The investments of this FundingRoundEntityCards.  # noqa: E501
        :type: list[Investment]
        """

        self._investments = investments

    @property
    def investors(self):
        """Gets the investors of this FundingRoundEntityCards.  # noqa: E501


        :return: The investors of this FundingRoundEntityCards.  # noqa: E501
        :rtype: list[Principal]
        """
        return self._investors

    @investors.setter
    def investors(self, investors):
        """Sets the investors of this FundingRoundEntityCards.


        :param investors: The investors of this FundingRoundEntityCards.  # noqa: E501
        :type: list[Principal]
        """

        self._investors = investors

    @property
    def lead_investors(self):
        """Gets the lead_investors of this FundingRoundEntityCards.  # noqa: E501


        :return: The lead_investors of this FundingRoundEntityCards.  # noqa: E501
        :rtype: list[Principal]
        """
        return self._lead_investors

    @lead_investors.setter
    def lead_investors(self, lead_investors):
        """Sets the lead_investors of this FundingRoundEntityCards.


        :param lead_investors: The lead_investors of this FundingRoundEntityCards.  # noqa: E501
        :type: list[Principal]
        """

        self._lead_investors = lead_investors

    @property
    def organization(self):
        """Gets the organization of this FundingRoundEntityCards.  # noqa: E501


        :return: The organization of this FundingRoundEntityCards.  # noqa: E501
        :rtype: list[Organization]
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this FundingRoundEntityCards.


        :param organization: The organization of this FundingRoundEntityCards.  # noqa: E501
        :type: list[Organization]
        """

        self._organization = organization

    @property
    def partners(self):
        """Gets the partners of this FundingRoundEntityCards.  # noqa: E501


        :return: The partners of this FundingRoundEntityCards.  # noqa: E501
        :rtype: list[Person]
        """
        return self._partners

    @partners.setter
    def partners(self, partners):
        """Sets the partners of this FundingRoundEntityCards.


        :param partners: The partners of this FundingRoundEntityCards.  # noqa: E501
        :type: list[Person]
        """

        self._partners = partners

    @property
    def press_references(self):
        """Gets the press_references of this FundingRoundEntityCards.  # noqa: E501


        :return: The press_references of this FundingRoundEntityCards.  # noqa: E501
        :rtype: list[PressReference]
        """
        return self._press_references

    @press_references.setter
    def press_references(self, press_references):
        """Sets the press_references of this FundingRoundEntityCards.


        :param press_references: The press_references of this FundingRoundEntityCards.  # noqa: E501
        :type: list[PressReference]
        """

        self._press_references = press_references

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FundingRoundEntityCards, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FundingRoundEntityCards):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
