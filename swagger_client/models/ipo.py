# coding: utf-8

"""
    Crunchbase Enterprise API

    Crunchbase Enterprise API, 2021-07-16  # noqa: E501

    OpenAPI spec version: 1.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Ipo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount_raised': 'AllOfIpoAmountRaised',
        'created_at': 'datetime',
        'delisted_on': 'AllOfIpoDelistedOn',
        'entity_def_id': 'str',
        'identifier': 'AllOfIpoIdentifier',
        'image_id': 'str',
        'organization_identifier': 'AllOfIpoOrganizationIdentifier',
        'permalink': 'str',
        'rank_ipo': 'float',
        'share_price': 'AllOfIpoSharePrice',
        'shares_outstanding': 'float',
        'shares_sold': 'float',
        'short_description': 'str',
        'stock_exchange_symbol': 'str',
        'stock_full_symbol': 'str',
        'stock_symbol': 'str',
        'updated_at': 'datetime',
        'uuid': 'str',
        'valuation': 'AllOfIpoValuation',
        'went_public_on': 'date'
    }

    attribute_map = {
        'amount_raised': 'amount_raised',
        'created_at': 'created_at',
        'delisted_on': 'delisted_on',
        'entity_def_id': 'entity_def_id',
        'identifier': 'identifier',
        'image_id': 'image_id',
        'organization_identifier': 'organization_identifier',
        'permalink': 'permalink',
        'rank_ipo': 'rank_ipo',
        'share_price': 'share_price',
        'shares_outstanding': 'shares_outstanding',
        'shares_sold': 'shares_sold',
        'short_description': 'short_description',
        'stock_exchange_symbol': 'stock_exchange_symbol',
        'stock_full_symbol': 'stock_full_symbol',
        'stock_symbol': 'stock_symbol',
        'updated_at': 'updated_at',
        'uuid': 'uuid',
        'valuation': 'valuation',
        'went_public_on': 'went_public_on'
    }

    def __init__(self, amount_raised=None, created_at=None, delisted_on=None, entity_def_id=None, identifier=None, image_id=None, organization_identifier=None, permalink=None, rank_ipo=None, share_price=None, shares_outstanding=None, shares_sold=None, short_description=None, stock_exchange_symbol=None, stock_full_symbol=None, stock_symbol=None, updated_at=None, uuid=None, valuation=None, went_public_on=None):  # noqa: E501
        """Ipo - a model defined in Swagger"""  # noqa: E501
        self._amount_raised = None
        self._created_at = None
        self._delisted_on = None
        self._entity_def_id = None
        self._identifier = None
        self._image_id = None
        self._organization_identifier = None
        self._permalink = None
        self._rank_ipo = None
        self._share_price = None
        self._shares_outstanding = None
        self._shares_sold = None
        self._short_description = None
        self._stock_exchange_symbol = None
        self._stock_full_symbol = None
        self._stock_symbol = None
        self._updated_at = None
        self._uuid = None
        self._valuation = None
        self._went_public_on = None
        self.discriminator = None
        if amount_raised is not None:
            self.amount_raised = amount_raised
        if created_at is not None:
            self.created_at = created_at
        if delisted_on is not None:
            self.delisted_on = delisted_on
        if entity_def_id is not None:
            self.entity_def_id = entity_def_id
        self.identifier = identifier
        if image_id is not None:
            self.image_id = image_id
        if organization_identifier is not None:
            self.organization_identifier = organization_identifier
        if permalink is not None:
            self.permalink = permalink
        if rank_ipo is not None:
            self.rank_ipo = rank_ipo
        if share_price is not None:
            self.share_price = share_price
        if shares_outstanding is not None:
            self.shares_outstanding = shares_outstanding
        if shares_sold is not None:
            self.shares_sold = shares_sold
        if short_description is not None:
            self.short_description = short_description
        if stock_exchange_symbol is not None:
            self.stock_exchange_symbol = stock_exchange_symbol
        if stock_full_symbol is not None:
            self.stock_full_symbol = stock_full_symbol
        if stock_symbol is not None:
            self.stock_symbol = stock_symbol
        if updated_at is not None:
            self.updated_at = updated_at
        if uuid is not None:
            self.uuid = uuid
        if valuation is not None:
            self.valuation = valuation
        if went_public_on is not None:
            self.went_public_on = went_public_on

    @property
    def amount_raised(self):
        """Gets the amount_raised of this Ipo.  # noqa: E501

        Total amount raised from the IPO\\ Field Type: money\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The amount_raised of this Ipo.  # noqa: E501
        :rtype: AllOfIpoAmountRaised
        """
        return self._amount_raised

    @amount_raised.setter
    def amount_raised(self, amount_raised):
        """Sets the amount_raised of this Ipo.

        Total amount raised from the IPO\\ Field Type: money\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param amount_raised: The amount_raised of this Ipo.  # noqa: E501
        :type: AllOfIpoAmountRaised
        """

        self._amount_raised = amount_raised

    @property
    def created_at(self):
        """Gets the created_at of this Ipo.  # noqa: E501

        Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The created_at of this Ipo.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Ipo.

        Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param created_at: The created_at of this Ipo.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def delisted_on(self):
        """Gets the delisted_on of this Ipo.  # noqa: E501

        Date when the organization delisted its stock\\ Field Type: date_precision\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The delisted_on of this Ipo.  # noqa: E501
        :rtype: AllOfIpoDelistedOn
        """
        return self._delisted_on

    @delisted_on.setter
    def delisted_on(self, delisted_on):
        """Sets the delisted_on of this Ipo.

        Date when the organization delisted its stock\\ Field Type: date_precision\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param delisted_on: The delisted_on of this Ipo.  # noqa: E501
        :type: AllOfIpoDelistedOn
        """

        self._delisted_on = delisted_on

    @property
    def entity_def_id(self):
        """Gets the entity_def_id of this Ipo.  # noqa: E501

        Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * ipo - Ipo   # noqa: E501

        :return: The entity_def_id of this Ipo.  # noqa: E501
        :rtype: str
        """
        return self._entity_def_id

    @entity_def_id.setter
    def entity_def_id(self, entity_def_id):
        """Sets the entity_def_id of this Ipo.

        Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * ipo - Ipo   # noqa: E501

        :param entity_def_id: The entity_def_id of this Ipo.  # noqa: E501
        :type: str
        """

        self._entity_def_id = entity_def_id

    @property
    def identifier(self):
        """Gets the identifier of this Ipo.  # noqa: E501

        Stock ticker symbol (e.g. AAPL, FB, TWTR)\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :return: The identifier of this Ipo.  # noqa: E501
        :rtype: AllOfIpoIdentifier
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this Ipo.

        Stock ticker symbol (e.g. AAPL, FB, TWTR)\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :param identifier: The identifier of this Ipo.  # noqa: E501
        :type: AllOfIpoIdentifier
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")  # noqa: E501

        self._identifier = identifier

    @property
    def image_id(self):
        """Gets the image_id of this Ipo.  # noqa: E501

        Field Type: image_id\\ Searchable: No   # noqa: E501

        :return: The image_id of this Ipo.  # noqa: E501
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this Ipo.

        Field Type: image_id\\ Searchable: No   # noqa: E501

        :param image_id: The image_id of this Ipo.  # noqa: E501
        :type: str
        """

        self._image_id = image_id

    @property
    def organization_identifier(self):
        """Gets the organization_identifier of this Ipo.  # noqa: E501

        Organization went public\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :return: The organization_identifier of this Ipo.  # noqa: E501
        :rtype: AllOfIpoOrganizationIdentifier
        """
        return self._organization_identifier

    @organization_identifier.setter
    def organization_identifier(self, organization_identifier):
        """Sets the organization_identifier of this Ipo.

        Organization went public\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :param organization_identifier: The organization_identifier of this Ipo.  # noqa: E501
        :type: AllOfIpoOrganizationIdentifier
        """

        self._organization_identifier = organization_identifier

    @property
    def permalink(self):
        """Gets the permalink of this Ipo.  # noqa: E501

        Field Type: permalink\\ Searchable: No   # noqa: E501

        :return: The permalink of this Ipo.  # noqa: E501
        :rtype: str
        """
        return self._permalink

    @permalink.setter
    def permalink(self, permalink):
        """Sets the permalink of this Ipo.

        Field Type: permalink\\ Searchable: No   # noqa: E501

        :param permalink: The permalink of this Ipo.  # noqa: E501
        :type: str
        """

        self._permalink = permalink

    @property
    def rank_ipo(self):
        """Gets the rank_ipo of this Ipo.  # noqa: E501

        Algorithmic rank assigned to the top 100,000 most active IPOs\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The rank_ipo of this Ipo.  # noqa: E501
        :rtype: float
        """
        return self._rank_ipo

    @rank_ipo.setter
    def rank_ipo(self, rank_ipo):
        """Sets the rank_ipo of this Ipo.

        Algorithmic rank assigned to the top 100,000 most active IPOs\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param rank_ipo: The rank_ipo of this Ipo.  # noqa: E501
        :type: float
        """

        self._rank_ipo = rank_ipo

    @property
    def share_price(self):
        """Gets the share_price of this Ipo.  # noqa: E501

        The share price for the stock at the time of IPO\\ Field Type: money_decimal\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The share_price of this Ipo.  # noqa: E501
        :rtype: AllOfIpoSharePrice
        """
        return self._share_price

    @share_price.setter
    def share_price(self, share_price):
        """Sets the share_price of this Ipo.

        The share price for the stock at the time of IPO\\ Field Type: money_decimal\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param share_price: The share_price of this Ipo.  # noqa: E501
        :type: AllOfIpoSharePrice
        """

        self._share_price = share_price

    @property
    def shares_outstanding(self):
        """Gets the shares_outstanding of this Ipo.  # noqa: E501

        Number of shares that were outstanding at the time of IPO\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The shares_outstanding of this Ipo.  # noqa: E501
        :rtype: float
        """
        return self._shares_outstanding

    @shares_outstanding.setter
    def shares_outstanding(self, shares_outstanding):
        """Sets the shares_outstanding of this Ipo.

        Number of shares that were outstanding at the time of IPO\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param shares_outstanding: The shares_outstanding of this Ipo.  # noqa: E501
        :type: float
        """

        self._shares_outstanding = shares_outstanding

    @property
    def shares_sold(self):
        """Gets the shares_sold of this Ipo.  # noqa: E501

        Number of shares sold at the time of IPO\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The shares_sold of this Ipo.  # noqa: E501
        :rtype: float
        """
        return self._shares_sold

    @shares_sold.setter
    def shares_sold(self, shares_sold):
        """Sets the shares_sold of this Ipo.

        Number of shares sold at the time of IPO\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param shares_sold: The shares_sold of this Ipo.  # noqa: E501
        :type: float
        """

        self._shares_sold = shares_sold

    @property
    def short_description(self):
        """Gets the short_description of this Ipo.  # noqa: E501

        Field Type: text_long\\ Searchable: Yes\\ Search Operators: blank, contains, not_contains   # noqa: E501

        :return: The short_description of this Ipo.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this Ipo.

        Field Type: text_long\\ Searchable: Yes\\ Search Operators: blank, contains, not_contains   # noqa: E501

        :param short_description: The short_description of this Ipo.  # noqa: E501
        :type: str
        """

        self._short_description = short_description

    @property
    def stock_exchange_symbol(self):
        """Gets the stock_exchange_symbol of this Ipo.  # noqa: E501

        Stock exchange where the Organization is listed (e.g. NYSE, NASDAQ)\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * adx - ADX - Abu Dhabi Securities Exchange  * afx - AFX - Afghanistan Stock Exchange  * altx - ALTX - ALTX East Africa Exchange  * amex - AMEX - American Stock Exchange  * ams - AMS - Euronext Amsterdam  * amx - AMX - Armenia Securities Exchange  * asce - ASCE - Abuja Securities and Commodities Exchange  * asx - ASX - Australian Securities Exchange  * ath - ATH - Athens Stock Exchange  * bcba - BCBA - Buenos Aires Stock Exchange  * bdp - BDP - Budapest Stock Exchange  * belex - BELEX - Belgrade Stock Exchange  * ber - BER - Berliner Börse  * bfb - BFB - Baku Stock Exchange  * bit - BIT - Italian Stock Exchange  * bkk - BKK - Thailand Stock Exchange  * blse - BLSE - Banja Luka Stock Exchange  * bme - BME - Madrid Stock Exchange  * bmv - BMV - Mexican Stock Exchange  * bom - BOM - Bombay Stock Exchange  * brvm - BRVM - Regional Securities Exchange SA  * bse - BSE - Bulgarian Stock Exchange  * bse_lb - BSE - Beirut Stock Exchange  * bsse - BSSE - Bratislava Stock Exchange  * bsx - BSX - Bermuda Stock Exchange  * bvb - BVB - Bucharest Stock Exchange  * bvc - BVC - Colombian Stock Exchange  * bvfb - BVFB - Belarusian Currency and Stock Exchange  * bvm - BVM - Montevideo Stock Exchange  * bvmf - B3 - Brazil Stock Exchange and OTC Market  * bvmt - BVMT - Tunis Stock Exchange  * bx - BX - Berne Stock Exchange  * cas - CAS - Casablanca Stock Exchange  * cise - CISE - Channel Islands Stock Exchange  * cnsx - CNSX - Canadian National Stock Exchange  * col - COL - Colombo Stock Exchange  * cph - CPH - Copenhagen Stock Exchange  * cse - CSE - Canadian Securities Exchange  * cse_cy - CSE - Cyprus Stock Exchange  * csx - CSX - Cambodia Securities Exchange  * cve - TSX-V - Toronto TSX Venture Exchange  * dfm - DFM - Dubai Financial Market  * dse - DSE - Dhaka Stock Exchange  * dsx - DSX - Douala Stock Exchange  * dus - DUS - Börse Düsseldorf  * ebr - EBR - Euronext Brussels  * egx - EGX - Egypt Stock Exchange  * eli - ELI - Euronext Lisbon  * epa - EPA - Euronext Paris  * etr - ETR - Deutsche Börse XETRA  * eurex - EUREX - Eurex Exchange  * fra - FRA - Frankfurt Stock Exchange  * fwb - FWB - Börse Frankfurt Stock Exchange  * gha - GHA - Ghana Stock Exchange  * gsx - GSX - Georgian Stock Exchange  * gsx_gi - GSX - Gibraltar Stock Exchange  * hel - HEL - Helsinki Stock Exchange  * hkg - HKG - Hong Kong Stock Exchange  * hnx - HNX - Hanoi Stock Exchange  * hose - HOSE - Ho Chi Minh Stock Exchange  * ice - ICE - Iceland Stock Exchange  * idx - IDX - Indonesia Stock Exchange  * iex - IEX - Investors Exchange  * ifb - IFB - Iran Fara Bourse  * ime - IME - Iran Mercantile Exchange  * irenex - IRENEX - Iran Energy Exchange  * ise - ISE - Irish Stock Exchange  * ist - IST - Istanbul Stock Exchange  * isx - ISX - Iraq Stock Exchange  * jp - JP - Japan Exchange  * jsc - JSC - Belarusian Currency and Stock Exchange  * jse - JSE - Johannesburg Stock Exchange  * jse_jam - JSE - Jamaica Stock Exchange  * kase - KASE - Kazakhstan Stock Exchange  * klse - KLSE - Malaysia Stock Exchange  * kosdaq - KOSDAQ - Korean Securities Dealers Automated Quotations  * krx - KRX - Korea Stock Exchange  * kse - KSE - Kuwait Stock Exchange  * lje - LJE - Ljubljana Stock Exchange  * lse - LSE - London Stock Exchange  * lsm - LSM - Libyan Stock Market  * lsx - LSX - Lao Securities Exchange  * luse - LuSE - Lusaka Securities Exchange  * luxse - LuxSE - Luxembourg Stock Exchange  * mal - MAL - Malta Stock Exchange  * mcx - MCX - Multi Commodity Exchange of India  * meff - MEFF - Mercado Spanish Financial Futures Market  * mnse - MNSE - Montenegro Stock Exchange  * moex - MOEX - Moscow Exchange  * mse - MSE - Metropolitan Stock Exchange  * mse_md - MSE - Moldova Stock Exchange  * mse_mk - MSE - Macedonian Stock Exchange  * msei - MSEI - Metropolitan Stock Exchange of India  * msm - MSM - Muscat Securities Market  * mun - MUN - Börse München  * nasdaq - NASDAQ  * nbo - NSE - Nairobi Securities Exchange  * neeq - NEEQ - National Equities Exchange and Quotations  * nepse - NEPSE - Nepal Stock Exchange  * nex - NEX - NEX Exchange  * ngm - NGM - Nordic Growth Market Exchange  * nig - NIG - Nigerian Stock Exchange  * notc - NOTC - Norwegian OTC  * npex - NPEX - NPEX Stock Exchange  * nse - NSE - National Stock Exchange of India  * nsx - NSX - National Stock Exchange of Australia  * nyse - NYSE - New York Stock Exchange  * nysearca - NYSEARCA - NYSE Arca  * nysemkt - NYSEAMERICAN - NYSE American  * nze - NZE - New Zealand Stock Exchange  * ose - OSE - Oslo Stock Exchange  * otcbb - OTCBB - FINRA OTC Bulletin Board  * otcpink - OTC Pink  * otcqb - OTCQB  * otcqx - OTCQX  * pdex - PDEx - Philippine Dealing Exchange  * pex - PEX - Palestine Exchange  * pfts - PFTS - PFTS Ukraine Stock Exchange  * pomsox - POMSoX - Port Moresby Stock Exchange  * prg - PRA - Prague Stock Exchange  * pse - PSE - Philippine Stock Exchange  * psx - PSX - Pakistan Stock Exchange  * qse - QSE - Qatar Stock Exchange  * rfb - RFB - Riga Stock Exchange  * rse - RSE - Rwanda Stock Exchange  * rsebl - RSEBL - Royal Securities Exchange of Bhutan  * sase - SASE - Sarajevo Stock Exchange  * sbx - SBX - BX Swiss  * sehk - SEHK - The Stock Exchange of Hong Kong  * sem - SEM - Stock Exchange of Mauritius  * sgbv - SGBV - Algiers Stock Exchange  * sgx - SGX - Singapore Stock Exchange  * six - SIX - SIX Swiss Exchange  * spbex - SPBEX - Saint Petersburg Stock Exchange  * spse - SPSE - South Pacific Stock Exchange  * sse - SSE - Shanghai Stock Exchange  * ssx - SSX - Sydney Stock Exchange  * sto - STO - Stockholm Stock Exchange  * stu - STU - Börse Stuttgart  * swx - SWX - SIX Swiss Exchange  * szse - SZSE - Shenzhen Stock Exchange  * tadawul - Tadawul - Saudi Stock Exchange  * tal - TSE - Tallinn Stock Exchange  * tfex - TFEX - Thailand Futures Exchange  * tise - TISE - The International Stock Exchange  * tlv - TLV - Tel Aviv Stock Exchange  * tpe - TWSE - Taiwan Stock Exchange  * tse_al - TSE - Tirana Stock Exchange  * tse_ir - TSE - Tehran Stock Exchange  * tsec - TWO - Taiwan OTC Exchange  * tsx - TSX - Toronto Stock Exchange  * ttse - TTSE - Trinidad and Tobago Stock Exchange  * tyo - TYO - Tokyo Stock Exchange  * use - USE - Uganda Securities Exchange  * ux - UX - Ukrainian Exchange  * vie - VIE - Vienna Stock Exchange  * vmf - VMF - Faroese Securities Market  * vse - VSE - Vancouver Stock Exchange  * wse - WSE - Warsaw Stock Exchange  * ysx - YSX - Yangon Stock Exchange  * zamace - ZAMACE - Zambian Commodity Exchange  * zse - ZSE - Zimbabwe Stock Exchange  * zse_hr - ZSE - Zagreb Stock Exchange   # noqa: E501

        :return: The stock_exchange_symbol of this Ipo.  # noqa: E501
        :rtype: str
        """
        return self._stock_exchange_symbol

    @stock_exchange_symbol.setter
    def stock_exchange_symbol(self, stock_exchange_symbol):
        """Sets the stock_exchange_symbol of this Ipo.

        Stock exchange where the Organization is listed (e.g. NYSE, NASDAQ)\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * adx - ADX - Abu Dhabi Securities Exchange  * afx - AFX - Afghanistan Stock Exchange  * altx - ALTX - ALTX East Africa Exchange  * amex - AMEX - American Stock Exchange  * ams - AMS - Euronext Amsterdam  * amx - AMX - Armenia Securities Exchange  * asce - ASCE - Abuja Securities and Commodities Exchange  * asx - ASX - Australian Securities Exchange  * ath - ATH - Athens Stock Exchange  * bcba - BCBA - Buenos Aires Stock Exchange  * bdp - BDP - Budapest Stock Exchange  * belex - BELEX - Belgrade Stock Exchange  * ber - BER - Berliner Börse  * bfb - BFB - Baku Stock Exchange  * bit - BIT - Italian Stock Exchange  * bkk - BKK - Thailand Stock Exchange  * blse - BLSE - Banja Luka Stock Exchange  * bme - BME - Madrid Stock Exchange  * bmv - BMV - Mexican Stock Exchange  * bom - BOM - Bombay Stock Exchange  * brvm - BRVM - Regional Securities Exchange SA  * bse - BSE - Bulgarian Stock Exchange  * bse_lb - BSE - Beirut Stock Exchange  * bsse - BSSE - Bratislava Stock Exchange  * bsx - BSX - Bermuda Stock Exchange  * bvb - BVB - Bucharest Stock Exchange  * bvc - BVC - Colombian Stock Exchange  * bvfb - BVFB - Belarusian Currency and Stock Exchange  * bvm - BVM - Montevideo Stock Exchange  * bvmf - B3 - Brazil Stock Exchange and OTC Market  * bvmt - BVMT - Tunis Stock Exchange  * bx - BX - Berne Stock Exchange  * cas - CAS - Casablanca Stock Exchange  * cise - CISE - Channel Islands Stock Exchange  * cnsx - CNSX - Canadian National Stock Exchange  * col - COL - Colombo Stock Exchange  * cph - CPH - Copenhagen Stock Exchange  * cse - CSE - Canadian Securities Exchange  * cse_cy - CSE - Cyprus Stock Exchange  * csx - CSX - Cambodia Securities Exchange  * cve - TSX-V - Toronto TSX Venture Exchange  * dfm - DFM - Dubai Financial Market  * dse - DSE - Dhaka Stock Exchange  * dsx - DSX - Douala Stock Exchange  * dus - DUS - Börse Düsseldorf  * ebr - EBR - Euronext Brussels  * egx - EGX - Egypt Stock Exchange  * eli - ELI - Euronext Lisbon  * epa - EPA - Euronext Paris  * etr - ETR - Deutsche Börse XETRA  * eurex - EUREX - Eurex Exchange  * fra - FRA - Frankfurt Stock Exchange  * fwb - FWB - Börse Frankfurt Stock Exchange  * gha - GHA - Ghana Stock Exchange  * gsx - GSX - Georgian Stock Exchange  * gsx_gi - GSX - Gibraltar Stock Exchange  * hel - HEL - Helsinki Stock Exchange  * hkg - HKG - Hong Kong Stock Exchange  * hnx - HNX - Hanoi Stock Exchange  * hose - HOSE - Ho Chi Minh Stock Exchange  * ice - ICE - Iceland Stock Exchange  * idx - IDX - Indonesia Stock Exchange  * iex - IEX - Investors Exchange  * ifb - IFB - Iran Fara Bourse  * ime - IME - Iran Mercantile Exchange  * irenex - IRENEX - Iran Energy Exchange  * ise - ISE - Irish Stock Exchange  * ist - IST - Istanbul Stock Exchange  * isx - ISX - Iraq Stock Exchange  * jp - JP - Japan Exchange  * jsc - JSC - Belarusian Currency and Stock Exchange  * jse - JSE - Johannesburg Stock Exchange  * jse_jam - JSE - Jamaica Stock Exchange  * kase - KASE - Kazakhstan Stock Exchange  * klse - KLSE - Malaysia Stock Exchange  * kosdaq - KOSDAQ - Korean Securities Dealers Automated Quotations  * krx - KRX - Korea Stock Exchange  * kse - KSE - Kuwait Stock Exchange  * lje - LJE - Ljubljana Stock Exchange  * lse - LSE - London Stock Exchange  * lsm - LSM - Libyan Stock Market  * lsx - LSX - Lao Securities Exchange  * luse - LuSE - Lusaka Securities Exchange  * luxse - LuxSE - Luxembourg Stock Exchange  * mal - MAL - Malta Stock Exchange  * mcx - MCX - Multi Commodity Exchange of India  * meff - MEFF - Mercado Spanish Financial Futures Market  * mnse - MNSE - Montenegro Stock Exchange  * moex - MOEX - Moscow Exchange  * mse - MSE - Metropolitan Stock Exchange  * mse_md - MSE - Moldova Stock Exchange  * mse_mk - MSE - Macedonian Stock Exchange  * msei - MSEI - Metropolitan Stock Exchange of India  * msm - MSM - Muscat Securities Market  * mun - MUN - Börse München  * nasdaq - NASDAQ  * nbo - NSE - Nairobi Securities Exchange  * neeq - NEEQ - National Equities Exchange and Quotations  * nepse - NEPSE - Nepal Stock Exchange  * nex - NEX - NEX Exchange  * ngm - NGM - Nordic Growth Market Exchange  * nig - NIG - Nigerian Stock Exchange  * notc - NOTC - Norwegian OTC  * npex - NPEX - NPEX Stock Exchange  * nse - NSE - National Stock Exchange of India  * nsx - NSX - National Stock Exchange of Australia  * nyse - NYSE - New York Stock Exchange  * nysearca - NYSEARCA - NYSE Arca  * nysemkt - NYSEAMERICAN - NYSE American  * nze - NZE - New Zealand Stock Exchange  * ose - OSE - Oslo Stock Exchange  * otcbb - OTCBB - FINRA OTC Bulletin Board  * otcpink - OTC Pink  * otcqb - OTCQB  * otcqx - OTCQX  * pdex - PDEx - Philippine Dealing Exchange  * pex - PEX - Palestine Exchange  * pfts - PFTS - PFTS Ukraine Stock Exchange  * pomsox - POMSoX - Port Moresby Stock Exchange  * prg - PRA - Prague Stock Exchange  * pse - PSE - Philippine Stock Exchange  * psx - PSX - Pakistan Stock Exchange  * qse - QSE - Qatar Stock Exchange  * rfb - RFB - Riga Stock Exchange  * rse - RSE - Rwanda Stock Exchange  * rsebl - RSEBL - Royal Securities Exchange of Bhutan  * sase - SASE - Sarajevo Stock Exchange  * sbx - SBX - BX Swiss  * sehk - SEHK - The Stock Exchange of Hong Kong  * sem - SEM - Stock Exchange of Mauritius  * sgbv - SGBV - Algiers Stock Exchange  * sgx - SGX - Singapore Stock Exchange  * six - SIX - SIX Swiss Exchange  * spbex - SPBEX - Saint Petersburg Stock Exchange  * spse - SPSE - South Pacific Stock Exchange  * sse - SSE - Shanghai Stock Exchange  * ssx - SSX - Sydney Stock Exchange  * sto - STO - Stockholm Stock Exchange  * stu - STU - Börse Stuttgart  * swx - SWX - SIX Swiss Exchange  * szse - SZSE - Shenzhen Stock Exchange  * tadawul - Tadawul - Saudi Stock Exchange  * tal - TSE - Tallinn Stock Exchange  * tfex - TFEX - Thailand Futures Exchange  * tise - TISE - The International Stock Exchange  * tlv - TLV - Tel Aviv Stock Exchange  * tpe - TWSE - Taiwan Stock Exchange  * tse_al - TSE - Tirana Stock Exchange  * tse_ir - TSE - Tehran Stock Exchange  * tsec - TWO - Taiwan OTC Exchange  * tsx - TSX - Toronto Stock Exchange  * ttse - TTSE - Trinidad and Tobago Stock Exchange  * tyo - TYO - Tokyo Stock Exchange  * use - USE - Uganda Securities Exchange  * ux - UX - Ukrainian Exchange  * vie - VIE - Vienna Stock Exchange  * vmf - VMF - Faroese Securities Market  * vse - VSE - Vancouver Stock Exchange  * wse - WSE - Warsaw Stock Exchange  * ysx - YSX - Yangon Stock Exchange  * zamace - ZAMACE - Zambian Commodity Exchange  * zse - ZSE - Zimbabwe Stock Exchange  * zse_hr - ZSE - Zagreb Stock Exchange   # noqa: E501

        :param stock_exchange_symbol: The stock_exchange_symbol of this Ipo.  # noqa: E501
        :type: str
        """

        self._stock_exchange_symbol = stock_exchange_symbol

    @property
    def stock_full_symbol(self):
        """Gets the stock_full_symbol of this Ipo.  # noqa: E501

        Field Type: text_blob\\ Searchable: No   # noqa: E501

        :return: The stock_full_symbol of this Ipo.  # noqa: E501
        :rtype: str
        """
        return self._stock_full_symbol

    @stock_full_symbol.setter
    def stock_full_symbol(self, stock_full_symbol):
        """Sets the stock_full_symbol of this Ipo.

        Field Type: text_blob\\ Searchable: No   # noqa: E501

        :param stock_full_symbol: The stock_full_symbol of this Ipo.  # noqa: E501
        :type: str
        """

        self._stock_full_symbol = stock_full_symbol

    @property
    def stock_symbol(self):
        """Gets the stock_symbol of this Ipo.  # noqa: E501

        Stock ticker symbol (e.g. AAPL, FB, TWTR)\\ Field Type: text_short\\ Searchable: Yes\\ Search Operators: blank, contains, eq, not_contains, not_eq, starts   # noqa: E501

        :return: The stock_symbol of this Ipo.  # noqa: E501
        :rtype: str
        """
        return self._stock_symbol

    @stock_symbol.setter
    def stock_symbol(self, stock_symbol):
        """Sets the stock_symbol of this Ipo.

        Stock ticker symbol (e.g. AAPL, FB, TWTR)\\ Field Type: text_short\\ Searchable: Yes\\ Search Operators: blank, contains, eq, not_contains, not_eq, starts   # noqa: E501

        :param stock_symbol: The stock_symbol of this Ipo.  # noqa: E501
        :type: str
        """

        self._stock_symbol = stock_symbol

    @property
    def updated_at(self):
        """Gets the updated_at of this Ipo.  # noqa: E501

        Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The updated_at of this Ipo.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Ipo.

        Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param updated_at: The updated_at of this Ipo.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def uuid(self):
        """Gets the uuid of this Ipo.  # noqa: E501

        Field Type: uuid\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes   # noqa: E501

        :return: The uuid of this Ipo.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Ipo.

        Field Type: uuid\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes   # noqa: E501

        :param uuid: The uuid of this Ipo.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def valuation(self):
        """Gets the valuation of this Ipo.  # noqa: E501

        Valuation of the Organization at IPO\\ Field Type: money\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The valuation of this Ipo.  # noqa: E501
        :rtype: AllOfIpoValuation
        """
        return self._valuation

    @valuation.setter
    def valuation(self, valuation):
        """Sets the valuation of this Ipo.

        Valuation of the Organization at IPO\\ Field Type: money\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param valuation: The valuation of this Ipo.  # noqa: E501
        :type: AllOfIpoValuation
        """

        self._valuation = valuation

    @property
    def went_public_on(self):
        """Gets the went_public_on of this Ipo.  # noqa: E501

        Date the Organization went public\\ Field Type: date\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The went_public_on of this Ipo.  # noqa: E501
        :rtype: date
        """
        return self._went_public_on

    @went_public_on.setter
    def went_public_on(self, went_public_on):
        """Sets the went_public_on of this Ipo.

        Date the Organization went public\\ Field Type: date\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param went_public_on: The went_public_on of this Ipo.  # noqa: E501
        :type: date
        """

        self._went_public_on = went_public_on

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Ipo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Ipo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
