# coding: utf-8

"""
    Crunchbase Enterprise API

    Crunchbase Enterprise API, 2021-07-16  # noqa: E501

    OpenAPI spec version: 1.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Person(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aliases': 'list[str]',
        'born_on': 'date',
        'created_at': 'datetime',
        'description': 'str',
        'died_on': 'date',
        'entity_def_id': 'str',
        'facebook': 'AllOfPersonFacebook',
        'facet_ids': 'list[str]',
        'first_name': 'str',
        'gender': 'str',
        'identifier': 'AllOfPersonIdentifier',
        'image_id': 'str',
        'image_url': 'str',
        'investor_stage': 'list[str]',
        'investor_type': 'list[str]',
        'last_name': 'str',
        'layout_id': 'str',
        'linkedin': 'AllOfPersonLinkedin',
        'location_group_identifiers': 'list[EntityIdentifier]',
        'location_identifiers': 'list[LocationIdentifier]',
        'middle_name': 'str',
        'name': 'str',
        'num_articles': 'float',
        'num_current_advisor_jobs': 'float',
        'num_current_jobs': 'float',
        'num_diversity_spotlight_investments': 'float',
        'num_event_appearances': 'float',
        'num_exits': 'float',
        'num_exits_ipo': 'float',
        'num_founded_organizations': 'float',
        'num_investments': 'float',
        'num_jobs': 'float',
        'num_lead_investments': 'float',
        'num_partner_investments': 'float',
        'num_past_advisor_jobs': 'float',
        'num_past_jobs': 'float',
        'num_portfolio_organizations': 'float',
        'override_layout_id': 'str',
        'permalink': 'str',
        'permalink_aliases': 'list[str]',
        'primary_job_title': 'str',
        'primary_organization': 'AllOfPersonPrimaryOrganization',
        'rank_delta_d30': 'float',
        'rank_delta_d7': 'float',
        'rank_delta_d90': 'float',
        'rank_person': 'float',
        'rank_principal': 'float',
        'short_description': 'str',
        'twitter': 'AllOfPersonTwitter',
        'updated_at': 'datetime',
        'uuid': 'str',
        'website': 'AllOfPersonWebsite',
        'website_url': 'str'
    }

    attribute_map = {
        'aliases': 'aliases',
        'born_on': 'born_on',
        'created_at': 'created_at',
        'description': 'description',
        'died_on': 'died_on',
        'entity_def_id': 'entity_def_id',
        'facebook': 'facebook',
        'facet_ids': 'facet_ids',
        'first_name': 'first_name',
        'gender': 'gender',
        'identifier': 'identifier',
        'image_id': 'image_id',
        'image_url': 'image_url',
        'investor_stage': 'investor_stage',
        'investor_type': 'investor_type',
        'last_name': 'last_name',
        'layout_id': 'layout_id',
        'linkedin': 'linkedin',
        'location_group_identifiers': 'location_group_identifiers',
        'location_identifiers': 'location_identifiers',
        'middle_name': 'middle_name',
        'name': 'name',
        'num_articles': 'num_articles',
        'num_current_advisor_jobs': 'num_current_advisor_jobs',
        'num_current_jobs': 'num_current_jobs',
        'num_diversity_spotlight_investments': 'num_diversity_spotlight_investments',
        'num_event_appearances': 'num_event_appearances',
        'num_exits': 'num_exits',
        'num_exits_ipo': 'num_exits_ipo',
        'num_founded_organizations': 'num_founded_organizations',
        'num_investments': 'num_investments',
        'num_jobs': 'num_jobs',
        'num_lead_investments': 'num_lead_investments',
        'num_partner_investments': 'num_partner_investments',
        'num_past_advisor_jobs': 'num_past_advisor_jobs',
        'num_past_jobs': 'num_past_jobs',
        'num_portfolio_organizations': 'num_portfolio_organizations',
        'override_layout_id': 'override_layout_id',
        'permalink': 'permalink',
        'permalink_aliases': 'permalink_aliases',
        'primary_job_title': 'primary_job_title',
        'primary_organization': 'primary_organization',
        'rank_delta_d30': 'rank_delta_d30',
        'rank_delta_d7': 'rank_delta_d7',
        'rank_delta_d90': 'rank_delta_d90',
        'rank_person': 'rank_person',
        'rank_principal': 'rank_principal',
        'short_description': 'short_description',
        'twitter': 'twitter',
        'updated_at': 'updated_at',
        'uuid': 'uuid',
        'website': 'website',
        'website_url': 'website_url'
    }

    def __init__(self, aliases=None, born_on=None, created_at=None, description=None, died_on=None, entity_def_id=None, facebook=None, facet_ids=None, first_name=None, gender=None, identifier=None, image_id=None, image_url=None, investor_stage=None, investor_type=None, last_name=None, layout_id=None, linkedin=None, location_group_identifiers=None, location_identifiers=None, middle_name=None, name=None, num_articles=None, num_current_advisor_jobs=None, num_current_jobs=None, num_diversity_spotlight_investments=None, num_event_appearances=None, num_exits=None, num_exits_ipo=None, num_founded_organizations=None, num_investments=None, num_jobs=None, num_lead_investments=None, num_partner_investments=None, num_past_advisor_jobs=None, num_past_jobs=None, num_portfolio_organizations=None, override_layout_id=None, permalink=None, permalink_aliases=None, primary_job_title=None, primary_organization=None, rank_delta_d30=None, rank_delta_d7=None, rank_delta_d90=None, rank_person=None, rank_principal=None, short_description=None, twitter=None, updated_at=None, uuid=None, website=None, website_url=None):  # noqa: E501
        """Person - a model defined in Swagger"""  # noqa: E501
        self._aliases = None
        self._born_on = None
        self._created_at = None
        self._description = None
        self._died_on = None
        self._entity_def_id = None
        self._facebook = None
        self._facet_ids = None
        self._first_name = None
        self._gender = None
        self._identifier = None
        self._image_id = None
        self._image_url = None
        self._investor_stage = None
        self._investor_type = None
        self._last_name = None
        self._layout_id = None
        self._linkedin = None
        self._location_group_identifiers = None
        self._location_identifiers = None
        self._middle_name = None
        self._name = None
        self._num_articles = None
        self._num_current_advisor_jobs = None
        self._num_current_jobs = None
        self._num_diversity_spotlight_investments = None
        self._num_event_appearances = None
        self._num_exits = None
        self._num_exits_ipo = None
        self._num_founded_organizations = None
        self._num_investments = None
        self._num_jobs = None
        self._num_lead_investments = None
        self._num_partner_investments = None
        self._num_past_advisor_jobs = None
        self._num_past_jobs = None
        self._num_portfolio_organizations = None
        self._override_layout_id = None
        self._permalink = None
        self._permalink_aliases = None
        self._primary_job_title = None
        self._primary_organization = None
        self._rank_delta_d30 = None
        self._rank_delta_d7 = None
        self._rank_delta_d90 = None
        self._rank_person = None
        self._rank_principal = None
        self._short_description = None
        self._twitter = None
        self._updated_at = None
        self._uuid = None
        self._website = None
        self._website_url = None
        self.discriminator = None
        if aliases is not None:
            self.aliases = aliases
        if born_on is not None:
            self.born_on = born_on
        if created_at is not None:
            self.created_at = created_at
        if description is not None:
            self.description = description
        if died_on is not None:
            self.died_on = died_on
        if entity_def_id is not None:
            self.entity_def_id = entity_def_id
        if facebook is not None:
            self.facebook = facebook
        if facet_ids is not None:
            self.facet_ids = facet_ids
        if first_name is not None:
            self.first_name = first_name
        if gender is not None:
            self.gender = gender
        self.identifier = identifier
        if image_id is not None:
            self.image_id = image_id
        if image_url is not None:
            self.image_url = image_url
        if investor_stage is not None:
            self.investor_stage = investor_stage
        if investor_type is not None:
            self.investor_type = investor_type
        if last_name is not None:
            self.last_name = last_name
        if layout_id is not None:
            self.layout_id = layout_id
        if linkedin is not None:
            self.linkedin = linkedin
        if location_group_identifiers is not None:
            self.location_group_identifiers = location_group_identifiers
        if location_identifiers is not None:
            self.location_identifiers = location_identifiers
        if middle_name is not None:
            self.middle_name = middle_name
        if name is not None:
            self.name = name
        if num_articles is not None:
            self.num_articles = num_articles
        if num_current_advisor_jobs is not None:
            self.num_current_advisor_jobs = num_current_advisor_jobs
        if num_current_jobs is not None:
            self.num_current_jobs = num_current_jobs
        if num_diversity_spotlight_investments is not None:
            self.num_diversity_spotlight_investments = num_diversity_spotlight_investments
        if num_event_appearances is not None:
            self.num_event_appearances = num_event_appearances
        if num_exits is not None:
            self.num_exits = num_exits
        if num_exits_ipo is not None:
            self.num_exits_ipo = num_exits_ipo
        if num_founded_organizations is not None:
            self.num_founded_organizations = num_founded_organizations
        if num_investments is not None:
            self.num_investments = num_investments
        if num_jobs is not None:
            self.num_jobs = num_jobs
        if num_lead_investments is not None:
            self.num_lead_investments = num_lead_investments
        if num_partner_investments is not None:
            self.num_partner_investments = num_partner_investments
        if num_past_advisor_jobs is not None:
            self.num_past_advisor_jobs = num_past_advisor_jobs
        if num_past_jobs is not None:
            self.num_past_jobs = num_past_jobs
        if num_portfolio_organizations is not None:
            self.num_portfolio_organizations = num_portfolio_organizations
        if override_layout_id is not None:
            self.override_layout_id = override_layout_id
        if permalink is not None:
            self.permalink = permalink
        if permalink_aliases is not None:
            self.permalink_aliases = permalink_aliases
        if primary_job_title is not None:
            self.primary_job_title = primary_job_title
        if primary_organization is not None:
            self.primary_organization = primary_organization
        if rank_delta_d30 is not None:
            self.rank_delta_d30 = rank_delta_d30
        if rank_delta_d7 is not None:
            self.rank_delta_d7 = rank_delta_d7
        if rank_delta_d90 is not None:
            self.rank_delta_d90 = rank_delta_d90
        if rank_person is not None:
            self.rank_person = rank_person
        if rank_principal is not None:
            self.rank_principal = rank_principal
        if short_description is not None:
            self.short_description = short_description
        if twitter is not None:
            self.twitter = twitter
        if updated_at is not None:
            self.updated_at = updated_at
        if uuid is not None:
            self.uuid = uuid
        if website is not None:
            self.website = website
        if website_url is not None:
            self.website_url = website_url

    @property
    def aliases(self):
        """Gets the aliases of this Person.  # noqa: E501

        Alternate or previous names for the individual\\ Field Type: text_short_multi\\ Searchable: Yes\\ Search Operators: blank, contains, eq, not_contains, not_eq, starts   # noqa: E501

        :return: The aliases of this Person.  # noqa: E501
        :rtype: list[str]
        """
        return self._aliases

    @aliases.setter
    def aliases(self, aliases):
        """Sets the aliases of this Person.

        Alternate or previous names for the individual\\ Field Type: text_short_multi\\ Searchable: Yes\\ Search Operators: blank, contains, eq, not_contains, not_eq, starts   # noqa: E501

        :param aliases: The aliases of this Person.  # noqa: E501
        :type: list[str]
        """

        self._aliases = aliases

    @property
    def born_on(self):
        """Gets the born_on of this Person.  # noqa: E501

        The birthdate of the person\\ Field Type: date\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The born_on of this Person.  # noqa: E501
        :rtype: date
        """
        return self._born_on

    @born_on.setter
    def born_on(self, born_on):
        """Sets the born_on of this Person.

        The birthdate of the person\\ Field Type: date\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param born_on: The born_on of this Person.  # noqa: E501
        :type: date
        """

        self._born_on = born_on

    @property
    def created_at(self):
        """Gets the created_at of this Person.  # noqa: E501

        Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The created_at of this Person.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Person.

        Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param created_at: The created_at of this Person.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this Person.  # noqa: E501

        Text from a Person's biography\\ Field Type: text_long\\ Searchable: Yes\\ Search Operators: blank, contains, not_contains   # noqa: E501

        :return: The description of this Person.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Person.

        Text from a Person's biography\\ Field Type: text_long\\ Searchable: Yes\\ Search Operators: blank, contains, not_contains   # noqa: E501

        :param description: The description of this Person.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def died_on(self):
        """Gets the died_on of this Person.  # noqa: E501

        The date when a person died\\ Field Type: date\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The died_on of this Person.  # noqa: E501
        :rtype: date
        """
        return self._died_on

    @died_on.setter
    def died_on(self, died_on):
        """Sets the died_on of this Person.

        The date when a person died\\ Field Type: date\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param died_on: The died_on of this Person.  # noqa: E501
        :type: date
        """

        self._died_on = died_on

    @property
    def entity_def_id(self):
        """Gets the entity_def_id of this Person.  # noqa: E501

        Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * person - Person   # noqa: E501

        :return: The entity_def_id of this Person.  # noqa: E501
        :rtype: str
        """
        return self._entity_def_id

    @entity_def_id.setter
    def entity_def_id(self, entity_def_id):
        """Sets the entity_def_id of this Person.

        Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * person - Person   # noqa: E501

        :param entity_def_id: The entity_def_id of this Person.  # noqa: E501
        :type: str
        """

        self._entity_def_id = entity_def_id

    @property
    def facebook(self):
        """Gets the facebook of this Person.  # noqa: E501

        Link to a Person's Facebook page\\ Field Type: link\\ Searchable: No   # noqa: E501

        :return: The facebook of this Person.  # noqa: E501
        :rtype: AllOfPersonFacebook
        """
        return self._facebook

    @facebook.setter
    def facebook(self, facebook):
        """Sets the facebook of this Person.

        Link to a Person's Facebook page\\ Field Type: link\\ Searchable: No   # noqa: E501

        :param facebook: The facebook of this Person.  # noqa: E501
        :type: AllOfPersonFacebook
        """

        self._facebook = facebook

    @property
    def facet_ids(self):
        """Gets the facet_ids of this Person.  # noqa: E501

        Field Type: enum_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :return: The facet_ids of this Person.  # noqa: E501
        :rtype: list[str]
        """
        return self._facet_ids

    @facet_ids.setter
    def facet_ids(self, facet_ids):
        """Sets the facet_ids of this Person.

        Field Type: enum_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :param facet_ids: The facet_ids of this Person.  # noqa: E501
        :type: list[str]
        """

        self._facet_ids = facet_ids

    @property
    def first_name(self):
        """Gets the first_name of this Person.  # noqa: E501

        First name of a Person\\ Field Type: text_short\\ Searchable: Yes\\ Search Operators: blank, contains, eq, not_contains, not_eq, starts   # noqa: E501

        :return: The first_name of this Person.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Person.

        First name of a Person\\ Field Type: text_short\\ Searchable: Yes\\ Search Operators: blank, contains, eq, not_contains, not_eq, starts   # noqa: E501

        :param first_name: The first_name of this Person.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def gender(self):
        """Gets the gender of this Person.  # noqa: E501

        A Person's gender\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * agender - Agender  * androgyne - Androgyne  * androgynous - Androgynous  * bigender - Bigender  * female - Female  * ftm - Female to Male (FTM)  * gender_fluid - Gender Fluid  * gender_nonconforming - Gender Nonconforming  * gender_questioning - Gender Questioning  * gender_variant - Gender Variant  * genderqueer - Genderqueer  * male - Male  * mtf - Male to Female (MTF)  * neutrois - Neutrois  * non_binary - Non-Binary  * not_provided - Prefer not to identify  * other - Other  * pangender - Pangender  * transfeminine - Transfeminine  * transgender_female - Transgender Female  * transgender_male - Transgender Male  * transgender_man - Transgender Man  * transgender_person - Transgender Person  * transgender_woman - Transgender Woman  * transmasculine - Transmasculine  * transsexual_female - Transsexual Female  * transsexual_male - Transsexual Male  * transsexual_man - Transsexual Man  * transsexual_person - Transsexual Person  * transsexual_woman - Transsexual Woman  * two_spirit - Two-Spirit   # noqa: E501

        :return: The gender of this Person.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Person.

        A Person's gender\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * agender - Agender  * androgyne - Androgyne  * androgynous - Androgynous  * bigender - Bigender  * female - Female  * ftm - Female to Male (FTM)  * gender_fluid - Gender Fluid  * gender_nonconforming - Gender Nonconforming  * gender_questioning - Gender Questioning  * gender_variant - Gender Variant  * genderqueer - Genderqueer  * male - Male  * mtf - Male to Female (MTF)  * neutrois - Neutrois  * non_binary - Non-Binary  * not_provided - Prefer not to identify  * other - Other  * pangender - Pangender  * transfeminine - Transfeminine  * transgender_female - Transgender Female  * transgender_male - Transgender Male  * transgender_man - Transgender Man  * transgender_person - Transgender Person  * transgender_woman - Transgender Woman  * transmasculine - Transmasculine  * transsexual_female - Transsexual Female  * transsexual_male - Transsexual Male  * transsexual_man - Transsexual Man  * transsexual_person - Transsexual Person  * transsexual_woman - Transsexual Woman  * two_spirit - Two-Spirit   # noqa: E501

        :param gender: The gender of this Person.  # noqa: E501
        :type: str
        """

        self._gender = gender

    @property
    def identifier(self):
        """Gets the identifier of this Person.  # noqa: E501

        First and last name of a Person\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :return: The identifier of this Person.  # noqa: E501
        :rtype: AllOfPersonIdentifier
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this Person.

        First and last name of a Person\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :param identifier: The identifier of this Person.  # noqa: E501
        :type: AllOfPersonIdentifier
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")  # noqa: E501

        self._identifier = identifier

    @property
    def image_id(self):
        """Gets the image_id of this Person.  # noqa: E501

        The profile image of the person on Crunchbase\\ Field Type: image_id\\ Searchable: No   # noqa: E501

        :return: The image_id of this Person.  # noqa: E501
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this Person.

        The profile image of the person on Crunchbase\\ Field Type: image_id\\ Searchable: No   # noqa: E501

        :param image_id: The image_id of this Person.  # noqa: E501
        :type: str
        """

        self._image_id = image_id

    @property
    def image_url(self):
        """Gets the image_url of this Person.  # noqa: E501

        The cloudinary url of the profile image\\ Field Type: text_blob\\ Searchable: No   # noqa: E501

        :return: The image_url of this Person.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this Person.

        The cloudinary url of the profile image\\ Field Type: text_blob\\ Searchable: No   # noqa: E501

        :param image_url: The image_url of this Person.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def investor_stage(self):
        """Gets the investor_stage of this Person.  # noqa: E501

        This describes the stage of investor this person is (e.g. Angel, Fund of Funds, Venture Capital)\\ Field Type: enum_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :return: The investor_stage of this Person.  # noqa: E501
        :rtype: list[str]
        """
        return self._investor_stage

    @investor_stage.setter
    def investor_stage(self, investor_stage):
        """Sets the investor_stage of this Person.

        This describes the stage of investor this person is (e.g. Angel, Fund of Funds, Venture Capital)\\ Field Type: enum_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :param investor_stage: The investor_stage of this Person.  # noqa: E501
        :type: list[str]
        """

        self._investor_stage = investor_stage

    @property
    def investor_type(self):
        """Gets the investor_type of this Person.  # noqa: E501

        This describes the type of investor the person is (e.g. Angel, Fund of Funds, Venture Capital)\\ Field Type: enum_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :return: The investor_type of this Person.  # noqa: E501
        :rtype: list[str]
        """
        return self._investor_type

    @investor_type.setter
    def investor_type(self, investor_type):
        """Sets the investor_type of this Person.

        This describes the type of investor the person is (e.g. Angel, Fund of Funds, Venture Capital)\\ Field Type: enum_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :param investor_type: The investor_type of this Person.  # noqa: E501
        :type: list[str]
        """

        self._investor_type = investor_type

    @property
    def last_name(self):
        """Gets the last_name of this Person.  # noqa: E501

        Last name of a Person\\ Field Type: text_short\\ Searchable: Yes\\ Search Operators: blank, contains, eq, not_contains, not_eq, starts   # noqa: E501

        :return: The last_name of this Person.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Person.

        Last name of a Person\\ Field Type: text_short\\ Searchable: Yes\\ Search Operators: blank, contains, eq, not_contains, not_eq, starts   # noqa: E501

        :param last_name: The last_name of this Person.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def layout_id(self):
        """Gets the layout_id of this Person.  # noqa: E501

        This is the auto-generated layout for the profile\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * investor - Investor Layout   # noqa: E501

        :return: The layout_id of this Person.  # noqa: E501
        :rtype: str
        """
        return self._layout_id

    @layout_id.setter
    def layout_id(self, layout_id):
        """Sets the layout_id of this Person.

        This is the auto-generated layout for the profile\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * investor - Investor Layout   # noqa: E501

        :param layout_id: The layout_id of this Person.  # noqa: E501
        :type: str
        """

        self._layout_id = layout_id

    @property
    def linkedin(self):
        """Gets the linkedin of this Person.  # noqa: E501

        Link to a Person's LinkedIn page\\ Field Type: link\\ Searchable: No   # noqa: E501

        :return: The linkedin of this Person.  # noqa: E501
        :rtype: AllOfPersonLinkedin
        """
        return self._linkedin

    @linkedin.setter
    def linkedin(self, linkedin):
        """Sets the linkedin of this Person.

        Link to a Person's LinkedIn page\\ Field Type: link\\ Searchable: No   # noqa: E501

        :param linkedin: The linkedin of this Person.  # noqa: E501
        :type: AllOfPersonLinkedin
        """

        self._linkedin = linkedin

    @property
    def location_group_identifiers(self):
        """Gets the location_group_identifiers of this Person.  # noqa: E501

        Where the person is located (e.g. San Francisco Bay Area, Silicon Valley)\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :return: The location_group_identifiers of this Person.  # noqa: E501
        :rtype: list[EntityIdentifier]
        """
        return self._location_group_identifiers

    @location_group_identifiers.setter
    def location_group_identifiers(self, location_group_identifiers):
        """Sets the location_group_identifiers of this Person.

        Where the person is located (e.g. San Francisco Bay Area, Silicon Valley)\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :param location_group_identifiers: The location_group_identifiers of this Person.  # noqa: E501
        :type: list[EntityIdentifier]
        """

        self._location_group_identifiers = location_group_identifiers

    @property
    def location_identifiers(self):
        """Gets the location_identifiers of this Person.  # noqa: E501

        Where the person is located (e.g. Europe, Menlo Park, China)\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :return: The location_identifiers of this Person.  # noqa: E501
        :rtype: list[LocationIdentifier]
        """
        return self._location_identifiers

    @location_identifiers.setter
    def location_identifiers(self, location_identifiers):
        """Sets the location_identifiers of this Person.

        Where the person is located (e.g. Europe, Menlo Park, China)\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :param location_identifiers: The location_identifiers of this Person.  # noqa: E501
        :type: list[LocationIdentifier]
        """

        self._location_identifiers = location_identifiers

    @property
    def middle_name(self):
        """Gets the middle_name of this Person.  # noqa: E501

        Middle name of a Person\\ Field Type: text_blob\\ Searchable: No   # noqa: E501

        :return: The middle_name of this Person.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this Person.

        Middle name of a Person\\ Field Type: text_blob\\ Searchable: No   # noqa: E501

        :param middle_name: The middle_name of this Person.  # noqa: E501
        :type: str
        """

        self._middle_name = middle_name

    @property
    def name(self):
        """Gets the name of this Person.  # noqa: E501

        Full name of a Person\\ Field Type: text_blob\\ Searchable: No   # noqa: E501

        :return: The name of this Person.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Person.

        Full name of a Person\\ Field Type: text_blob\\ Searchable: No   # noqa: E501

        :param name: The name of this Person.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def num_articles(self):
        """Gets the num_articles of this Person.  # noqa: E501

        Number of news articles that reference the Person\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The num_articles of this Person.  # noqa: E501
        :rtype: float
        """
        return self._num_articles

    @num_articles.setter
    def num_articles(self, num_articles):
        """Sets the num_articles of this Person.

        Number of news articles that reference the Person\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param num_articles: The num_articles of this Person.  # noqa: E501
        :type: float
        """

        self._num_articles = num_articles

    @property
    def num_current_advisor_jobs(self):
        """Gets the num_current_advisor_jobs of this Person.  # noqa: E501

        Total number of current Advisors and Board roles the person has\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The num_current_advisor_jobs of this Person.  # noqa: E501
        :rtype: float
        """
        return self._num_current_advisor_jobs

    @num_current_advisor_jobs.setter
    def num_current_advisor_jobs(self, num_current_advisor_jobs):
        """Sets the num_current_advisor_jobs of this Person.

        Total number of current Advisors and Board roles the person has\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param num_current_advisor_jobs: The num_current_advisor_jobs of this Person.  # noqa: E501
        :type: float
        """

        self._num_current_advisor_jobs = num_current_advisor_jobs

    @property
    def num_current_jobs(self):
        """Gets the num_current_jobs of this Person.  # noqa: E501

        Total number of current Jobs the person has\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The num_current_jobs of this Person.  # noqa: E501
        :rtype: float
        """
        return self._num_current_jobs

    @num_current_jobs.setter
    def num_current_jobs(self, num_current_jobs):
        """Sets the num_current_jobs of this Person.

        Total number of current Jobs the person has\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param num_current_jobs: The num_current_jobs of this Person.  # noqa: E501
        :type: float
        """

        self._num_current_jobs = num_current_jobs

    @property
    def num_diversity_spotlight_investments(self):
        """Gets the num_diversity_spotlight_investments of this Person.  # noqa: E501

        Total number of diversity investments made by an investor\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The num_diversity_spotlight_investments of this Person.  # noqa: E501
        :rtype: float
        """
        return self._num_diversity_spotlight_investments

    @num_diversity_spotlight_investments.setter
    def num_diversity_spotlight_investments(self, num_diversity_spotlight_investments):
        """Sets the num_diversity_spotlight_investments of this Person.

        Total number of diversity investments made by an investor\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param num_diversity_spotlight_investments: The num_diversity_spotlight_investments of this Person.  # noqa: E501
        :type: float
        """

        self._num_diversity_spotlight_investments = num_diversity_spotlight_investments

    @property
    def num_event_appearances(self):
        """Gets the num_event_appearances of this Person.  # noqa: E501

        Total number of events the individual appeared in\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The num_event_appearances of this Person.  # noqa: E501
        :rtype: float
        """
        return self._num_event_appearances

    @num_event_appearances.setter
    def num_event_appearances(self, num_event_appearances):
        """Sets the num_event_appearances of this Person.

        Total number of events the individual appeared in\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param num_event_appearances: The num_event_appearances of this Person.  # noqa: E501
        :type: float
        """

        self._num_event_appearances = num_event_appearances

    @property
    def num_exits(self):
        """Gets the num_exits of this Person.  # noqa: E501

        Total number of Exits\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The num_exits of this Person.  # noqa: E501
        :rtype: float
        """
        return self._num_exits

    @num_exits.setter
    def num_exits(self, num_exits):
        """Sets the num_exits of this Person.

        Total number of Exits\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param num_exits: The num_exits of this Person.  # noqa: E501
        :type: float
        """

        self._num_exits = num_exits

    @property
    def num_exits_ipo(self):
        """Gets the num_exits_ipo of this Person.  # noqa: E501

        Total number of Exits (IPO)\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The num_exits_ipo of this Person.  # noqa: E501
        :rtype: float
        """
        return self._num_exits_ipo

    @num_exits_ipo.setter
    def num_exits_ipo(self, num_exits_ipo):
        """Sets the num_exits_ipo of this Person.

        Total number of Exits (IPO)\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param num_exits_ipo: The num_exits_ipo of this Person.  # noqa: E501
        :type: float
        """

        self._num_exits_ipo = num_exits_ipo

    @property
    def num_founded_organizations(self):
        """Gets the num_founded_organizations of this Person.  # noqa: E501

        Number of Organizations that the person founded\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The num_founded_organizations of this Person.  # noqa: E501
        :rtype: float
        """
        return self._num_founded_organizations

    @num_founded_organizations.setter
    def num_founded_organizations(self, num_founded_organizations):
        """Sets the num_founded_organizations of this Person.

        Number of Organizations that the person founded\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param num_founded_organizations: The num_founded_organizations of this Person.  # noqa: E501
        :type: float
        """

        self._num_founded_organizations = num_founded_organizations

    @property
    def num_investments(self):
        """Gets the num_investments of this Person.  # noqa: E501

        Number of Investments the Individual has participated in\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The num_investments of this Person.  # noqa: E501
        :rtype: float
        """
        return self._num_investments

    @num_investments.setter
    def num_investments(self, num_investments):
        """Sets the num_investments of this Person.

        Number of Investments the Individual has participated in\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param num_investments: The num_investments of this Person.  # noqa: E501
        :type: float
        """

        self._num_investments = num_investments

    @property
    def num_jobs(self):
        """Gets the num_jobs of this Person.  # noqa: E501

        Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The num_jobs of this Person.  # noqa: E501
        :rtype: float
        """
        return self._num_jobs

    @num_jobs.setter
    def num_jobs(self, num_jobs):
        """Sets the num_jobs of this Person.

        Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param num_jobs: The num_jobs of this Person.  # noqa: E501
        :type: float
        """

        self._num_jobs = num_jobs

    @property
    def num_lead_investments(self):
        """Gets the num_lead_investments of this Person.  # noqa: E501

        Number of Investments led by the Individual\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The num_lead_investments of this Person.  # noqa: E501
        :rtype: float
        """
        return self._num_lead_investments

    @num_lead_investments.setter
    def num_lead_investments(self, num_lead_investments):
        """Sets the num_lead_investments of this Person.

        Number of Investments led by the Individual\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param num_lead_investments: The num_lead_investments of this Person.  # noqa: E501
        :type: float
        """

        self._num_lead_investments = num_lead_investments

    @property
    def num_partner_investments(self):
        """Gets the num_partner_investments of this Person.  # noqa: E501

        Number of Investments the Individual has partnered in\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The num_partner_investments of this Person.  # noqa: E501
        :rtype: float
        """
        return self._num_partner_investments

    @num_partner_investments.setter
    def num_partner_investments(self, num_partner_investments):
        """Sets the num_partner_investments of this Person.

        Number of Investments the Individual has partnered in\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param num_partner_investments: The num_partner_investments of this Person.  # noqa: E501
        :type: float
        """

        self._num_partner_investments = num_partner_investments

    @property
    def num_past_advisor_jobs(self):
        """Gets the num_past_advisor_jobs of this Person.  # noqa: E501

        Total number of past Board and Advisor roles the person has\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The num_past_advisor_jobs of this Person.  # noqa: E501
        :rtype: float
        """
        return self._num_past_advisor_jobs

    @num_past_advisor_jobs.setter
    def num_past_advisor_jobs(self, num_past_advisor_jobs):
        """Sets the num_past_advisor_jobs of this Person.

        Total number of past Board and Advisor roles the person has\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param num_past_advisor_jobs: The num_past_advisor_jobs of this Person.  # noqa: E501
        :type: float
        """

        self._num_past_advisor_jobs = num_past_advisor_jobs

    @property
    def num_past_jobs(self):
        """Gets the num_past_jobs of this Person.  # noqa: E501

        Total number of past Jobs the person has\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The num_past_jobs of this Person.  # noqa: E501
        :rtype: float
        """
        return self._num_past_jobs

    @num_past_jobs.setter
    def num_past_jobs(self, num_past_jobs):
        """Sets the num_past_jobs of this Person.

        Total number of past Jobs the person has\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param num_past_jobs: The num_past_jobs of this Person.  # noqa: E501
        :type: float
        """

        self._num_past_jobs = num_past_jobs

    @property
    def num_portfolio_organizations(self):
        """Gets the num_portfolio_organizations of this Person.  # noqa: E501

        Number of portfolio companies associated to the Person\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The num_portfolio_organizations of this Person.  # noqa: E501
        :rtype: float
        """
        return self._num_portfolio_organizations

    @num_portfolio_organizations.setter
    def num_portfolio_organizations(self, num_portfolio_organizations):
        """Sets the num_portfolio_organizations of this Person.

        Number of portfolio companies associated to the Person\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param num_portfolio_organizations: The num_portfolio_organizations of this Person.  # noqa: E501
        :type: float
        """

        self._num_portfolio_organizations = num_portfolio_organizations

    @property
    def override_layout_id(self):
        """Gets the override_layout_id of this Person.  # noqa: E501

        Override the layout of the Entity Profile\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * default - Default Layout  * investor - Investor Layout   # noqa: E501

        :return: The override_layout_id of this Person.  # noqa: E501
        :rtype: str
        """
        return self._override_layout_id

    @override_layout_id.setter
    def override_layout_id(self, override_layout_id):
        """Sets the override_layout_id of this Person.

        Override the layout of the Entity Profile\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * default - Default Layout  * investor - Investor Layout   # noqa: E501

        :param override_layout_id: The override_layout_id of this Person.  # noqa: E501
        :type: str
        """

        self._override_layout_id = override_layout_id

    @property
    def permalink(self):
        """Gets the permalink of this Person.  # noqa: E501

        Field Type: permalink\\ Searchable: No   # noqa: E501

        :return: The permalink of this Person.  # noqa: E501
        :rtype: str
        """
        return self._permalink

    @permalink.setter
    def permalink(self, permalink):
        """Sets the permalink of this Person.

        Field Type: permalink\\ Searchable: No   # noqa: E501

        :param permalink: The permalink of this Person.  # noqa: E501
        :type: str
        """

        self._permalink = permalink

    @property
    def permalink_aliases(self):
        """Gets the permalink_aliases of this Person.  # noqa: E501

        These are the alternative aliases to the primary permalink of the Organization\\ Field Type: text_exact_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :return: The permalink_aliases of this Person.  # noqa: E501
        :rtype: list[str]
        """
        return self._permalink_aliases

    @permalink_aliases.setter
    def permalink_aliases(self, permalink_aliases):
        """Sets the permalink_aliases of this Person.

        These are the alternative aliases to the primary permalink of the Organization\\ Field Type: text_exact_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :param permalink_aliases: The permalink_aliases of this Person.  # noqa: E501
        :type: list[str]
        """

        self._permalink_aliases = permalink_aliases

    @property
    def primary_job_title(self):
        """Gets the primary_job_title of this Person.  # noqa: E501

        The person's primary job title\\ Field Type: text_short\\ Searchable: Yes\\ Search Operators: blank, contains, eq, not_contains, not_eq, starts   # noqa: E501

        :return: The primary_job_title of this Person.  # noqa: E501
        :rtype: str
        """
        return self._primary_job_title

    @primary_job_title.setter
    def primary_job_title(self, primary_job_title):
        """Sets the primary_job_title of this Person.

        The person's primary job title\\ Field Type: text_short\\ Searchable: Yes\\ Search Operators: blank, contains, eq, not_contains, not_eq, starts   # noqa: E501

        :param primary_job_title: The primary_job_title of this Person.  # noqa: E501
        :type: str
        """

        self._primary_job_title = primary_job_title

    @property
    def primary_organization(self):
        """Gets the primary_organization of this Person.  # noqa: E501

        The organization associated to the person's primary job\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :return: The primary_organization of this Person.  # noqa: E501
        :rtype: AllOfPersonPrimaryOrganization
        """
        return self._primary_organization

    @primary_organization.setter
    def primary_organization(self, primary_organization):
        """Sets the primary_organization of this Person.

        The organization associated to the person's primary job\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :param primary_organization: The primary_organization of this Person.  # noqa: E501
        :type: AllOfPersonPrimaryOrganization
        """

        self._primary_organization = primary_organization

    @property
    def rank_delta_d30(self):
        """Gets the rank_delta_d30 of this Person.  # noqa: E501

        Movement in Rank over the last 30 days using a score from -10 to 10\\ Field Type: decimal\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The rank_delta_d30 of this Person.  # noqa: E501
        :rtype: float
        """
        return self._rank_delta_d30

    @rank_delta_d30.setter
    def rank_delta_d30(self, rank_delta_d30):
        """Sets the rank_delta_d30 of this Person.

        Movement in Rank over the last 30 days using a score from -10 to 10\\ Field Type: decimal\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param rank_delta_d30: The rank_delta_d30 of this Person.  # noqa: E501
        :type: float
        """

        self._rank_delta_d30 = rank_delta_d30

    @property
    def rank_delta_d7(self):
        """Gets the rank_delta_d7 of this Person.  # noqa: E501

        Movement in Rank over the last 7 days using a score from -10 to 10\\ Field Type: decimal\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The rank_delta_d7 of this Person.  # noqa: E501
        :rtype: float
        """
        return self._rank_delta_d7

    @rank_delta_d7.setter
    def rank_delta_d7(self, rank_delta_d7):
        """Sets the rank_delta_d7 of this Person.

        Movement in Rank over the last 7 days using a score from -10 to 10\\ Field Type: decimal\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param rank_delta_d7: The rank_delta_d7 of this Person.  # noqa: E501
        :type: float
        """

        self._rank_delta_d7 = rank_delta_d7

    @property
    def rank_delta_d90(self):
        """Gets the rank_delta_d90 of this Person.  # noqa: E501

        Movement in Rank over the last 90 days using a score from -10 to 10\\ Field Type: decimal\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The rank_delta_d90 of this Person.  # noqa: E501
        :rtype: float
        """
        return self._rank_delta_d90

    @rank_delta_d90.setter
    def rank_delta_d90(self, rank_delta_d90):
        """Sets the rank_delta_d90 of this Person.

        Movement in Rank over the last 90 days using a score from -10 to 10\\ Field Type: decimal\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param rank_delta_d90: The rank_delta_d90 of this Person.  # noqa: E501
        :type: float
        """

        self._rank_delta_d90 = rank_delta_d90

    @property
    def rank_person(self):
        """Gets the rank_person of this Person.  # noqa: E501

        Algorithmic rank assigned to the top 100,000 most active People\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The rank_person of this Person.  # noqa: E501
        :rtype: float
        """
        return self._rank_person

    @rank_person.setter
    def rank_person(self, rank_person):
        """Sets the rank_person of this Person.

        Algorithmic rank assigned to the top 100,000 most active People\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param rank_person: The rank_person of this Person.  # noqa: E501
        :type: float
        """

        self._rank_person = rank_person

    @property
    def rank_principal(self):
        """Gets the rank_principal of this Person.  # noqa: E501

        Algorithmic rank assigned to the top 100,000 most active Organizations and People\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The rank_principal of this Person.  # noqa: E501
        :rtype: float
        """
        return self._rank_principal

    @rank_principal.setter
    def rank_principal(self, rank_principal):
        """Sets the rank_principal of this Person.

        Algorithmic rank assigned to the top 100,000 most active Organizations and People\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param rank_principal: The rank_principal of this Person.  # noqa: E501
        :type: float
        """

        self._rank_principal = rank_principal

    @property
    def short_description(self):
        """Gets the short_description of this Person.  # noqa: E501

        Text of Person Description, Industries, and Industry Groups\\ Field Type: text_long\\ Searchable: Yes\\ Search Operators: blank, contains, not_contains   # noqa: E501

        :return: The short_description of this Person.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this Person.

        Text of Person Description, Industries, and Industry Groups\\ Field Type: text_long\\ Searchable: Yes\\ Search Operators: blank, contains, not_contains   # noqa: E501

        :param short_description: The short_description of this Person.  # noqa: E501
        :type: str
        """

        self._short_description = short_description

    @property
    def twitter(self):
        """Gets the twitter of this Person.  # noqa: E501

        Link to a Person's Twitter page\\ Field Type: link\\ Searchable: No   # noqa: E501

        :return: The twitter of this Person.  # noqa: E501
        :rtype: AllOfPersonTwitter
        """
        return self._twitter

    @twitter.setter
    def twitter(self, twitter):
        """Sets the twitter of this Person.

        Link to a Person's Twitter page\\ Field Type: link\\ Searchable: No   # noqa: E501

        :param twitter: The twitter of this Person.  # noqa: E501
        :type: AllOfPersonTwitter
        """

        self._twitter = twitter

    @property
    def updated_at(self):
        """Gets the updated_at of this Person.  # noqa: E501

        Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The updated_at of this Person.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Person.

        Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param updated_at: The updated_at of this Person.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def uuid(self):
        """Gets the uuid of this Person.  # noqa: E501

        Field Type: uuid\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes   # noqa: E501

        :return: The uuid of this Person.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Person.

        Field Type: uuid\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes   # noqa: E501

        :param uuid: The uuid of this Person.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def website(self):
        """Gets the website of this Person.  # noqa: E501

        Link to a Person's website. note: website_url has replaced this field; this field will be deprecated in the near future\\ Field Type: link\\ Searchable: No   # noqa: E501

        :return: The website of this Person.  # noqa: E501
        :rtype: AllOfPersonWebsite
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Person.

        Link to a Person's website. note: website_url has replaced this field; this field will be deprecated in the near future\\ Field Type: link\\ Searchable: No   # noqa: E501

        :param website: The website of this Person.  # noqa: E501
        :type: AllOfPersonWebsite
        """

        self._website = website

    @property
    def website_url(self):
        """Gets the website_url of this Person.  # noqa: E501

        Link to a Person's website\\ Field Type: url\\ Searchable: Yes\\ Search Operators: domain_blank, domain_eq, domain_includes, not_domain_eq, not_domain_includes   # noqa: E501

        :return: The website_url of this Person.  # noqa: E501
        :rtype: str
        """
        return self._website_url

    @website_url.setter
    def website_url(self, website_url):
        """Sets the website_url of this Person.

        Link to a Person's website\\ Field Type: url\\ Searchable: Yes\\ Search Operators: domain_blank, domain_eq, domain_includes, not_domain_eq, not_domain_includes   # noqa: E501

        :param website_url: The website_url of this Person.  # noqa: E501
        :type: str
        """

        self._website_url = website_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Person, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Person):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
