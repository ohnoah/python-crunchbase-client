# coding: utf-8

"""
    Crunchbase Enterprise API

    Crunchbase Enterprise API, 2021-07-16  # noqa: E501

    OpenAPI spec version: 1.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EntitySearch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'field_ids': 'list[str]',
        'query': 'list[Predicate]',
        'order': 'list[Order]',
        'limit': 'int',
        'before_id': 'str',
        'after_id': 'str'
    }

    attribute_map = {
        'field_ids': 'field_ids',
        'query': 'query',
        'order': 'order',
        'limit': 'limit',
        'before_id': 'before_id',
        'after_id': 'after_id'
    }

    def __init__(self, field_ids=None, query=None, order=None, limit=None, before_id=None, after_id=None):  # noqa: E501
        """EntitySearch - a model defined in Swagger"""  # noqa: E501
        self._field_ids = None
        self._query = None
        self._order = None
        self._limit = None
        self._before_id = None
        self._after_id = None
        self.discriminator = None
        self.field_ids = field_ids
        self.query = query
        if order is not None:
            self.order = order
        if limit is not None:
            self.limit = limit
        if before_id is not None:
            self.before_id = before_id
        if after_id is not None:
            self.after_id = after_id

    @property
    def field_ids(self):
        """Gets the field_ids of this EntitySearch.  # noqa: E501

        Fields to include as columns in the search result entities - array of field_id strings  # noqa: E501

        :return: The field_ids of this EntitySearch.  # noqa: E501
        :rtype: list[str]
        """
        return self._field_ids

    @field_ids.setter
    def field_ids(self, field_ids):
        """Sets the field_ids of this EntitySearch.

        Fields to include as columns in the search result entities - array of field_id strings  # noqa: E501

        :param field_ids: The field_ids of this EntitySearch.  # noqa: E501
        :type: list[str]
        """
        if field_ids is None:
            raise ValueError("Invalid value for `field_ids`, must not be `None`")  # noqa: E501

        self._field_ids = field_ids

    @property
    def query(self):
        """Gets the query of this EntitySearch.  # noqa: E501

        Search query to perform on the designated entity  # noqa: E501

        :return: The query of this EntitySearch.  # noqa: E501
        :rtype: list[Predicate]
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this EntitySearch.

        Search query to perform on the designated entity  # noqa: E501

        :param query: The query of this EntitySearch.  # noqa: E501
        :type: list[Predicate]
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")  # noqa: E501

        self._query = query

    @property
    def order(self):
        """Gets the order of this EntitySearch.  # noqa: E501

        Order in which the search results should be returned  # noqa: E501

        :return: The order of this EntitySearch.  # noqa: E501
        :rtype: list[Order]
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this EntitySearch.

        Order in which the search results should be returned  # noqa: E501

        :param order: The order of this EntitySearch.  # noqa: E501
        :type: list[Order]
        """

        self._order = order

    @property
    def limit(self):
        """Gets the limit of this EntitySearch.  # noqa: E501

        Number of rows to return. Default is 100, min is 1, max is 2000.  # noqa: E501

        :return: The limit of this EntitySearch.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this EntitySearch.

        Number of rows to return. Default is 100, min is 1, max is 2000.  # noqa: E501

        :param limit: The limit of this EntitySearch.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def before_id(self):
        """Gets the before_id of this EntitySearch.  # noqa: E501

        Used to paginate search results to the previous page. before_id should be the uuid of the first item in the current page. May not be provided simultaneously with after_id.  # noqa: E501

        :return: The before_id of this EntitySearch.  # noqa: E501
        :rtype: str
        """
        return self._before_id

    @before_id.setter
    def before_id(self, before_id):
        """Sets the before_id of this EntitySearch.

        Used to paginate search results to the previous page. before_id should be the uuid of the first item in the current page. May not be provided simultaneously with after_id.  # noqa: E501

        :param before_id: The before_id of this EntitySearch.  # noqa: E501
        :type: str
        """

        self._before_id = before_id

    @property
    def after_id(self):
        """Gets the after_id of this EntitySearch.  # noqa: E501

        Used to paginate search results to the next page. after_id should be the uuid of the last item in the current page. May not be provided simultaneously with before_id.  # noqa: E501

        :return: The after_id of this EntitySearch.  # noqa: E501
        :rtype: str
        """
        return self._after_id

    @after_id.setter
    def after_id(self, after_id):
        """Sets the after_id of this EntitySearch.

        Used to paginate search results to the next page. after_id should be the uuid of the last item in the current page. May not be provided simultaneously with before_id.  # noqa: E501

        :param after_id: The after_id of this EntitySearch.  # noqa: E501
        :type: str
        """

        self._after_id = after_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EntitySearch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntitySearch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
