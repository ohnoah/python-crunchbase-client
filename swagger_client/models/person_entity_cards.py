# coding: utf-8

"""
    Crunchbase Enterprise API

    Crunchbase Enterprise API, 2021-07-16  # noqa: E501

    OpenAPI spec version: 1.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PersonEntityCards(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'degrees': 'list[Degree]',
        'event_appearances': 'list[EventAppearance]',
        'fields': 'Person',
        'founded_organizations': 'list[Organization]',
        'jobs': 'list[Job]',
        'participated_funding_rounds': 'list[FundingRound]',
        'participated_funds': 'list[Fund]',
        'participated_investments': 'list[Investment]',
        'partner_funding_rounds': 'list[FundingRound]',
        'partner_investments': 'list[Investment]',
        'press_references': 'list[PressReference]',
        'primary_job': 'list[Job]',
        'primary_organization': 'list[Organization]'
    }

    attribute_map = {
        'degrees': 'degrees',
        'event_appearances': 'event_appearances',
        'fields': 'fields',
        'founded_organizations': 'founded_organizations',
        'jobs': 'jobs',
        'participated_funding_rounds': 'participated_funding_rounds',
        'participated_funds': 'participated_funds',
        'participated_investments': 'participated_investments',
        'partner_funding_rounds': 'partner_funding_rounds',
        'partner_investments': 'partner_investments',
        'press_references': 'press_references',
        'primary_job': 'primary_job',
        'primary_organization': 'primary_organization'
    }

    def __init__(self, degrees=None, event_appearances=None, fields=None, founded_organizations=None, jobs=None, participated_funding_rounds=None, participated_funds=None, participated_investments=None, partner_funding_rounds=None, partner_investments=None, press_references=None, primary_job=None, primary_organization=None):  # noqa: E501
        """PersonEntityCards - a model defined in Swagger"""  # noqa: E501
        self._degrees = None
        self._event_appearances = None
        self._fields = None
        self._founded_organizations = None
        self._jobs = None
        self._participated_funding_rounds = None
        self._participated_funds = None
        self._participated_investments = None
        self._partner_funding_rounds = None
        self._partner_investments = None
        self._press_references = None
        self._primary_job = None
        self._primary_organization = None
        self.discriminator = None
        if degrees is not None:
            self.degrees = degrees
        if event_appearances is not None:
            self.event_appearances = event_appearances
        if fields is not None:
            self.fields = fields
        if founded_organizations is not None:
            self.founded_organizations = founded_organizations
        if jobs is not None:
            self.jobs = jobs
        if participated_funding_rounds is not None:
            self.participated_funding_rounds = participated_funding_rounds
        if participated_funds is not None:
            self.participated_funds = participated_funds
        if participated_investments is not None:
            self.participated_investments = participated_investments
        if partner_funding_rounds is not None:
            self.partner_funding_rounds = partner_funding_rounds
        if partner_investments is not None:
            self.partner_investments = partner_investments
        if press_references is not None:
            self.press_references = press_references
        if primary_job is not None:
            self.primary_job = primary_job
        if primary_organization is not None:
            self.primary_organization = primary_organization

    @property
    def degrees(self):
        """Gets the degrees of this PersonEntityCards.  # noqa: E501


        :return: The degrees of this PersonEntityCards.  # noqa: E501
        :rtype: list[Degree]
        """
        return self._degrees

    @degrees.setter
    def degrees(self, degrees):
        """Sets the degrees of this PersonEntityCards.


        :param degrees: The degrees of this PersonEntityCards.  # noqa: E501
        :type: list[Degree]
        """

        self._degrees = degrees

    @property
    def event_appearances(self):
        """Gets the event_appearances of this PersonEntityCards.  # noqa: E501


        :return: The event_appearances of this PersonEntityCards.  # noqa: E501
        :rtype: list[EventAppearance]
        """
        return self._event_appearances

    @event_appearances.setter
    def event_appearances(self, event_appearances):
        """Sets the event_appearances of this PersonEntityCards.


        :param event_appearances: The event_appearances of this PersonEntityCards.  # noqa: E501
        :type: list[EventAppearance]
        """

        self._event_appearances = event_appearances

    @property
    def fields(self):
        """Gets the fields of this PersonEntityCards.  # noqa: E501


        :return: The fields of this PersonEntityCards.  # noqa: E501
        :rtype: Person
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this PersonEntityCards.


        :param fields: The fields of this PersonEntityCards.  # noqa: E501
        :type: Person
        """

        self._fields = fields

    @property
    def founded_organizations(self):
        """Gets the founded_organizations of this PersonEntityCards.  # noqa: E501


        :return: The founded_organizations of this PersonEntityCards.  # noqa: E501
        :rtype: list[Organization]
        """
        return self._founded_organizations

    @founded_organizations.setter
    def founded_organizations(self, founded_organizations):
        """Sets the founded_organizations of this PersonEntityCards.


        :param founded_organizations: The founded_organizations of this PersonEntityCards.  # noqa: E501
        :type: list[Organization]
        """

        self._founded_organizations = founded_organizations

    @property
    def jobs(self):
        """Gets the jobs of this PersonEntityCards.  # noqa: E501


        :return: The jobs of this PersonEntityCards.  # noqa: E501
        :rtype: list[Job]
        """
        return self._jobs

    @jobs.setter
    def jobs(self, jobs):
        """Sets the jobs of this PersonEntityCards.


        :param jobs: The jobs of this PersonEntityCards.  # noqa: E501
        :type: list[Job]
        """

        self._jobs = jobs

    @property
    def participated_funding_rounds(self):
        """Gets the participated_funding_rounds of this PersonEntityCards.  # noqa: E501


        :return: The participated_funding_rounds of this PersonEntityCards.  # noqa: E501
        :rtype: list[FundingRound]
        """
        return self._participated_funding_rounds

    @participated_funding_rounds.setter
    def participated_funding_rounds(self, participated_funding_rounds):
        """Sets the participated_funding_rounds of this PersonEntityCards.


        :param participated_funding_rounds: The participated_funding_rounds of this PersonEntityCards.  # noqa: E501
        :type: list[FundingRound]
        """

        self._participated_funding_rounds = participated_funding_rounds

    @property
    def participated_funds(self):
        """Gets the participated_funds of this PersonEntityCards.  # noqa: E501


        :return: The participated_funds of this PersonEntityCards.  # noqa: E501
        :rtype: list[Fund]
        """
        return self._participated_funds

    @participated_funds.setter
    def participated_funds(self, participated_funds):
        """Sets the participated_funds of this PersonEntityCards.


        :param participated_funds: The participated_funds of this PersonEntityCards.  # noqa: E501
        :type: list[Fund]
        """

        self._participated_funds = participated_funds

    @property
    def participated_investments(self):
        """Gets the participated_investments of this PersonEntityCards.  # noqa: E501


        :return: The participated_investments of this PersonEntityCards.  # noqa: E501
        :rtype: list[Investment]
        """
        return self._participated_investments

    @participated_investments.setter
    def participated_investments(self, participated_investments):
        """Sets the participated_investments of this PersonEntityCards.


        :param participated_investments: The participated_investments of this PersonEntityCards.  # noqa: E501
        :type: list[Investment]
        """

        self._participated_investments = participated_investments

    @property
    def partner_funding_rounds(self):
        """Gets the partner_funding_rounds of this PersonEntityCards.  # noqa: E501


        :return: The partner_funding_rounds of this PersonEntityCards.  # noqa: E501
        :rtype: list[FundingRound]
        """
        return self._partner_funding_rounds

    @partner_funding_rounds.setter
    def partner_funding_rounds(self, partner_funding_rounds):
        """Sets the partner_funding_rounds of this PersonEntityCards.


        :param partner_funding_rounds: The partner_funding_rounds of this PersonEntityCards.  # noqa: E501
        :type: list[FundingRound]
        """

        self._partner_funding_rounds = partner_funding_rounds

    @property
    def partner_investments(self):
        """Gets the partner_investments of this PersonEntityCards.  # noqa: E501


        :return: The partner_investments of this PersonEntityCards.  # noqa: E501
        :rtype: list[Investment]
        """
        return self._partner_investments

    @partner_investments.setter
    def partner_investments(self, partner_investments):
        """Sets the partner_investments of this PersonEntityCards.


        :param partner_investments: The partner_investments of this PersonEntityCards.  # noqa: E501
        :type: list[Investment]
        """

        self._partner_investments = partner_investments

    @property
    def press_references(self):
        """Gets the press_references of this PersonEntityCards.  # noqa: E501


        :return: The press_references of this PersonEntityCards.  # noqa: E501
        :rtype: list[PressReference]
        """
        return self._press_references

    @press_references.setter
    def press_references(self, press_references):
        """Sets the press_references of this PersonEntityCards.


        :param press_references: The press_references of this PersonEntityCards.  # noqa: E501
        :type: list[PressReference]
        """

        self._press_references = press_references

    @property
    def primary_job(self):
        """Gets the primary_job of this PersonEntityCards.  # noqa: E501


        :return: The primary_job of this PersonEntityCards.  # noqa: E501
        :rtype: list[Job]
        """
        return self._primary_job

    @primary_job.setter
    def primary_job(self, primary_job):
        """Sets the primary_job of this PersonEntityCards.


        :param primary_job: The primary_job of this PersonEntityCards.  # noqa: E501
        :type: list[Job]
        """

        self._primary_job = primary_job

    @property
    def primary_organization(self):
        """Gets the primary_organization of this PersonEntityCards.  # noqa: E501


        :return: The primary_organization of this PersonEntityCards.  # noqa: E501
        :rtype: list[Organization]
        """
        return self._primary_organization

    @primary_organization.setter
    def primary_organization(self, primary_organization):
        """Sets the primary_organization of this PersonEntityCards.


        :param primary_organization: The primary_organization of this PersonEntityCards.  # noqa: E501
        :type: list[Organization]
        """

        self._primary_organization = primary_organization

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PersonEntityCards, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PersonEntityCards):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
