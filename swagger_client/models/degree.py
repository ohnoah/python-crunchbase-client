# coding: utf-8

"""
    Crunchbase Enterprise API

    Crunchbase Enterprise API, 2021-07-16  # noqa: E501

    OpenAPI spec version: 1.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Degree(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'completed_on': 'AllOfDegreeCompletedOn',
        'created_at': 'datetime',
        'entity_def_id': 'str',
        'identifier': 'AllOfDegreeIdentifier',
        'name': 'str',
        'person_identifier': 'AllOfDegreePersonIdentifier',
        'school_identifier': 'AllOfDegreeSchoolIdentifier',
        'started_on': 'AllOfDegreeStartedOn',
        'subject': 'str',
        'type_name': 'str',
        'updated_at': 'datetime',
        'uuid': 'str'
    }

    attribute_map = {
        'completed_on': 'completed_on',
        'created_at': 'created_at',
        'entity_def_id': 'entity_def_id',
        'identifier': 'identifier',
        'name': 'name',
        'person_identifier': 'person_identifier',
        'school_identifier': 'school_identifier',
        'started_on': 'started_on',
        'subject': 'subject',
        'type_name': 'type_name',
        'updated_at': 'updated_at',
        'uuid': 'uuid'
    }

    def __init__(self, completed_on=None, created_at=None, entity_def_id=None, identifier=None, name=None, person_identifier=None, school_identifier=None, started_on=None, subject=None, type_name=None, updated_at=None, uuid=None):  # noqa: E501
        """Degree - a model defined in Swagger"""  # noqa: E501
        self._completed_on = None
        self._created_at = None
        self._entity_def_id = None
        self._identifier = None
        self._name = None
        self._person_identifier = None
        self._school_identifier = None
        self._started_on = None
        self._subject = None
        self._type_name = None
        self._updated_at = None
        self._uuid = None
        self.discriminator = None
        if completed_on is not None:
            self.completed_on = completed_on
        if created_at is not None:
            self.created_at = created_at
        if entity_def_id is not None:
            self.entity_def_id = entity_def_id
        self.identifier = identifier
        if name is not None:
            self.name = name
        if person_identifier is not None:
            self.person_identifier = person_identifier
        if school_identifier is not None:
            self.school_identifier = school_identifier
        if started_on is not None:
            self.started_on = started_on
        if subject is not None:
            self.subject = subject
        if type_name is not None:
            self.type_name = type_name
        if updated_at is not None:
            self.updated_at = updated_at
        if uuid is not None:
            self.uuid = uuid

    @property
    def completed_on(self):
        """Gets the completed_on of this Degree.  # noqa: E501

        Date when the degree is completed\\ Field Type: date_precision\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The completed_on of this Degree.  # noqa: E501
        :rtype: AllOfDegreeCompletedOn
        """
        return self._completed_on

    @completed_on.setter
    def completed_on(self, completed_on):
        """Sets the completed_on of this Degree.

        Date when the degree is completed\\ Field Type: date_precision\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param completed_on: The completed_on of this Degree.  # noqa: E501
        :type: AllOfDegreeCompletedOn
        """

        self._completed_on = completed_on

    @property
    def created_at(self):
        """Gets the created_at of this Degree.  # noqa: E501

        Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The created_at of this Degree.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Degree.

        Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param created_at: The created_at of this Degree.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def entity_def_id(self):
        """Gets the entity_def_id of this Degree.  # noqa: E501

        Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * degree - Degree   # noqa: E501

        :return: The entity_def_id of this Degree.  # noqa: E501
        :rtype: str
        """
        return self._entity_def_id

    @entity_def_id.setter
    def entity_def_id(self, entity_def_id):
        """Sets the entity_def_id of this Degree.

        Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * degree - Degree   # noqa: E501

        :param entity_def_id: The entity_def_id of this Degree.  # noqa: E501
        :type: str
        """

        self._entity_def_id = entity_def_id

    @property
    def identifier(self):
        """Gets the identifier of this Degree.  # noqa: E501

        Name of the Degree\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :return: The identifier of this Degree.  # noqa: E501
        :rtype: AllOfDegreeIdentifier
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this Degree.

        Name of the Degree\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :param identifier: The identifier of this Degree.  # noqa: E501
        :type: AllOfDegreeIdentifier
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")  # noqa: E501

        self._identifier = identifier

    @property
    def name(self):
        """Gets the name of this Degree.  # noqa: E501

        Field Type: text_blob\\ Searchable: No   # noqa: E501

        :return: The name of this Degree.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Degree.

        Field Type: text_blob\\ Searchable: No   # noqa: E501

        :param name: The name of this Degree.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def person_identifier(self):
        """Gets the person_identifier of this Degree.  # noqa: E501

        The Person that received the Degree\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :return: The person_identifier of this Degree.  # noqa: E501
        :rtype: AllOfDegreePersonIdentifier
        """
        return self._person_identifier

    @person_identifier.setter
    def person_identifier(self, person_identifier):
        """Sets the person_identifier of this Degree.

        The Person that received the Degree\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :param person_identifier: The person_identifier of this Degree.  # noqa: E501
        :type: AllOfDegreePersonIdentifier
        """

        self._person_identifier = person_identifier

    @property
    def school_identifier(self):
        """Gets the school_identifier of this Degree.  # noqa: E501

        The School that awarded the Degree\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :return: The school_identifier of this Degree.  # noqa: E501
        :rtype: AllOfDegreeSchoolIdentifier
        """
        return self._school_identifier

    @school_identifier.setter
    def school_identifier(self, school_identifier):
        """Sets the school_identifier of this Degree.

        The School that awarded the Degree\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :param school_identifier: The school_identifier of this Degree.  # noqa: E501
        :type: AllOfDegreeSchoolIdentifier
        """

        self._school_identifier = school_identifier

    @property
    def started_on(self):
        """Gets the started_on of this Degree.  # noqa: E501

        Date when the degree is started\\ Field Type: date_precision\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The started_on of this Degree.  # noqa: E501
        :rtype: AllOfDegreeStartedOn
        """
        return self._started_on

    @started_on.setter
    def started_on(self, started_on):
        """Sets the started_on of this Degree.

        Date when the degree is started\\ Field Type: date_precision\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param started_on: The started_on of this Degree.  # noqa: E501
        :type: AllOfDegreeStartedOn
        """

        self._started_on = started_on

    @property
    def subject(self):
        """Gets the subject of this Degree.  # noqa: E501

        The subject or major that the person focused his/her degree on\\ Field Type: text_short\\ Searchable: Yes\\ Search Operators: blank, contains, eq, not_contains, not_eq, starts   # noqa: E501

        :return: The subject of this Degree.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this Degree.

        The subject or major that the person focused his/her degree on\\ Field Type: text_short\\ Searchable: Yes\\ Search Operators: blank, contains, eq, not_contains, not_eq, starts   # noqa: E501

        :param subject: The subject of this Degree.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def type_name(self):
        """Gets the type_name of this Degree.  # noqa: E501

        The type of degree that the person received\\ Field Type: text_short\\ Searchable: Yes\\ Search Operators: blank, contains, eq, not_contains, not_eq, starts   # noqa: E501

        :return: The type_name of this Degree.  # noqa: E501
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name):
        """Sets the type_name of this Degree.

        The type of degree that the person received\\ Field Type: text_short\\ Searchable: Yes\\ Search Operators: blank, contains, eq, not_contains, not_eq, starts   # noqa: E501

        :param type_name: The type_name of this Degree.  # noqa: E501
        :type: str
        """

        self._type_name = type_name

    @property
    def updated_at(self):
        """Gets the updated_at of this Degree.  # noqa: E501

        Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The updated_at of this Degree.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Degree.

        Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param updated_at: The updated_at of this Degree.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def uuid(self):
        """Gets the uuid of this Degree.  # noqa: E501

        Field Type: uuid\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes   # noqa: E501

        :return: The uuid of this Degree.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Degree.

        Field Type: uuid\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes   # noqa: E501

        :param uuid: The uuid of this Degree.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Degree, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Degree):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
