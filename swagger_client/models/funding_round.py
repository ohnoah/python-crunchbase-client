# coding: utf-8

"""
    Crunchbase Enterprise API

    Crunchbase Enterprise API, 2021-07-16  # noqa: E501

    OpenAPI spec version: 1.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FundingRound(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'announced_on': 'date',
        'closed_on': 'AllOfFundingRoundClosedOn',
        'created_at': 'datetime',
        'entity_def_id': 'str',
        'funded_organization_categories': 'list[EntityIdentifier]',
        'funded_organization_description': 'str',
        'funded_organization_diversity_spotlights': 'list[EntityIdentifier]',
        'funded_organization_funding_stage': 'str',
        'funded_organization_funding_total': 'AllOfFundingRoundFundedOrganizationFundingTotal',
        'funded_organization_identifier': 'AllOfFundingRoundFundedOrganizationIdentifier',
        'funded_organization_location': 'list[LocationIdentifier]',
        'funded_organization_revenue_range': 'str',
        'identifier': 'AllOfFundingRoundIdentifier',
        'image_id': 'str',
        'investment_stage': 'str',
        'investment_type': 'str',
        'investor_identifiers': 'list[EntityIdentifier]',
        'is_equity': 'bool',
        'lead_investor_identifiers': 'list[EntityIdentifier]',
        'money_raised': 'AllOfFundingRoundMoneyRaised',
        'name': 'str',
        'num_investors': 'float',
        'num_partners': 'float',
        'permalink': 'str',
        'post_money_valuation': 'AllOfFundingRoundPostMoneyValuation',
        'pre_money_valuation': 'AllOfFundingRoundPreMoneyValuation',
        'rank_funding_round': 'float',
        'short_description': 'str',
        'target_money_raised': 'AllOfFundingRoundTargetMoneyRaised',
        'updated_at': 'datetime',
        'uuid': 'str'
    }

    attribute_map = {
        'announced_on': 'announced_on',
        'closed_on': 'closed_on',
        'created_at': 'created_at',
        'entity_def_id': 'entity_def_id',
        'funded_organization_categories': 'funded_organization_categories',
        'funded_organization_description': 'funded_organization_description',
        'funded_organization_diversity_spotlights': 'funded_organization_diversity_spotlights',
        'funded_organization_funding_stage': 'funded_organization_funding_stage',
        'funded_organization_funding_total': 'funded_organization_funding_total',
        'funded_organization_identifier': 'funded_organization_identifier',
        'funded_organization_location': 'funded_organization_location',
        'funded_organization_revenue_range': 'funded_organization_revenue_range',
        'identifier': 'identifier',
        'image_id': 'image_id',
        'investment_stage': 'investment_stage',
        'investment_type': 'investment_type',
        'investor_identifiers': 'investor_identifiers',
        'is_equity': 'is_equity',
        'lead_investor_identifiers': 'lead_investor_identifiers',
        'money_raised': 'money_raised',
        'name': 'name',
        'num_investors': 'num_investors',
        'num_partners': 'num_partners',
        'permalink': 'permalink',
        'post_money_valuation': 'post_money_valuation',
        'pre_money_valuation': 'pre_money_valuation',
        'rank_funding_round': 'rank_funding_round',
        'short_description': 'short_description',
        'target_money_raised': 'target_money_raised',
        'updated_at': 'updated_at',
        'uuid': 'uuid'
    }

    def __init__(self, announced_on=None, closed_on=None, created_at=None, entity_def_id=None, funded_organization_categories=None, funded_organization_description=None, funded_organization_diversity_spotlights=None, funded_organization_funding_stage=None, funded_organization_funding_total=None, funded_organization_identifier=None, funded_organization_location=None, funded_organization_revenue_range=None, identifier=None, image_id=None, investment_stage=None, investment_type=None, investor_identifiers=None, is_equity=None, lead_investor_identifiers=None, money_raised=None, name=None, num_investors=None, num_partners=None, permalink=None, post_money_valuation=None, pre_money_valuation=None, rank_funding_round=None, short_description=None, target_money_raised=None, updated_at=None, uuid=None):  # noqa: E501
        """FundingRound - a model defined in Swagger"""  # noqa: E501
        self._announced_on = None
        self._closed_on = None
        self._created_at = None
        self._entity_def_id = None
        self._funded_organization_categories = None
        self._funded_organization_description = None
        self._funded_organization_diversity_spotlights = None
        self._funded_organization_funding_stage = None
        self._funded_organization_funding_total = None
        self._funded_organization_identifier = None
        self._funded_organization_location = None
        self._funded_organization_revenue_range = None
        self._identifier = None
        self._image_id = None
        self._investment_stage = None
        self._investment_type = None
        self._investor_identifiers = None
        self._is_equity = None
        self._lead_investor_identifiers = None
        self._money_raised = None
        self._name = None
        self._num_investors = None
        self._num_partners = None
        self._permalink = None
        self._post_money_valuation = None
        self._pre_money_valuation = None
        self._rank_funding_round = None
        self._short_description = None
        self._target_money_raised = None
        self._updated_at = None
        self._uuid = None
        self.discriminator = None
        if announced_on is not None:
            self.announced_on = announced_on
        if closed_on is not None:
            self.closed_on = closed_on
        if created_at is not None:
            self.created_at = created_at
        if entity_def_id is not None:
            self.entity_def_id = entity_def_id
        if funded_organization_categories is not None:
            self.funded_organization_categories = funded_organization_categories
        if funded_organization_description is not None:
            self.funded_organization_description = funded_organization_description
        if funded_organization_diversity_spotlights is not None:
            self.funded_organization_diversity_spotlights = funded_organization_diversity_spotlights
        if funded_organization_funding_stage is not None:
            self.funded_organization_funding_stage = funded_organization_funding_stage
        if funded_organization_funding_total is not None:
            self.funded_organization_funding_total = funded_organization_funding_total
        if funded_organization_identifier is not None:
            self.funded_organization_identifier = funded_organization_identifier
        if funded_organization_location is not None:
            self.funded_organization_location = funded_organization_location
        if funded_organization_revenue_range is not None:
            self.funded_organization_revenue_range = funded_organization_revenue_range
        self.identifier = identifier
        if image_id is not None:
            self.image_id = image_id
        if investment_stage is not None:
            self.investment_stage = investment_stage
        if investment_type is not None:
            self.investment_type = investment_type
        if investor_identifiers is not None:
            self.investor_identifiers = investor_identifiers
        if is_equity is not None:
            self.is_equity = is_equity
        if lead_investor_identifiers is not None:
            self.lead_investor_identifiers = lead_investor_identifiers
        if money_raised is not None:
            self.money_raised = money_raised
        if name is not None:
            self.name = name
        if num_investors is not None:
            self.num_investors = num_investors
        if num_partners is not None:
            self.num_partners = num_partners
        if permalink is not None:
            self.permalink = permalink
        if post_money_valuation is not None:
            self.post_money_valuation = post_money_valuation
        if pre_money_valuation is not None:
            self.pre_money_valuation = pre_money_valuation
        if rank_funding_round is not None:
            self.rank_funding_round = rank_funding_round
        if short_description is not None:
            self.short_description = short_description
        if target_money_raised is not None:
            self.target_money_raised = target_money_raised
        if updated_at is not None:
            self.updated_at = updated_at
        if uuid is not None:
            self.uuid = uuid

    @property
    def announced_on(self):
        """Gets the announced_on of this FundingRound.  # noqa: E501

        Date that the Funding Round was publicly announced\\ Field Type: date\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The announced_on of this FundingRound.  # noqa: E501
        :rtype: date
        """
        return self._announced_on

    @announced_on.setter
    def announced_on(self, announced_on):
        """Sets the announced_on of this FundingRound.

        Date that the Funding Round was publicly announced\\ Field Type: date\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param announced_on: The announced_on of this FundingRound.  # noqa: E501
        :type: date
        """

        self._announced_on = announced_on

    @property
    def closed_on(self):
        """Gets the closed_on of this FundingRound.  # noqa: E501

        Date that the Funding Round was closed\\ Field Type: date_precision\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The closed_on of this FundingRound.  # noqa: E501
        :rtype: AllOfFundingRoundClosedOn
        """
        return self._closed_on

    @closed_on.setter
    def closed_on(self, closed_on):
        """Sets the closed_on of this FundingRound.

        Date that the Funding Round was closed\\ Field Type: date_precision\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param closed_on: The closed_on of this FundingRound.  # noqa: E501
        :type: AllOfFundingRoundClosedOn
        """

        self._closed_on = closed_on

    @property
    def created_at(self):
        """Gets the created_at of this FundingRound.  # noqa: E501

        Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The created_at of this FundingRound.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this FundingRound.

        Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param created_at: The created_at of this FundingRound.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def entity_def_id(self):
        """Gets the entity_def_id of this FundingRound.  # noqa: E501

        Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * funding_round - Funding Round   # noqa: E501

        :return: The entity_def_id of this FundingRound.  # noqa: E501
        :rtype: str
        """
        return self._entity_def_id

    @entity_def_id.setter
    def entity_def_id(self, entity_def_id):
        """Sets the entity_def_id of this FundingRound.

        Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * funding_round - Funding Round   # noqa: E501

        :param entity_def_id: The entity_def_id of this FundingRound.  # noqa: E501
        :type: str
        """

        self._entity_def_id = entity_def_id

    @property
    def funded_organization_categories(self):
        """Gets the funded_organization_categories of this FundingRound.  # noqa: E501

        Industries of the organization that got funded\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :return: The funded_organization_categories of this FundingRound.  # noqa: E501
        :rtype: list[EntityIdentifier]
        """
        return self._funded_organization_categories

    @funded_organization_categories.setter
    def funded_organization_categories(self, funded_organization_categories):
        """Sets the funded_organization_categories of this FundingRound.

        Industries of the organization that got funded\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :param funded_organization_categories: The funded_organization_categories of this FundingRound.  # noqa: E501
        :type: list[EntityIdentifier]
        """

        self._funded_organization_categories = funded_organization_categories

    @property
    def funded_organization_description(self):
        """Gets the funded_organization_description of this FundingRound.  # noqa: E501

        Description of the organization that got funded\\ Field Type: text_long\\ Searchable: Yes\\ Search Operators: blank, contains, not_contains   # noqa: E501

        :return: The funded_organization_description of this FundingRound.  # noqa: E501
        :rtype: str
        """
        return self._funded_organization_description

    @funded_organization_description.setter
    def funded_organization_description(self, funded_organization_description):
        """Sets the funded_organization_description of this FundingRound.

        Description of the organization that got funded\\ Field Type: text_long\\ Searchable: Yes\\ Search Operators: blank, contains, not_contains   # noqa: E501

        :param funded_organization_description: The funded_organization_description of this FundingRound.  # noqa: E501
        :type: str
        """

        self._funded_organization_description = funded_organization_description

    @property
    def funded_organization_diversity_spotlights(self):
        """Gets the funded_organization_diversity_spotlights of this FundingRound.  # noqa: E501

        Types of diversity represented in an organization, specifically of those who are founding members, currently the CEO, or have check-writing abilities in an investment firm. This feature is in beta and may change with future updates.\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :return: The funded_organization_diversity_spotlights of this FundingRound.  # noqa: E501
        :rtype: list[EntityIdentifier]
        """
        return self._funded_organization_diversity_spotlights

    @funded_organization_diversity_spotlights.setter
    def funded_organization_diversity_spotlights(self, funded_organization_diversity_spotlights):
        """Sets the funded_organization_diversity_spotlights of this FundingRound.

        Types of diversity represented in an organization, specifically of those who are founding members, currently the CEO, or have check-writing abilities in an investment firm. This feature is in beta and may change with future updates.\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :param funded_organization_diversity_spotlights: The funded_organization_diversity_spotlights of this FundingRound.  # noqa: E501
        :type: list[EntityIdentifier]
        """

        self._funded_organization_diversity_spotlights = funded_organization_diversity_spotlights

    @property
    def funded_organization_funding_stage(self):
        """Gets the funded_organization_funding_stage of this FundingRound.  # noqa: E501

        Organization's most recent funding status\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * early_stage_venture - Early Stage Venture  * ipo - IPO  * late_stage_venture - Late Stage Venture  * m_and_a - M&A  * private_equity - Private Equity  * seed - Seed   # noqa: E501

        :return: The funded_organization_funding_stage of this FundingRound.  # noqa: E501
        :rtype: str
        """
        return self._funded_organization_funding_stage

    @funded_organization_funding_stage.setter
    def funded_organization_funding_stage(self, funded_organization_funding_stage):
        """Sets the funded_organization_funding_stage of this FundingRound.

        Organization's most recent funding status\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * early_stage_venture - Early Stage Venture  * ipo - IPO  * late_stage_venture - Late Stage Venture  * m_and_a - M&A  * private_equity - Private Equity  * seed - Seed   # noqa: E501

        :param funded_organization_funding_stage: The funded_organization_funding_stage of this FundingRound.  # noqa: E501
        :type: str
        """

        self._funded_organization_funding_stage = funded_organization_funding_stage

    @property
    def funded_organization_funding_total(self):
        """Gets the funded_organization_funding_total of this FundingRound.  # noqa: E501

        Total funding amount raised across all Funding Rounds\\ Field Type: money\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The funded_organization_funding_total of this FundingRound.  # noqa: E501
        :rtype: AllOfFundingRoundFundedOrganizationFundingTotal
        """
        return self._funded_organization_funding_total

    @funded_organization_funding_total.setter
    def funded_organization_funding_total(self, funded_organization_funding_total):
        """Sets the funded_organization_funding_total of this FundingRound.

        Total funding amount raised across all Funding Rounds\\ Field Type: money\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param funded_organization_funding_total: The funded_organization_funding_total of this FundingRound.  # noqa: E501
        :type: AllOfFundingRoundFundedOrganizationFundingTotal
        """

        self._funded_organization_funding_total = funded_organization_funding_total

    @property
    def funded_organization_identifier(self):
        """Gets the funded_organization_identifier of this FundingRound.  # noqa: E501

        Name of the organization that got funded\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :return: The funded_organization_identifier of this FundingRound.  # noqa: E501
        :rtype: AllOfFundingRoundFundedOrganizationIdentifier
        """
        return self._funded_organization_identifier

    @funded_organization_identifier.setter
    def funded_organization_identifier(self, funded_organization_identifier):
        """Sets the funded_organization_identifier of this FundingRound.

        Name of the organization that got funded\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :param funded_organization_identifier: The funded_organization_identifier of this FundingRound.  # noqa: E501
        :type: AllOfFundingRoundFundedOrganizationIdentifier
        """

        self._funded_organization_identifier = funded_organization_identifier

    @property
    def funded_organization_location(self):
        """Gets the funded_organization_location of this FundingRound.  # noqa: E501

        Location of the organization that got funded\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :return: The funded_organization_location of this FundingRound.  # noqa: E501
        :rtype: list[LocationIdentifier]
        """
        return self._funded_organization_location

    @funded_organization_location.setter
    def funded_organization_location(self, funded_organization_location):
        """Sets the funded_organization_location of this FundingRound.

        Location of the organization that got funded\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :param funded_organization_location: The funded_organization_location of this FundingRound.  # noqa: E501
        :type: list[LocationIdentifier]
        """

        self._funded_organization_location = funded_organization_location

    @property
    def funded_organization_revenue_range(self):
        """Gets the funded_organization_revenue_range of this FundingRound.  # noqa: E501

        Revenue range of the organization that got funded\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * r_00000000 - Less than $1M  * r_00001000 - $1M to $10M  * r_00010000 - $10M to $50M  * r_00050000 - $50M to $100M  * r_00100000 - $100M to $500M  * r_00500000 - $500M to $1B  * r_01000000 - $1B to $10B  * r_10000000 - $10B+   # noqa: E501

        :return: The funded_organization_revenue_range of this FundingRound.  # noqa: E501
        :rtype: str
        """
        return self._funded_organization_revenue_range

    @funded_organization_revenue_range.setter
    def funded_organization_revenue_range(self, funded_organization_revenue_range):
        """Sets the funded_organization_revenue_range of this FundingRound.

        Revenue range of the organization that got funded\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * r_00000000 - Less than $1M  * r_00001000 - $1M to $10M  * r_00010000 - $10M to $50M  * r_00050000 - $50M to $100M  * r_00100000 - $100M to $500M  * r_00500000 - $500M to $1B  * r_01000000 - $1B to $10B  * r_10000000 - $10B+   # noqa: E501

        :param funded_organization_revenue_range: The funded_organization_revenue_range of this FundingRound.  # noqa: E501
        :type: str
        """

        self._funded_organization_revenue_range = funded_organization_revenue_range

    @property
    def identifier(self):
        """Gets the identifier of this FundingRound.  # noqa: E501

        Auto-generated name of transaction (e.g. Angel - Uber)\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :return: The identifier of this FundingRound.  # noqa: E501
        :rtype: AllOfFundingRoundIdentifier
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this FundingRound.

        Auto-generated name of transaction (e.g. Angel - Uber)\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :param identifier: The identifier of this FundingRound.  # noqa: E501
        :type: AllOfFundingRoundIdentifier
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")  # noqa: E501

        self._identifier = identifier

    @property
    def image_id(self):
        """Gets the image_id of this FundingRound.  # noqa: E501

        Field Type: image_id\\ Searchable: No   # noqa: E501

        :return: The image_id of this FundingRound.  # noqa: E501
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this FundingRound.

        Field Type: image_id\\ Searchable: No   # noqa: E501

        :param image_id: The image_id of this FundingRound.  # noqa: E501
        :type: str
        """

        self._image_id = image_id

    @property
    def investment_stage(self):
        """Gets the investment_stage of this FundingRound.  # noqa: E501

        The funding stage of a funding round\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * early_stage_venture - Early Stage Venture  * late_stage_venture - Late Stage Venture  * private_equity - Private Equity  * seed - Seed   # noqa: E501

        :return: The investment_stage of this FundingRound.  # noqa: E501
        :rtype: str
        """
        return self._investment_stage

    @investment_stage.setter
    def investment_stage(self, investment_stage):
        """Sets the investment_stage of this FundingRound.

        The funding stage of a funding round\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * early_stage_venture - Early Stage Venture  * late_stage_venture - Late Stage Venture  * private_equity - Private Equity  * seed - Seed   # noqa: E501

        :param investment_stage: The investment_stage of this FundingRound.  # noqa: E501
        :type: str
        """

        self._investment_stage = investment_stage

    @property
    def investment_type(self):
        """Gets the investment_type of this FundingRound.  # noqa: E501

        Type of Funding Round (e.g. Seed, Series A, Private Equity, Debt Financing)\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * angel - Angel  * convertible_note - Convertible Note  * corporate_round - Corporate Round  * debt_financing - Debt Financing  * equity_crowdfunding - Equity Crowdfunding  * grant - Grant  * initial_coin_offering - Initial Coin Offering  * non_equity_assistance - Non-equity Assistance  * post_ipo_debt - Post-IPO Debt  * post_ipo_equity - Post-IPO Equity  * post_ipo_secondary - Post-IPO Secondary  * pre_seed - Pre-Seed  * private_equity - Private Equity  * product_crowdfunding - Product Crowdfunding  * secondary_market - Secondary Market  * seed - Seed  * series_a - Series A  * series_b - Series B  * series_c - Series C  * series_d - Series D  * series_e - Series E  * series_f - Series F  * series_g - Series G  * series_h - Series H  * series_i - Series I  * series_j - Series J  * series_unknown - Venture - Series Unknown  * undisclosed - Funding Round   # noqa: E501

        :return: The investment_type of this FundingRound.  # noqa: E501
        :rtype: str
        """
        return self._investment_type

    @investment_type.setter
    def investment_type(self, investment_type):
        """Sets the investment_type of this FundingRound.

        Type of Funding Round (e.g. Seed, Series A, Private Equity, Debt Financing)\\ Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * angel - Angel  * convertible_note - Convertible Note  * corporate_round - Corporate Round  * debt_financing - Debt Financing  * equity_crowdfunding - Equity Crowdfunding  * grant - Grant  * initial_coin_offering - Initial Coin Offering  * non_equity_assistance - Non-equity Assistance  * post_ipo_debt - Post-IPO Debt  * post_ipo_equity - Post-IPO Equity  * post_ipo_secondary - Post-IPO Secondary  * pre_seed - Pre-Seed  * private_equity - Private Equity  * product_crowdfunding - Product Crowdfunding  * secondary_market - Secondary Market  * seed - Seed  * series_a - Series A  * series_b - Series B  * series_c - Series C  * series_d - Series D  * series_e - Series E  * series_f - Series F  * series_g - Series G  * series_h - Series H  * series_i - Series I  * series_j - Series J  * series_unknown - Venture - Series Unknown  * undisclosed - Funding Round   # noqa: E501

        :param investment_type: The investment_type of this FundingRound.  # noqa: E501
        :type: str
        """

        self._investment_type = investment_type

    @property
    def investor_identifiers(self):
        """Gets the investor_identifiers of this FundingRound.  # noqa: E501

        Names of all investors who invested in the funding round\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :return: The investor_identifiers of this FundingRound.  # noqa: E501
        :rtype: list[EntityIdentifier]
        """
        return self._investor_identifiers

    @investor_identifiers.setter
    def investor_identifiers(self, investor_identifiers):
        """Sets the investor_identifiers of this FundingRound.

        Names of all investors who invested in the funding round\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :param investor_identifiers: The investor_identifiers of this FundingRound.  # noqa: E501
        :type: list[EntityIdentifier]
        """

        self._investor_identifiers = investor_identifiers

    @property
    def is_equity(self):
        """Gets the is_equity of this FundingRound.  # noqa: E501

        This indicates whether the Funding Round is financed only through equity.\\ Field Type: boolean\\ Searchable: Yes\\ Search Operators: blank, eq   # noqa: E501

        :return: The is_equity of this FundingRound.  # noqa: E501
        :rtype: bool
        """
        return self._is_equity

    @is_equity.setter
    def is_equity(self, is_equity):
        """Sets the is_equity of this FundingRound.

        This indicates whether the Funding Round is financed only through equity.\\ Field Type: boolean\\ Searchable: Yes\\ Search Operators: blank, eq   # noqa: E501

        :param is_equity: The is_equity of this FundingRound.  # noqa: E501
        :type: bool
        """

        self._is_equity = is_equity

    @property
    def lead_investor_identifiers(self):
        """Gets the lead_investor_identifiers of this FundingRound.  # noqa: E501

        Name of the investor who led the investment in the funding round\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :return: The lead_investor_identifiers of this FundingRound.  # noqa: E501
        :rtype: list[EntityIdentifier]
        """
        return self._lead_investor_identifiers

    @lead_investor_identifiers.setter
    def lead_investor_identifiers(self, lead_investor_identifiers):
        """Sets the lead_investor_identifiers of this FundingRound.

        Name of the investor who led the investment in the funding round\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :param lead_investor_identifiers: The lead_investor_identifiers of this FundingRound.  # noqa: E501
        :type: list[EntityIdentifier]
        """

        self._lead_investor_identifiers = lead_investor_identifiers

    @property
    def money_raised(self):
        """Gets the money_raised of this FundingRound.  # noqa: E501

        Amount of money raised in Funding Round\\ Field Type: money\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The money_raised of this FundingRound.  # noqa: E501
        :rtype: AllOfFundingRoundMoneyRaised
        """
        return self._money_raised

    @money_raised.setter
    def money_raised(self, money_raised):
        """Sets the money_raised of this FundingRound.

        Amount of money raised in Funding Round\\ Field Type: money\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param money_raised: The money_raised of this FundingRound.  # noqa: E501
        :type: AllOfFundingRoundMoneyRaised
        """

        self._money_raised = money_raised

    @property
    def name(self):
        """Gets the name of this FundingRound.  # noqa: E501

        Field Type: text_blob\\ Searchable: No   # noqa: E501

        :return: The name of this FundingRound.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FundingRound.

        Field Type: text_blob\\ Searchable: No   # noqa: E501

        :param name: The name of this FundingRound.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def num_investors(self):
        """Gets the num_investors of this FundingRound.  # noqa: E501

        Total number of Investors in a Funding Round\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The num_investors of this FundingRound.  # noqa: E501
        :rtype: float
        """
        return self._num_investors

    @num_investors.setter
    def num_investors(self, num_investors):
        """Sets the num_investors of this FundingRound.

        Total number of Investors in a Funding Round\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param num_investors: The num_investors of this FundingRound.  # noqa: E501
        :type: float
        """

        self._num_investors = num_investors

    @property
    def num_partners(self):
        """Gets the num_partners of this FundingRound.  # noqa: E501

        Total number of Partner Investors in a Funding Round\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The num_partners of this FundingRound.  # noqa: E501
        :rtype: float
        """
        return self._num_partners

    @num_partners.setter
    def num_partners(self, num_partners):
        """Sets the num_partners of this FundingRound.

        Total number of Partner Investors in a Funding Round\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param num_partners: The num_partners of this FundingRound.  # noqa: E501
        :type: float
        """

        self._num_partners = num_partners

    @property
    def permalink(self):
        """Gets the permalink of this FundingRound.  # noqa: E501

        Field Type: permalink\\ Searchable: No   # noqa: E501

        :return: The permalink of this FundingRound.  # noqa: E501
        :rtype: str
        """
        return self._permalink

    @permalink.setter
    def permalink(self, permalink):
        """Sets the permalink of this FundingRound.

        Field Type: permalink\\ Searchable: No   # noqa: E501

        :param permalink: The permalink of this FundingRound.  # noqa: E501
        :type: str
        """

        self._permalink = permalink

    @property
    def post_money_valuation(self):
        """Gets the post_money_valuation of this FundingRound.  # noqa: E501

        Valuation of a Company after a Funding Round\\ Field Type: money\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The post_money_valuation of this FundingRound.  # noqa: E501
        :rtype: AllOfFundingRoundPostMoneyValuation
        """
        return self._post_money_valuation

    @post_money_valuation.setter
    def post_money_valuation(self, post_money_valuation):
        """Sets the post_money_valuation of this FundingRound.

        Valuation of a Company after a Funding Round\\ Field Type: money\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param post_money_valuation: The post_money_valuation of this FundingRound.  # noqa: E501
        :type: AllOfFundingRoundPostMoneyValuation
        """

        self._post_money_valuation = post_money_valuation

    @property
    def pre_money_valuation(self):
        """Gets the pre_money_valuation of this FundingRound.  # noqa: E501

        Valuation of a Company prior to a Funding Round\\ Field Type: money\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The pre_money_valuation of this FundingRound.  # noqa: E501
        :rtype: AllOfFundingRoundPreMoneyValuation
        """
        return self._pre_money_valuation

    @pre_money_valuation.setter
    def pre_money_valuation(self, pre_money_valuation):
        """Sets the pre_money_valuation of this FundingRound.

        Valuation of a Company prior to a Funding Round\\ Field Type: money\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param pre_money_valuation: The pre_money_valuation of this FundingRound.  # noqa: E501
        :type: AllOfFundingRoundPreMoneyValuation
        """

        self._pre_money_valuation = pre_money_valuation

    @property
    def rank_funding_round(self):
        """Gets the rank_funding_round of this FundingRound.  # noqa: E501

        Algorithmic rank assigned to the top 100,000 most active Funding Rounds\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The rank_funding_round of this FundingRound.  # noqa: E501
        :rtype: float
        """
        return self._rank_funding_round

    @rank_funding_round.setter
    def rank_funding_round(self, rank_funding_round):
        """Sets the rank_funding_round of this FundingRound.

        Algorithmic rank assigned to the top 100,000 most active Funding Rounds\\ Field Type: integer\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param rank_funding_round: The rank_funding_round of this FundingRound.  # noqa: E501
        :type: float
        """

        self._rank_funding_round = rank_funding_round

    @property
    def short_description(self):
        """Gets the short_description of this FundingRound.  # noqa: E501

        Short description of the Funding Round\\ Field Type: text_long\\ Searchable: Yes\\ Search Operators: blank, contains, not_contains   # noqa: E501

        :return: The short_description of this FundingRound.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this FundingRound.

        Short description of the Funding Round\\ Field Type: text_long\\ Searchable: Yes\\ Search Operators: blank, contains, not_contains   # noqa: E501

        :param short_description: The short_description of this FundingRound.  # noqa: E501
        :type: str
        """

        self._short_description = short_description

    @property
    def target_money_raised(self):
        """Gets the target_money_raised of this FundingRound.  # noqa: E501

        Amount of money the funded Organization would like to raised in the Funding Round\\ Field Type: money\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :return: The target_money_raised of this FundingRound.  # noqa: E501
        :rtype: AllOfFundingRoundTargetMoneyRaised
        """
        return self._target_money_raised

    @target_money_raised.setter
    def target_money_raised(self, target_money_raised):
        """Sets the target_money_raised of this FundingRound.

        Amount of money the funded Organization would like to raised in the Funding Round\\ Field Type: money\\ Searchable: Yes\\ Search Operators: between, blank, eq, gt, gte, lt, lte, not_eq   # noqa: E501

        :param target_money_raised: The target_money_raised of this FundingRound.  # noqa: E501
        :type: AllOfFundingRoundTargetMoneyRaised
        """

        self._target_money_raised = target_money_raised

    @property
    def updated_at(self):
        """Gets the updated_at of this FundingRound.  # noqa: E501

        Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The updated_at of this FundingRound.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this FundingRound.

        Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param updated_at: The updated_at of this FundingRound.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def uuid(self):
        """Gets the uuid of this FundingRound.  # noqa: E501

        Field Type: uuid\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes   # noqa: E501

        :return: The uuid of this FundingRound.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this FundingRound.

        Field Type: uuid\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes   # noqa: E501

        :param uuid: The uuid of this FundingRound.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FundingRound, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FundingRound):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
