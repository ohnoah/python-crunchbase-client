# coding: utf-8

"""
    Crunchbase Enterprise API

    Crunchbase Enterprise API, 2021-07-16  # noqa: E501

    OpenAPI spec version: 1.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Address(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'country_code': 'str',
        'created_at': 'datetime',
        'entity_def_id': 'str',
        'headquartered_organization_identifier': 'AllOfAddressHeadquarteredOrganizationIdentifier',
        'identifier': 'AllOfAddressIdentifier',
        'location_identifiers': 'list[LocationIdentifier]',
        'name': 'str',
        'postal_code': 'str',
        'region_code': 'str',
        'street_1': 'str',
        'street_2': 'str',
        'updated_at': 'datetime',
        'uuid': 'str'
    }

    attribute_map = {
        'country_code': 'country_code',
        'created_at': 'created_at',
        'entity_def_id': 'entity_def_id',
        'headquartered_organization_identifier': 'headquartered_organization_identifier',
        'identifier': 'identifier',
        'location_identifiers': 'location_identifiers',
        'name': 'name',
        'postal_code': 'postal_code',
        'region_code': 'region_code',
        'street_1': 'street_1',
        'street_2': 'street_2',
        'updated_at': 'updated_at',
        'uuid': 'uuid'
    }

    def __init__(self, country_code=None, created_at=None, entity_def_id=None, headquartered_organization_identifier=None, identifier=None, location_identifiers=None, name=None, postal_code=None, region_code=None, street_1=None, street_2=None, updated_at=None, uuid=None):  # noqa: E501
        """Address - a model defined in Swagger"""  # noqa: E501
        self._country_code = None
        self._created_at = None
        self._entity_def_id = None
        self._headquartered_organization_identifier = None
        self._identifier = None
        self._location_identifiers = None
        self._name = None
        self._postal_code = None
        self._region_code = None
        self._street_1 = None
        self._street_2 = None
        self._updated_at = None
        self._uuid = None
        self.discriminator = None
        if country_code is not None:
            self.country_code = country_code
        if created_at is not None:
            self.created_at = created_at
        if entity_def_id is not None:
            self.entity_def_id = entity_def_id
        if headquartered_organization_identifier is not None:
            self.headquartered_organization_identifier = headquartered_organization_identifier
        self.identifier = identifier
        if location_identifiers is not None:
            self.location_identifiers = location_identifiers
        if name is not None:
            self.name = name
        if postal_code is not None:
            self.postal_code = postal_code
        if region_code is not None:
            self.region_code = region_code
        if street_1 is not None:
            self.street_1 = street_1
        if street_2 is not None:
            self.street_2 = street_2
        if updated_at is not None:
            self.updated_at = updated_at
        if uuid is not None:
            self.uuid = uuid

    @property
    def country_code(self):
        """Gets the country_code of this Address.  # noqa: E501

        Country Code\\ Field Type: text_exact\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes   # noqa: E501

        :return: The country_code of this Address.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Address.

        Country Code\\ Field Type: text_exact\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes   # noqa: E501

        :param country_code: The country_code of this Address.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def created_at(self):
        """Gets the created_at of this Address.  # noqa: E501

        Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The created_at of this Address.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Address.

        Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param created_at: The created_at of this Address.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def entity_def_id(self):
        """Gets the entity_def_id of this Address.  # noqa: E501

        Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * address - Address   # noqa: E501

        :return: The entity_def_id of this Address.  # noqa: E501
        :rtype: str
        """
        return self._entity_def_id

    @entity_def_id.setter
    def entity_def_id(self, entity_def_id):
        """Sets the entity_def_id of this Address.

        Field Type: enum\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes\\ Possible values are:  * address - Address   # noqa: E501

        :param entity_def_id: The entity_def_id of this Address.  # noqa: E501
        :type: str
        """

        self._entity_def_id = entity_def_id

    @property
    def headquartered_organization_identifier(self):
        """Gets the headquartered_organization_identifier of this Address.  # noqa: E501

        Identifier of the organization that's headquartered on this address\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :return: The headquartered_organization_identifier of this Address.  # noqa: E501
        :rtype: AllOfAddressHeadquarteredOrganizationIdentifier
        """
        return self._headquartered_organization_identifier

    @headquartered_organization_identifier.setter
    def headquartered_organization_identifier(self, headquartered_organization_identifier):
        """Sets the headquartered_organization_identifier of this Address.

        Identifier of the organization that's headquartered on this address\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :param headquartered_organization_identifier: The headquartered_organization_identifier of this Address.  # noqa: E501
        :type: AllOfAddressHeadquarteredOrganizationIdentifier
        """

        self._headquartered_organization_identifier = headquartered_organization_identifier

    @property
    def identifier(self):
        """Gets the identifier of this Address.  # noqa: E501

        Descriptive name of the Address (e.g. Headquarters, London Office)\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :return: The identifier of this Address.  # noqa: E501
        :rtype: AllOfAddressIdentifier
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this Address.

        Descriptive name of the Address (e.g. Headquarters, London Office)\\ Field Type: identifier\\ Searchable: Yes\\ Search Operators: blank, contains, eq, includes, not_contains, not_eq, not_includes, starts   # noqa: E501

        :param identifier: The identifier of this Address.  # noqa: E501
        :type: AllOfAddressIdentifier
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")  # noqa: E501

        self._identifier = identifier

    @property
    def location_identifiers(self):
        """Gets the location_identifiers of this Address.  # noqa: E501

        What city the address is located in (e.g. San Francisco, London, Kiev).\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :return: The location_identifiers of this Address.  # noqa: E501
        :rtype: list[LocationIdentifier]
        """
        return self._location_identifiers

    @location_identifiers.setter
    def location_identifiers(self, location_identifiers):
        """Sets the location_identifiers of this Address.

        What city the address is located in (e.g. San Francisco, London, Kiev).\\ Field Type: identifier_multi\\ Searchable: Yes\\ Search Operators: blank, includes, includes_all, not_includes, not_includes_all   # noqa: E501

        :param location_identifiers: The location_identifiers of this Address.  # noqa: E501
        :type: list[LocationIdentifier]
        """

        self._location_identifiers = location_identifiers

    @property
    def name(self):
        """Gets the name of this Address.  # noqa: E501

        Descriptive name of the Address (e.g. Headquarters, London Office)\\ Field Type: text_blob\\ Searchable: No   # noqa: E501

        :return: The name of this Address.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Address.

        Descriptive name of the Address (e.g. Headquarters, London Office)\\ Field Type: text_blob\\ Searchable: No   # noqa: E501

        :param name: The name of this Address.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def postal_code(self):
        """Gets the postal_code of this Address.  # noqa: E501

        The postal code of the address\\ Field Type: text_blob\\ Searchable: No   # noqa: E501

        :return: The postal_code of this Address.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Address.

        The postal code of the address\\ Field Type: text_blob\\ Searchable: No   # noqa: E501

        :param postal_code: The postal_code of this Address.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def region_code(self):
        """Gets the region_code of this Address.  # noqa: E501

        Region Code\\ Field Type: text_exact\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes   # noqa: E501

        :return: The region_code of this Address.  # noqa: E501
        :rtype: str
        """
        return self._region_code

    @region_code.setter
    def region_code(self, region_code):
        """Sets the region_code of this Address.

        Region Code\\ Field Type: text_exact\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes   # noqa: E501

        :param region_code: The region_code of this Address.  # noqa: E501
        :type: str
        """

        self._region_code = region_code

    @property
    def street_1(self):
        """Gets the street_1 of this Address.  # noqa: E501

        The street address of the location\\ Field Type: text_blob\\ Searchable: No   # noqa: E501

        :return: The street_1 of this Address.  # noqa: E501
        :rtype: str
        """
        return self._street_1

    @street_1.setter
    def street_1(self, street_1):
        """Sets the street_1 of this Address.

        The street address of the location\\ Field Type: text_blob\\ Searchable: No   # noqa: E501

        :param street_1: The street_1 of this Address.  # noqa: E501
        :type: str
        """

        self._street_1 = street_1

    @property
    def street_2(self):
        """Gets the street_2 of this Address.  # noqa: E501

        The street address of the location\\ Field Type: text_blob\\ Searchable: No   # noqa: E501

        :return: The street_2 of this Address.  # noqa: E501
        :rtype: str
        """
        return self._street_2

    @street_2.setter
    def street_2(self, street_2):
        """Sets the street_2 of this Address.

        The street address of the location\\ Field Type: text_blob\\ Searchable: No   # noqa: E501

        :param street_2: The street_2 of this Address.  # noqa: E501
        :type: str
        """

        self._street_2 = street_2

    @property
    def updated_at(self):
        """Gets the updated_at of this Address.  # noqa: E501

        Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :return: The updated_at of this Address.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Address.

        Field Type: datetime\\ Searchable: Yes\\ Search Operators: between, blank, eq, gte, lte   # noqa: E501

        :param updated_at: The updated_at of this Address.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def uuid(self):
        """Gets the uuid of this Address.  # noqa: E501

        Field Type: uuid\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes   # noqa: E501

        :return: The uuid of this Address.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Address.

        Field Type: uuid\\ Searchable: Yes\\ Search Operators: blank, eq, includes, not_eq, not_includes   # noqa: E501

        :param uuid: The uuid of this Address.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Address, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Address):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
