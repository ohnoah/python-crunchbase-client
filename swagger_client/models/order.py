# coding: utf-8

"""
    Crunchbase Enterprise API

    Crunchbase Enterprise API, 2021-07-16  # noqa: E501

    OpenAPI spec version: 1.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Order(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'field_id': 'str',
        'sort': 'str',
        'nulls': 'str'
    }

    attribute_map = {
        'field_id': 'field_id',
        'sort': 'sort',
        'nulls': 'nulls'
    }

    def __init__(self, field_id=None, sort='asc', nulls='last'):  # noqa: E501
        """Order - a model defined in Swagger"""  # noqa: E501
        self._field_id = None
        self._sort = None
        self._nulls = None
        self.discriminator = None
        self.field_id = field_id
        self.sort = sort
        if nulls is not None:
            self.nulls = nulls

    @property
    def field_id(self):
        """Gets the field_id of this Order.  # noqa: E501

        Name of the field to sort on  # noqa: E501

        :return: The field_id of this Order.  # noqa: E501
        :rtype: str
        """
        return self._field_id

    @field_id.setter
    def field_id(self, field_id):
        """Sets the field_id of this Order.

        Name of the field to sort on  # noqa: E501

        :param field_id: The field_id of this Order.  # noqa: E501
        :type: str
        """
        if field_id is None:
            raise ValueError("Invalid value for `field_id`, must not be `None`")  # noqa: E501

        self._field_id = field_id

    @property
    def sort(self):
        """Gets the sort of this Order.  # noqa: E501

        Direction of sorting  # noqa: E501

        :return: The sort of this Order.  # noqa: E501
        :rtype: str
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this Order.

        Direction of sorting  # noqa: E501

        :param sort: The sort of this Order.  # noqa: E501
        :type: str
        """
        if sort is None:
            raise ValueError("Invalid value for `sort`, must not be `None`")  # noqa: E501
        allowed_values = ["asc", "desc"]  # noqa: E501
        if sort not in allowed_values:
            raise ValueError(
                "Invalid value for `sort` ({0}), must be one of {1}"  # noqa: E501
                .format(sort, allowed_values)
            )

        self._sort = sort

    @property
    def nulls(self):
        """Gets the nulls of this Order.  # noqa: E501

        Whether to include null values at the beginning or end of the sort. Defaults to end.  # noqa: E501

        :return: The nulls of this Order.  # noqa: E501
        :rtype: str
        """
        return self._nulls

    @nulls.setter
    def nulls(self, nulls):
        """Sets the nulls of this Order.

        Whether to include null values at the beginning or end of the sort. Defaults to end.  # noqa: E501

        :param nulls: The nulls of this Order.  # noqa: E501
        :type: str
        """
        allowed_values = ["first", "last"]  # noqa: E501
        if nulls not in allowed_values:
            raise ValueError(
                "Invalid value for `nulls` ({0}), must be one of {1}"  # noqa: E501
                .format(nulls, allowed_values)
            )

        self._nulls = nulls

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Order, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Order):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
